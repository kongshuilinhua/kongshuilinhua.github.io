<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python 算法常用库函数</title>
    <link href="/2024/12/23/1/"/>
    <url>/2024/12/23/1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍一些常用的 py 库函数</p></blockquote><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><ol><li><p><code>abs(x)</code><br>返回一个数字的绝对值。参数可以是整数、浮点数、复数等。如果参数是一个复数，则返回它的模。</p></li><li><p><code>all(iterable)</code><br>如果 iterable 的所有元素均为真值（或可迭代对象为空）则返回 True 。<br>示例代码:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nums</span> =<span class="hljs-meta"> [1, 2, 3, 4, 5]</span><br><span class="hljs-comment"># 检查是否所有元素都是偶数</span><br><span class="hljs-attribute">print</span>(<span class="hljs-literal">all</span>(x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> for x in nums))  # False<br></code></pre></td></tr></table></figure></li><li><p><code>any(iterable)</code></p><p>如果 iterable 的任一元素为真值则返回 True。 如果可迭代对象为空，返回 False。<br>例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nums</span> =<span class="hljs-meta"> [1, 2, 3, 4, 5]</span><br><span class="hljs-comment"># 检查列表中是否包含偶数</span><br><span class="hljs-attribute">print</span>(any(x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> for x in nums))  # True<br></code></pre></td></tr></table></figure></li><li><p><code>bin(x)</code><br>将一个整数转换为带前缀 “0b” 的二进制数字符串。<br>例:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">print</span>(bin(<span class="hljs-number">5</span>)) # <span class="hljs-number">0b101</span><br><span class="hljs-built_in">print</span>(bin(-<span class="hljs-number">6</span>)) # -<span class="hljs-number">0b110</span><br></code></pre></td></tr></table></figure></li><li><p><code>chr(i)</code> 和 <code>ord(c)</code><br>这两个函数互为逆函数。<br><code>chr(i)</code>返回 Unicode 码位为整数<code>i</code> 的字符的字符串格式。<br><code>ord(c)</code>对表示单个 Unicode 字符的字符串，返回代表它 Unicode 码点的整数。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">chr</span>(<span class="hljs-number">97</span>))  <span class="hljs-comment"># &#x27;a&#x27;</span><br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)) <span class="hljs-comment"># 97</span><br></code></pre></td></tr></table></figure></li><li><p><code>divmod(a, b)</code><br>接受两个数字作为参数并返回由当对其使用整数除法时的商和余数组成的数字对。 结果与 (a // b, a % b) 相同。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>, b = divmod(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>)  # a = <span class="hljs-number">3</span>, b = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p><code>enumerate(iterable, start=0)</code><br>传入一个可迭代对象返回一个元组，里面包含一个计数值（从 start 开始，默认为 0）和通过迭代 iterable 获得的值。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nums</span> =<span class="hljs-meta"> [100, 200, 300, 400, 500]</span><br><span class="hljs-comment"># [(1, 100), (2, 200), (3, 300), (4, 400), (5, 500)]</span><br><span class="hljs-attribute">print</span>(list(enumerate(nums, <span class="hljs-number">1</span>)))<br></code></pre></td></tr></table></figure></li><li><p><code>eval(expression)</code><br>用来执行一个字符串表达式，并返回表达式的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">s = <span class="hljs-string">&quot;1 + 2 * 3 + 8 // 4&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(s))  <span class="hljs-comment"># 9</span><br></code></pre></td></tr></table></figure></li><li><p><code>int(x, base=10)</code><br>将一个字符串或数字转换为整数。如果第二个参数 base 给出，则 x 必须是一个字符串，表示进制数（如 2 表示二进制，8 表示八进制，10 表示十进制，16 表示十六进制）。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;5&#x27;</span>))  <span class="hljs-meta"># 5</span><br><span class="hljs-keyword">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;1010&#x27;</span>, <span class="hljs-number">2</span>))  <span class="hljs-meta"># 10</span><br></code></pre></td></tr></table></figure></li><li><p><code>max(iterable, *[, key, default])</code> 和 <code>min(iterable, *[, key, default])</code><br>大家都知道这两个函数的作用，需要注意的是，如果传入的可迭代对象为空，会抛出 <em>ValueError</em> 异常。可以通过 default 参数设置默认返回值。</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs monkey">nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(nums))<span class="hljs-meta">  # 5</span><br>nums2 = []<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(nums2))<span class="hljs-meta">  # ValueError: max() arg is an empty sequence</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(nums2, <span class="hljs-keyword">default</span>=<span class="hljs-number">0</span>))<span class="hljs-meta">  # 0</span><br></code></pre></td></tr></table></figure></li></ol><p>11.<code>pow(base, exp, mod=None)</code><br>返回<em>base</em>的 exp 次幂；如果 mod 存在，则返回结果对 mod 取模。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">print</span>(pow(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  # <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python 算法 库函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>149小A的移动点</title>
    <link href="/2024/12/23/149%E5%B0%8FA%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%82%B9/"/>
    <url>/2024/12/23/149%E5%B0%8FA%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>小 M 有<code>n</code>个点，每个点的坐标为 ($x_i$, $y_i$)。她可以从一个点出发，沿着坐标轴方向移动，直到到达另一个点。具体来说，可以从 <code>(x1, y1)</code> 直接移动到 <code>(x2, y1)</code> 或者 <code>(x1, y2)</code>，但无法直接移动到 <code>(x2, y2)</code>。为了确保任意两个点之间都可以通过这种路径互相到达，小 M 需要增加最少数量的新点。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这个问题可以转化为图论中的连通性问题。将每个点看作图中的一个节点，如果两个点在同一行或同一列，则它们之间有一条边相连。我们需要找到图中的连通分量数目，然后最少需要增加的点数就是连通分量数目减一。</p><p>具体步骤如下：</p><ol><li><strong>并查集（Union-Find）</strong>：使用并查集数据结构来管理点的连接关系，方便快速合并和查找不同连通分量。</li><li><strong>建立行和列的映射</strong>：<ul><li>使用两个字典，<code>row</code> 和 <code>col</code>，分别存储每一行和每一列上的点的索引。</li><li>遍历所有点，将具有相同<code>x</code>坐标的点加入同一行，具有相同<code>y</code>坐标的点加入同一列。</li></ul></li><li><strong>合并连通分量</strong>：<ul><li>对于每一行中的所有点，依次将它们合并到第一点所在的连通分量。</li><li>对于每一列中的所有点，依次将它们合并到第一点所在的连通分量。</li></ul></li><li><strong>计算连通分量</strong>：<ul><li>最终，通过并查集找到所有点的根节点，统计不同的根节点数量，即为连通分量的数目。</li></ul></li><li><strong>得出结果</strong>：<ul><li>最少需要增加的点数为连通分量数目减一。</li></ul></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, points: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    p = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">if</span> x != p[x]:<br>            p[x] = find(p[x])<br>        <span class="hljs-keyword">return</span> p[x]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">union</span>(<span class="hljs-params">x, y</span>):<br>        x, y = find(x), find(y)<br>        <span class="hljs-keyword">if</span> x != y:<br>            p[y] = x<br><br>    row = defaultdict(<span class="hljs-built_in">list</span>)<br>    col = defaultdict(<span class="hljs-built_in">list</span>)<br>    <span class="hljs-keyword">for</span> i, (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(points):<br>        row[x].append(i)<br>        col[y].append(i)<br><br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> row.values():<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(v)):<br>            union(v[<span class="hljs-number">0</span>], v[i])<br><br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> col.values():<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(v)):<br>            union(v[<span class="hljs-number">0</span>], v[i])<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(find(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n))) - <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">2</span>, [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]]) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>]]) == <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, [[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">4</span>]]) == <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法 图论 并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>27游戏英雄升级潜力评估 一行代码解决</title>
    <link href="/2024/12/22/27%E6%B8%B8%E6%88%8F%E8%8B%B1%E9%9B%84%E5%8D%87%E7%BA%A7%E6%BD%9C%E5%8A%9B%E8%AF%84%E4%BC%B0-%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3/"/>
    <url>/2024/12/22/27%E6%B8%B8%E6%88%8F%E8%8B%B1%E9%9B%84%E5%8D%87%E7%BA%A7%E6%BD%9C%E5%8A%9B%E8%AF%84%E4%BC%B0-%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>小 U 在一款挂机游戏中拥有 n 个英雄。游戏中有一种历练升级机制，每天可以选择两个英雄进行历练，如果两位英雄的等级相同，则他们的等级都不会改变。如果英雄等级不同，那么等级较高的英雄会增加 1 级，而等级较低的英雄则保持不变。</p><p>小 U 希望至少有一个英雄能够达到<code>2000000000000000</code>级，现需要确定有多少英雄有潜力通过历练达到这个目标等级。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>要使至少有一个英雄达到<code>2000000000000000</code>级，必须确保有英雄能够不断提升等级。观察历练规则：</p><ul><li><strong>相同等级的英雄</strong>无法提升。</li><li><strong>不同等级的英雄</strong>中，等级较高的英雄每次历练都会增加 1 级。</li></ul><p>因此，只有不是最低等级的英雄才有可能通过不断历练达到高等级。最低等级的英雄无法提升，因此它们不具备达成目标的潜力。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li><strong>找出最低等级</strong>：确定所有英雄中当前的最低等级。</li><li><strong>计算最低等级英雄的数量</strong>：这些英雄无法通过历练提升。</li><li><strong>潜力英雄数量</strong>：总英雄数减去最低等级英雄的数量。</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, u: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> n - u.count(<span class="hljs-built_in">min</span>(u))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">5</span>, u = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]) == <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">4</span>, u = [<span class="hljs-number">100000</span>, <span class="hljs-number">100000</span>, <span class="hljs-number">100000</span>, <span class="hljs-number">100000</span>]) == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">6</span>, u = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>]) == <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19 字典序最小的 01 字符串 简单 O(n)做法</title>
    <link href="/2024/12/22/19-%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%B0%8F%E7%9A%84-01-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%AE%80%E5%8D%95-O-n-%E5%81%9A%E6%B3%95/"/>
    <url>/2024/12/22/19-%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%B0%8F%E7%9A%84-01-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%AE%80%E5%8D%95-O-n-%E5%81%9A%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="19-字典序最小的-01-字符串-简单-O-n-做法"><a href="#19-字典序最小的-01-字符串-简单-O-n-做法" class="headerlink" title="19 字典序最小的 01 字符串 简单 O(n)做法"></a>19 字典序最小的 01 字符串 简单 O(n)做法</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>小 U 拥有一个由<code>0</code>和<code>1</code>组成的字符串，她可以进行最多<code>k</code>次操作。每次操作可以交换相邻的两个字符。目标是通过这些操作，使得最终得到的字符串字典序最小。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>为了获得字典序最小的字符串，我们的目标是尽可能将<code>&#39;0&#39;</code>移向字符串的左侧而把<code>&#39;1&#39;</code>移到字符串的右侧，并且根据字典序的规则，我们应该尽量把<code>&#39;1&#39;</code>和最右边的<code>&#39;0&#39;</code>交换</p><p>具体步骤如下：</p><ol><li><strong>遍历字符串</strong>：从左到右遍历字符串中的每一个字符。</li><li><strong>遇到<code>&#39;0&#39;</code>时尝试和左边的最远的<code>&#39;1&#39;</code>交换</strong>：<ul><li>对于当前位置的<code>&#39;0&#39;</code>，尝试将其向左边移动尽可能多的位置，但移动的步数不能超过剩余的操作次数<code>ops</code>。</li><li>用指针<code>j</code>记录最左边的<code>&#39;1&#39;</code>的位置，并且<code>j</code>具有单调性，因为假设当前的<code>i - j &gt; ops</code>，这意味着本次不能交换，那么当<code>i</code>继续向右移动时,<code>i - j</code>的值只会越来越大，所以<code>j</code>也必须向右继续移动才有可能进行交换。这也意味这<code>j</code>只会从<code>0~n</code>遍历一次，复杂度为$O(n)$</li><li>更新字符串，同时减少相应的操作次数<code>k</code>。</li></ul></li></ol><p>这种方法确保了在每一步操作中，都将当前的<code>&#39;0&#39;</code>尽可能地向左移动，从而整体上达到了字典序最小的目标。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, ops: <span class="hljs-built_in">int</span>, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    s = <span class="hljs-built_in">list</span>(s)<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(j, i):<br>                <span class="hljs-keyword">if</span> s[k] == <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> (i - k) &lt;= ops:<br>                    s[k] = <span class="hljs-string">&#x27;0&#x27;</span><br>                    s[i] = <span class="hljs-string">&#x27;1&#x27;</span><br>                    ops -= (i - k)<br>                    j = k + <span class="hljs-number">1</span>  <span class="hljs-comment"># 更新j的位置</span><br>                    <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(s)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;01010&quot;</span>) == <span class="hljs-string">&#x27;00101&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;1101001&quot;</span>) == <span class="hljs-string">&#x27;0110101&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;1001&quot;</span>) == <span class="hljs-string">&#x27;0101&#x27;</span>)<br></code></pre></td></tr></table></figure><p>复杂度分析<br>时间复杂度：$O(n)$</p><p>空间复杂度：$O(n)$<br>用于存储可变的字符串列表。</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>146字符串首尾相同子序列计数</title>
    <link href="/2024/12/19/146%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A6%96%E5%B0%BE%E7%9B%B8%E5%90%8C%E5%AD%90%E5%BA%8F%E5%88%97%E8%AE%A1%E6%95%B0/"/>
    <url>/2024/12/19/146%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A6%96%E5%B0%BE%E7%9B%B8%E5%90%8C%E5%AD%90%E5%BA%8F%E5%88%97%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>小 M 拿到了一个仅由小写字母组成的字符串，她想知道在这个字符串中，有多少个子序列的首尾字符相同。子序列的定义是：从原字符串中按原顺序取出若干字符（可以不连续）组成的新字符串。</p><p>例如，对于字符串 “arcaea”，其子序列包括 “aca”, “ara”, “aaa” 等，这些子序列的首尾字符都是相同的。</p><p>你需要计算满足这一条件的子序列数量，并输出对 998244353 取模的结果。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p><strong>统计字符出现位置</strong>：<br>使用 <code>defaultdict</code> 来存储每个字符在字符串中出现的所有位置。</p></li><li><p><strong>计算子序列数量</strong>：<br>对于每个字符，考虑其所有可能的首尾位置组合 <code>(i, j)</code>，其中 $i &lt; j$。对于每一对 <code>(i, j)</code>，位于 $i$ 和 $j$ 之间的字符可以选择或不选择，因此有 $2^{j - i - 1}$ 种可能的子序列。</p></li><li><p><strong>累加结果</strong>：<br>将所有符合条件的子序列数量累加，同时加上单个字符的情况（每个字符本身也是一个有效的子序列）。</p></li><li><p><strong>取模处理</strong>：<br>最终结果对 <code>998244353</code> 取模。</p></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    d = defaultdict(<span class="hljs-built_in">list</span>)<br>    <span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>        d[c].append(i)<br>    res = <span class="hljs-number">0</span><br>    mod = <span class="hljs-number">998244353</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> d:<br>        v = d[k]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(v)):<br>                res += <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, v[j] - v[i] - <span class="hljs-number">1</span>, mod)<br>    <span class="hljs-keyword">return</span> (res + <span class="hljs-built_in">len</span>(s)) % mod<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;arcaea&quot;</span>) == <span class="hljs-number">28</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;abcabc&quot;</span>) == <span class="hljs-number">18</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;aaaaa&quot;</span>) == <span class="hljs-number">31</span>)<br></code></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li><strong>时间复杂度</strong>：<code>O(N^2)</code>，其中 <code>N</code> 是字符串的长度。主要消耗在于双重循环遍历每个字符的所有位置组合。</li><li><strong>空间复杂度</strong>：<code>O(N)</code>，用于存储每个字符出现的位置。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>模数应为 <code>998244353</code>，请确保代码中 <code>mod</code> 的值正确。</li><li>由于可能存在大量的子序列，务必在计算中进行取模操作以防止整数溢出。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
