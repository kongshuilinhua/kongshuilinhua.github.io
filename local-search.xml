<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>若依搭建</title>
    <link href="/2025/02/18/%E8%8B%A5%E4%BE%9D%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/02/18/%E8%8B%A5%E4%BE%9D%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1>若依搭建</h1><h2 id="若依版本">若依版本</h2><h3 id="官方">官方</h3><p>若依官方针对不同开发需求提供了多个版本的框架，每个版本都有其独特的特点和适用场景：</p><ul><li><strong>前后端混合版本</strong>：RuoYi 结合了 SpringBoot 和 Bootstrap 的前端开发框架，适合快速构建传统的 Web 应用程序，其中前端和后端代码在同一项目中协同工作。</li><li><strong>前后端分离版本</strong>：RuoYi-Vue 利用 SpringBoot 作为后端开发框架，与 Vue.js 结合，实现了前后端分离的开发模式。这种架构有助于提高开发效率，前后端可以独立开发和部署，更适合现代化的 Web 应用开发。</li><li><strong>微服务版本</strong>：RuoYi-Cloud 基于 Spring Cloud &amp; Alibaba 微服务架构，为构建大型分布式系统提供了完整的解决方案。它支持服务发现、配置管理、负载均衡等微服务特性，适合需要高可扩展性和高可用性的企业级应用。</li><li><strong>移动端版本</strong>：RuoYi-App 采用 Uniapp 进行开发，结合了 Vue.js 的优势，可以实现跨平台的移动端应用开发。一次编写，多端运行的能力使得它成为开发 iOS 和 Android 应用的理想选择。</li></ul><p><img src="assets/image-20240406145452593.png" alt="image-20240406145452593"></p><p>这些版本的框架为开发者提供了多样化的选择，无论是传统的 Web 应用、现代化的前后端分离应用，还是复杂的微服务架构和跨平台的移动端应用，都能找到合适的若依框架版本来满足开发需求。</p><h3 id="非官方">非官方</h3><p>若依框架因其强大的功能和灵活性，吸引了众多第三方开发者基于其核心架构进行扩展和优化，从而形成了丰富的生态系统。</p><p>这些扩展不仅增强了若依框架的功能性，也满足了开发者在不同场景下的具体需求。例如：</p><ul><li>RuoYi-Vue3（前端升级 Vue3 Element Plus Vite）<ul><li><a href="https://github.com/yangzongzhuan/RuoYi-Vue3">https://github.com/yangzongzhuan/RuoYi-Vue3</a></li></ul></li><li>RuoYi-Vue-Plus（后端集成 Mybatis-Plus、Hutool、OSS 存储、分布式锁等组件）<ul><li><a href="https://gitee.com/dromara/RuoYi-Vue-Plus">https://gitee.com/dromara/RuoYi-Vue-Plus</a></li></ul></li></ul><p><img src="assets/image-20240407105246495.png" alt="image-20240407105246495"></p><p>这些扩展版本的推出，使得若依框架能够更好地适应不同规模和类型的项目需求，从小型快速开发到大型企业级应用，都能提供相应的解决方案。开发者可以根据自己的具体需求选择合适的版本进行开发。</p><h2 id="RuoYi-Vue">RuoYi-Vue</h2><p>lRuoYi-Vue 版本，采用了前后端分离的单体架构设计：</p><p>软件环境：JDK、MySQL 、Redis 、Maven、Node</p><p>技术选型：Spring Boot、Spring Security、MyBatis、Jwt、Vue3、Element-Plus</p><p>官方地址：<a href="https://gitee.com/y_project/RuoYi-Vue">https://gitee.com/y_project/RuoYi-Vue</a></p><p>扩展地址：<a href="https://gitee.com/ys-gitee/RuoYi-Vue3">https://gitee.com/ys-gitee/RuoYi-Vue3</a></p><table><thead><tr><th><strong>官方推荐</strong></th><th><strong>课程版本</strong></th></tr></thead><tbody><tr><td>JDK &gt;= 1.8</td><td>JDK 11</td></tr><tr><td>Mysql &gt;= 5.7.0</td><td>MySQL 8</td></tr><tr><td>Redis &gt;= 3.0</td><td>Redis 5（Win）</td></tr><tr><td>Maven &gt;= 3.0</td><td>Maven 3.6</td></tr><tr><td>Node &gt;= 12</td><td>Node 16（Vue3）</td></tr></tbody></table><h2 id="运行后端项目">运行后端项目</h2><h3 id="初始化项目">初始化项目</h3><h4 id="Git-下载">Git 下载</h4><p>通过 idea 克隆若依源码，仓库地址：<a href="https://gitee.com/y_project/RuoYi-Vue.git">https://gitee.com/y_project/RuoYi-Vue.git</a></p><p><img src="assets/image-20240407113034379.png" alt="image-20240407113034379"></p><h4 id="Maven-构建">Maven 构建</h4><p>使用 idea 打开项目后，等待环境检查（主要是 Maven 下载项目依赖）</p><p><img src="assets/image-20240407112841763.png" alt="image-20240407112841763"></p><h3 id="MySQL-相关">MySQL 相关</h3><h4 id="导入-sql">导入 sql</h4><p>1、创建数据库<code>create schema ry-vue;</code></p><p>2、执行下图的 sql 脚本文件，完成导入</p><p><img src="assets/image-20231115113710134.png" alt="image-20231115113710134"></p><p>3、导入后<code>ry-vue</code>库内置 30 张表</p><p><img src="assets/image-20231203211313383.png" alt="image-20231203211313383"></p><h4 id="配置信息">配置信息</h4><p>在<code>ruoyi-admin</code>模块下，编辑<code>resources</code>目录下的<code>application-druid.yml</code>，修改数据库连接</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 数据源配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-comment"># 主库数据源</span><br>      <span class="hljs-attr">master:</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">数据库地址</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">数据库账号</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">数据库密码</span><br></code></pre></td></tr></table></figure><p><img src="assets/image-20240407113858680.png" alt="image-20240407113858680"></p><h3 id="Redis-相关">Redis 相关</h3><h4 id="启动">启动</h4><p>在 redis 解压目录下，执行<code>redis-server.exe redis.windows.conf</code>启动</p><p><img src="assets/image-20240407114209508.png" alt="image-20240407114209508"></p><h4 id="配置信息-2">配置信息</h4><p>在<code>ruoyi-admin</code>模块下，<code>resources</code>目录下的<code>application.yml</code>，可以设置 redis 密码等相关信息</p><p><img src="assets/image-20240407114421363.png" alt="image-20240407114421363"></p><h3 id="项目运行">项目运行</h3><p>在<code>ruoyi-admin</code>模块下，运行<code>com.ruoyi.RuoYiApplication.java</code>，出现如下图表示启动成功</p><p><img src="assets/image-20231115114924549.png" alt="image-20231115114924549"></p><p>后端运行成功可以通过([<a href="http://localhost:8080">http://localhost:8080</a> )访问，但是不会出现静态页面，可以继续参考下面步骤部署前端，然后通过前端地址来访问。</p><p><img src="assets/image-20240407115558123.png" alt="image-20240407115558123"></p><h2 id="运行前端项目">运行前端项目</h2><h3 id="初始化项目-2">初始化项目</h3><p>进入开发目录下，使用 vscode 命令<code>code </code>打开项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">克隆vue3项目</span><br>git clone https://gitee.com/ys-gitee/RuoYi-Vue3.git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过vscode打开项目</span><br>code ./RuoYi-Vue3<br></code></pre></td></tr></table></figure><h3 id="项目运行-2">项目运行</h3><p>在 vscode 终端中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖</span><br>npm install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">建议不要直接使用 cnpm 安装依赖，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题</span><br>npm install --registry=https://registry.npmmirror.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>npm run dev<br></code></pre></td></tr></table></figure><p><img src="assets/image-20240407134921686.png" alt="image-20240407134921686"></p><p>打开浏览器，输入：([<a href="http://localhost:80">http://localhost:80</a>) 默认账户/密码 <code>admin/admin123</code>）若能正确展示登录页面，并能成功登录，菜单及页面展示正常，则表明环境搭建成功</p><p><img src="assets/image-20240407135003607.gif" alt="image-20240407135003607"></p><h1>入门案例</h1><p>在若依项目成功搭建之后，深入了解其代码生成器功能是掌握框架的重要一环。</p><p>接下来，我们将利用若依框架的代码生成器实现 CRM 系统中的<strong>课程管理</strong>功能，这将使我们能够实际体验并掌握如何在项目中有效使用这一工具。</p><h2 id="功能需求">功能需求</h2><blockquote><p>实现 CRM 系统中的课程管理功能，涵盖增加、删除、修改和查询课程信息的完整前后端代码。</p><p>原型地址：<a href="https://app.mockplus.cn/run/prototype/_lwaPYSV9Ue6/byFT7QUzmCqJ/2AadzZnerRIDo?cps=collapse&amp;isShare=true">https://app.mockplus.cn/run/prototype/_lwaPYSV9Ue6/byFT7QUzmCqJ/2AadzZnerRIDo?cps=collapse&amp;isShare=true</a></p></blockquote><p><img src="assets/image-20240407145252756.png" alt="image-20240407145252756"></p><h2 id="步骤分析">步骤分析</h2><p>1、准备课程表结构和数据 sql 文件，导入到数据库中</p><p>2、登录系统（系统工具 -&gt; 代码生成 -&gt; 导入课程表）</p><p>3、代码生成列表中找到课程表（可预览、编辑、同步、删除生成配置）</p><p>4、点击生成代码会得到一个<code>ruoyi.zip</code></p><p>5、执行 sql 文件导入菜单，按照包内目录结构复制到自己的项目中即可</p><h2 id="代码生成">代码生成</h2><h3 id="提供课程表">提供课程表</h3><p>准备课程表结构和数据 sql 文件，导入到数据库中</p><p><img src="assets/image-20240407160249913.png" alt="image-20240407145252756"></p><h3 id="系统导入">系统导入</h3><p>登录系统（系统工具 -&gt; 代码生成 -&gt; 导入课程表）</p><p><img src="assets/image-20240407145252756.gif" alt="image-20240407145252756"></p><h3 id="配置代码">配置代码</h3><p>代码生成列表中找到课程表（可预览、编辑、同步、删除生成配置）</p><img src="assets/image-20240515194239631.png" alt="image-20240515194239631" style="zoom:100%;" /><h3 id="点击生成">点击生成</h3><p>点击生成代码，得到一个<code>ruoyi.zip</code></p><img src="assets/image-20240407171714267.png" alt="image-20240407171714267" style="zoom:65%;" /><p>解压后得到：后端代码、前端代码、菜单 sql</p><img src="assets/image-20240407171214375.png" alt="image-20240407171214375" style="zoom:80%;" /><h2 id="代码导入">代码导入</h2><h3 id="导入课程菜单">导入课程菜单</h3><p>执行 sql 脚本，导入菜单数据</p><p><img src="assets/image-20240407172732924.png" alt="image-20240407172732924"></p><h3 id="导入后端代码">导入后端代码</h3><p>将生成的后端代码和 mappep 文件，导入<code>ruoyi-admin</code>模块中</p><p><img src="assets/image-20240515194048039.png" alt="image-20240515194048039"></p><blockquote><p>注意：如果导入后的代码重启后没生效，可以通过 maven 先 clean 再启动</p></blockquote><h3 id="导入前端代码">导入前端代码</h3><p>将生成的前端代码，导入<code>ruoyi-ui</code>模块中</p><p><img src="assets/image-20240515194033701.png" alt="image-20240515194033701"></p><h2 id="访问测试">访问测试</h2><p>代码生成器默认生成的<strong>课程管理</strong>模块在<strong>系统工具</strong>菜单下，打开测试 CRUD 功能</p><p><img src="assets/image-20240515194309391.png" alt="image-20240515194309391"></p><h1>功能详解</h1><p>我们将对若依的通用功能进行详解。本章内容分为三个重点部分：</p><h2 id="系统管理">系统管理</h2><h3 id="权限系统">权限系统</h3><h4 id="演示">演示</h4><p>若依提供了企业级通用权限系统，我们这里拿 CRM 系统先给大家演示下：</p><p>地址：<a href="https://huike-crm.itheima.net/">https://huike-crm.itheima.net/</a></p><ul><li><p>demo 账号（超级管理员），可以查看所有功能菜单</p></li><li><p>zhangsan 账号（市场专员），可以查看线索管理菜单</p></li><li><p>yueyue 账号（销售专员），可以查看商机、合同等菜单</p></li></ul><p><img src="assets/image-20240515194350937.png" alt="image-20240515194350937"></p><h4 id="RBAC">RBAC</h4><p>lRBAC（基于角色的访问控制）是一种广泛使用的访问控制模型，通过角色来分配和管理用户的菜单权限。</p><p><img src="assets/image-20240515194432239.png" alt="image-20240515194432239"></p><h4 id="表关系">表关系</h4><p><img src="assets/image-20240515194525518.png" alt="image-20240515194525518"></p><p><img src="assets/image-20240515194550233.png" alt="image-20240515194550233"></p><h4 id="案例">案例</h4><p>创建新用户小智并关联课研人员角色，仅限课程管理和统计分析菜单访问。</p><p><img src="assets/image-20240515211530662.png" alt="image-20240515211530662"></p><p>实现步骤：</p><p>① 创建菜单</p><p>② 创建角色，并分配权限</p><p>③ 创建用户，并关联角色</p><p><img src="assets/image-20240515194805143.png" alt="image-20240515194805143"></p><h3 id="数据字典">数据字典</h3><h4 id="介绍">介绍</h4><p>若依内置的数据字典，用于维护系统中常见的静态数据。例如：性别、状态…</p><p><img src="assets/image-20240515194849692.png" alt="image-20240515194849692"></p><p>功能包括：字典类型管理、字典数据管理</p><p><img src="assets/image-20240515194953367.png" alt="image-20240515194953367"></p><h4 id="表关系-2">表关系</h4><p><img src="assets/image-20240515195031748.png" alt="image-20240515195031748"></p><h4 id="案例-2">案例</h4><p>将课程管理的学科字段改为数据字典维护。</p><p><img src="assets/image-20240515211609621.png" alt="image-20240515211609621"></p><p>实现步骤：</p><p>① 添加字典类型和数据</p><p><img src="assets/image-20240515195114801.png" alt="image-20240515195114801"></p><p>② 修改代码生成信息</p><p><img src="assets/image-20240515195134472.png" alt="image-20240515195134472"></p><p>③ 下载代码，导入前端</p><p><img src="assets/image-20240515195146589.png" alt="image-20240515195146589"></p><h3 id="参数设置">参数设置</h3><p>参数设置：对系统中的参数进行动态维护。</p><p><img src="assets/image-20240515195404229.png" alt="image-20240515195404229"></p><p>关闭登录验证码</p><p><img src="assets/image-20240515195419521.png" alt="image-20240515195419521"></p><h3 id="通知公告">通知公告</h3><p>RuoYi 的通知公告功能提供了一个方便的方式来发布和管理通知、公告和新闻等信息。管理员可以创建、编辑和删除通知（支持富文本编辑和附件上传）。</p><p>系统将信息发送给指定的用户、部门或角色。用户可以通过系统界面或电子邮件接收通知，从而确保信息及时传达（这部分需要自己开发）。</p><p>通知公告功能有助于组织内部沟通和信息传递，提高了工作效率和信息共享。</p><p><img src="assets/image-20240515195457616.png" alt="image-20240515195457616"></p><h3 id="日志管理">日志管理</h3><p>登录日志</p><ul><li>记录用户的登录信息，包括登录时间和地点（IP 地址）。</li><li>帮助管理员监控登录行为，及时发现任何可疑的登录尝试。</li><li>同样提供搜索和筛选功能，方便查找特定用户的登录历史。</li></ul><img src="assets/image-20240515195520979.png" alt="image-20240515195520979" style="zoom:90%;" /><p>操作日志</p><ul><li>记录用户在系统中的所有操作，如查看、修改数据等。</li><li>帮助管理员检查谁做了什么，以及何时做的，确保数据准确无误。</li><li>可以快速搜索和找到特定的操作记录，便于管理和审查。</li></ul><img src="assets/image-20240515195525287.png" alt="image-20240515195525287" style="zoom:80%;" /><h2 id="系统监控">系统监控</h2><h3 id="监控相关">监控相关</h3><p>若依提供了一些列强大的监控工具，能够帮助开发者和运维快速了解应用程序的性能状态。</p><p><img src="assets/image-20240515195822097.png" alt="image-20240515195822097"></p><ol><li><strong>在线用户</strong>：<ul><li>管理员可以看到当前谁在系统里，他们什么时候登录的，从哪里登录的，属于哪个部门。</li><li>如果有人没权限还赖着不走，管理员可以一键让他们下线，保证系统的安全。</li></ul></li><li><strong>数据监控</strong>：<ul><li>管理员可以实时看到系统的各项指标，比如资源使用情况，数据库状态等。</li><li>通过图表可以直观地看出系统是否健康，如果出现问题，系统会发出警报。</li></ul></li><li><strong>服务监控</strong>：<ul><li>管理员可以监控系统中各个服务是否正常运行，以及它们的性能指标。</li><li>如果服务出现问题，系统会立即通知管理员，并通过仪表板展示，方便管理员快速了解情况。</li></ul></li><li><strong>缓存监控</strong>：<ul><li>管理员可以监控系统的缓存使用情况，比如缓存是否经常被用到，缓存的大小等。</li><li>系统还可以自动清理缓存，保持数据的新鲜度，如果缓存有问题，也会发出警报。</li></ul></li></ol><h3 id="定时任务">定时任务</h3><h4 id="介绍-2">介绍</h4><p>若依为定时任务功能提供方便友好的 web 界面，实现动态管理任务。</p><p><img src="assets/image-20240515195859181.png" alt="image-20240515195859181"></p><h4 id="案例-3">案例</h4><p>每间隔 5 秒，控制台输出系统时间。</p><p><img src="assets/image-20240515212217472.png" alt="image-20240515212217472"></p><p>实现步骤：</p><p>① 创建任务类<br><img src="assets/image-20240515200554019.png" alt="image-20240515200554019"></p><p>② 添加任务规则</p><p><img src="assets/image-20240515200608310.png" alt="image-20240515200608310"></p><ul><li>任务名称：自定义，如：定时查询任务状态</li><li>任务分组：根据字典<code>sys_job_group</code>配置，可自行进行配置</li><li>调用目标字符串：设置后台任务方法名称参数</li><li>执行表达式：可查询官方<code>cron</code>表达式介绍</li><li>执行策略：定时任务自定义执行策略</li><li>并发执行：是否需要多个任务间同时执行</li></ul><p>③ 启动任务</p><p><img src="assets/image-20240515212230091.png" alt="image-20240515212230091"></p><h2 id="系统工具">系统工具</h2><h3 id="表单构建">表单构建</h3><h4 id="介绍-3">介绍</h4><ul><li>允许用户通过拖放等可视化操作创建表单，比如用来收集数据的表格或调查问卷。</li><li>可以自定义表单的各个部分，比如添加不同的输入项和设置验证规则，无需编写代码。</li><li>提供了导出数据、导入数据、分享表单和设置权限的功能，方便数据管理和共享。</li></ul><p><img src="assets/image-20240515201246417.png" alt="image-20240515201246417"></p><h4 id="案例-4">案例</h4><p>通过表单构建工具，单独制作一个添加课程的表单页面。</p><p><img src="assets/image-20240515212304226.png" alt="image-20240515212304226"></p><p>实现步骤：</p><p>① 制作表单并导出<br><img src="assets/image-20240515201358208.png" alt="image-20240515201358208"></p><p>② 复制到前端工程<br><img src="assets/image-20240515201427300.png" alt="image-20240515201427300"></p><p>③ 创建动态菜单</p><p><img src="assets/image-20240515201440877.png" alt="image-20240515201440877"></p><h3 id="代码生成-2">代码生成</h3><ul><li>自动化工具，可以快速生成项目中常用的代码，如数据库操作类、后端控制器、前端页面等。</li><li>支持根据数据库的表结构反向生成代码，减少手动编写的工作量。</li><li>提供三种生成模板：单表、 <span style='color:red'>树表</span>、主子表（一对多），可以生成适用于 Spring Boot、MyBatis 等流行框架的代码，提高开发效率和代码质量。</li><li>树表是一种展示层级数据的表格，能展开折叠，清晰呈现父子关系，便于管理。</li></ul><p><img src="assets/image-20240515201619313.png" alt="image-20240515201619313"></p><p>代码生成配置主表实现细节：</p><p><img src="assets/image-20240515201640870.png" alt="image-20240515201640870"></p><h3 id="系统接口">系统接口</h3><ul><li>Swagger，能够自动生成 API 的同步在线文档，并提供 Web 界面进行接口调用和测试。</li></ul><p><img src="assets/image-20240515201705896.png" alt="image-20240515201705896"></p><h1>项目结构</h1><p>在功能的讲解过程中，涉及的前后端项目的结构和配置文件，我们还比较陌生，为了更好的使用若依进行项目开发，所以接下来，我们开始进入项目结构这部分内容的学习</p><h2 id="后端结构">后端结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">com.ruoyi<br>├── ruoyi-admin      <span class="hljs-comment">// 后台服务模块</span><br>│       └── web                           <span class="hljs-comment">// 内置功能的表现层</span><br>│       └── RuoYiApplication              <span class="hljs-comment">// 若依项目启动类</span><br>├── ruoyi-common     <span class="hljs-comment">// 通用工具模块</span><br>│       └── annotation                    <span class="hljs-comment">// 自定义注解</span><br>│       └── config                        <span class="hljs-comment">// 全局配置</span><br>│       └── constant                      <span class="hljs-comment">// 通用常量</span><br>│       └── core                          <span class="hljs-comment">// 核心控制</span><br>│       └── enums                         <span class="hljs-comment">// 通用枚举</span><br>│       └── exception                     <span class="hljs-comment">// 通用异常</span><br>│       └── filter                        <span class="hljs-comment">// 过滤器处理</span><br>│       └── utils                         <span class="hljs-comment">// 通用类处理</span><br>│       └── xss                           <span class="hljs-comment">// 自定义xss校验</span><br>├── ruoyi-framework  <span class="hljs-comment">// 框架核心模块</span><br>│       └── aspectj                       <span class="hljs-comment">// AOP配置</span><br>│       └── config                        <span class="hljs-comment">// 系统配置</span><br>│       └── datasource                    <span class="hljs-comment">// 多数据源配置</span><br>│       └── interceptor                   <span class="hljs-comment">// 拦截器</span><br>│       └── manager                       <span class="hljs-comment">// 异步处理</span><br>│       └── security                      <span class="hljs-comment">// 权限控制</span><br>│       └── web                           <span class="hljs-comment">// 前端控制</span><br>├── ruoyi-generator  <span class="hljs-comment">// 代码生成模块（可移除）</span><br>├── ruoyi-quartz     <span class="hljs-comment">// 定时任务模块（可移除）</span><br>├── ruoyi-system     <span class="hljs-comment">// 系统代码模块</span><br>│       └── domain                        <span class="hljs-comment">// 系统代码的实体类</span><br>│       └── mapper                        <span class="hljs-comment">// 系统代码的持久层</span><br>│       └── service                       <span class="hljs-comment">// 系统代码的业务层</span><br></code></pre></td></tr></table></figure><p><img src="assets/image-20240515202429752.png" alt="image-20240515202429752"></p><h2 id="项目中配置">项目中配置</h2><p>项目中的配置文件都在 ruoyi-admin 模块下，如下图：</p><p><img src="assets/image-20240515202447038.png" alt="image-20240515202447038"></p><ul><li>i18n：国际化处理</li><li>META-INF：存储了项目的元信息（<em>描述数据的数据</em>），无需修改</li><li>mybatis：mybatis 相关的配置信息</li><li>application.yml：项目中的核心配置</li><li>application-druid.yml：数据库连接配置</li><li>banner.txt：默认的 banner 图标信息，项目启动，控制台打印显示</li><li>logback.xml：日志配置</li></ul><p>最主要的两个配置文件：application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 项目相关配置</span><br><span class="hljs-attr">ruoyi:</span><br>  <span class="hljs-comment"># 名称</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">RuoYi</span><br>  <span class="hljs-comment"># 版本</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">3.8</span><span class="hljs-number">.7</span><br>  <span class="hljs-comment"># 版权年份</span><br>  <span class="hljs-attr">copyrightYear:</span> <span class="hljs-number">2024</span><br>  <span class="hljs-comment"># 文件路径 示例（ Windows配置D:/ruoyi/uploadPath，Linux配置 /home/ruoyi/uploadPath）</span><br>  <span class="hljs-attr">profile:</span> <span class="hljs-string">D:/ruoyi/uploadPath</span><br>  <span class="hljs-comment"># 获取ip地址开关</span><br>  <span class="hljs-attr">addressEnabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 验证码类型 math 数字计算 char 字符验证</span><br>  <span class="hljs-attr">captchaType:</span> <span class="hljs-string">math</span><br><br><span class="hljs-comment"># 开发环境配置</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-comment"># 服务器的HTTP端口，默认为8080</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-comment"># 应用的访问路径</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-comment"># tomcat的URI编码</span><br>    <span class="hljs-attr">uri-encoding:</span> <span class="hljs-string">UTF-8</span><br>    <span class="hljs-comment"># 连接数满后的排队数，默认为100</span><br>    <span class="hljs-attr">accept-count:</span> <span class="hljs-number">1000</span><br>    <span class="hljs-attr">threads:</span><br>      <span class="hljs-comment"># tomcat最大线程数，默认为200</span><br>      <span class="hljs-attr">max:</span> <span class="hljs-number">800</span><br>      <span class="hljs-comment"># Tomcat启动初始化的线程数，默认值10</span><br>      <span class="hljs-attr">min-spare:</span> <span class="hljs-number">100</span><br><br><span class="hljs-comment"># 日志配置</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.ruoyi:</span> <span class="hljs-string">debug</span><br>    <span class="hljs-attr">org.springframework:</span> <span class="hljs-string">warn</span><br><br><span class="hljs-comment"># 用户配置</span><br><span class="hljs-attr">user:</span><br>  <span class="hljs-attr">password:</span><br>    <span class="hljs-comment"># 密码最大错误次数</span><br>    <span class="hljs-attr">maxRetryCount:</span> <span class="hljs-number">5</span><br>    <span class="hljs-comment"># 密码锁定时间（默认10分钟）</span><br>    <span class="hljs-attr">lockTime:</span> <span class="hljs-number">10</span><br><br><span class="hljs-comment"># Spring配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># 资源信息</span><br>  <span class="hljs-attr">messages:</span><br>    <span class="hljs-comment"># 国际化资源文件路径</span><br>    <span class="hljs-attr">basename:</span> <span class="hljs-string">i18n/messages</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">druid</span><br>  <span class="hljs-comment"># 文件上传</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-comment"># 单个文件大小</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">10MB</span><br>      <span class="hljs-comment"># 设置总上传的文件大小</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">20MB</span><br>  <span class="hljs-comment"># 服务模块</span><br>  <span class="hljs-attr">devtools:</span><br>    <span class="hljs-attr">restart:</span><br>      <span class="hljs-comment"># 热部署开关</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># redis 配置</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-comment"># 地址</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-comment"># 端口，默认为6379</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-comment"># 数据库索引</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 密码</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-comment"># 连接超时时间</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-string">10s</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-comment"># 连接池中的最小空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 连接池中的最大空闲连接</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment"># 连接池的最大数据库连接数</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment"># #连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">-1ms</span><br><br><span class="hljs-comment"># token配置</span><br><span class="hljs-attr">token:</span><br>  <span class="hljs-comment"># 令牌自定义标识</span><br>  <span class="hljs-attr">header:</span> <span class="hljs-string">Authorization</span><br>  <span class="hljs-comment"># 令牌密钥</span><br>  <span class="hljs-attr">secret:</span> <span class="hljs-string">abcdefghijklmnopqrstuvwxyz</span><br>  <span class="hljs-comment"># 令牌有效期（默认30分钟）</span><br>  <span class="hljs-attr">expireTime:</span> <span class="hljs-number">30</span><br><br><span class="hljs-comment"># MyBatis配置</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-comment"># 搜索指定包别名</span><br>  <span class="hljs-attr">typeAliasesPackage:</span> <span class="hljs-string">com.ruoyi.**.domain</span><br>  <span class="hljs-comment"># 配置mapper的扫描，找到所有的mapper.xml映射文件</span><br>  <span class="hljs-attr">mapperLocations:</span> <span class="hljs-string">classpath*:mapper/**/*Mapper.xml</span><br>  <span class="hljs-comment"># 加载全局的配置文件</span><br>  <span class="hljs-attr">configLocation:</span> <span class="hljs-string">classpath:mybatis/mybatis-config.xml</span><br><br><span class="hljs-comment"># PageHelper分页插件</span><br><span class="hljs-attr">pagehelper:</span><br>  <span class="hljs-attr">helperDialect:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">supportMethodsArguments:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">params:</span> <span class="hljs-string">count=countSql</span><br><br><span class="hljs-comment"># Swagger配置</span><br><span class="hljs-attr">swagger:</span><br>  <span class="hljs-comment"># 是否开启swagger</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 请求前缀</span><br>  <span class="hljs-attr">pathMapping:</span> <span class="hljs-string">/dev-api</span><br><br><span class="hljs-comment"># 防止XSS攻击</span><br><span class="hljs-attr">xss:</span><br>  <span class="hljs-comment"># 过滤开关</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 排除链接（多个用逗号分隔）</span><br>  <span class="hljs-attr">excludes:</span> <span class="hljs-string">/system/notice</span><br>  <span class="hljs-comment"># 匹配链接</span><br>  <span class="hljs-attr">urlPatterns:</span> <span class="hljs-string">/system/*,/monitor/*,/tool/*</span><br></code></pre></td></tr></table></figure><h2 id="模块依赖关系">模块依赖关系</h2><p>各个模块之间的依赖关系：</p><p><img src="assets/image-20240515202002135.png" alt="image-20240515202002135"></p><h2 id="前端结构">前端结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">ruoyi-vue3<br>├── bin                        <span class="hljs-comment">// 执行脚本</span><br>├── html                       <span class="hljs-comment">// IE低版本提示页</span><br>├── node_modules               <span class="hljs-comment">// 第三方依赖库</span><br>├── public                     <span class="hljs-comment">// 公共资源</span><br>│   ├── favicon.<span class="hljs-property">ico</span>            <span class="hljs-comment">// favicon图标</span><br>├── src                        <span class="hljs-comment">// 源代码</span><br>│   ├── api                    <span class="hljs-comment">// 所有请求</span><br>│   ├── assets                 <span class="hljs-comment">// 静态资源</span><br>│   ├── components             <span class="hljs-comment">// 全局公用组件</span><br>│   ├── directive              <span class="hljs-comment">// 全局指令</span><br>│   ├── layout                 <span class="hljs-comment">// 布局</span><br>│   ├── plugins                <span class="hljs-comment">// 通用插件</span><br>│   ├── router                 <span class="hljs-comment">// 路由配置</span><br>│   ├── store                  <span class="hljs-comment">// 状态管理</span><br>│   ├── utils                  <span class="hljs-comment">// 全局公用方法</span><br>│   ├── views                  <span class="hljs-comment">// 视图组件</span><br>│   ├── <span class="hljs-title class_">App</span>.<span class="hljs-property">vue</span>                <span class="hljs-comment">// 入口组件</span><br>│   ├── main.<span class="hljs-property">js</span>                <span class="hljs-comment">// 入口文件</span><br>│   ├── permission.<span class="hljs-property">js</span>          <span class="hljs-comment">// 权限管理</span><br>│   └── settings.<span class="hljs-property">js</span>            <span class="hljs-comment">// 系统配置</span><br>├── vite                       <span class="hljs-comment">// 构建工具</span><br>├── .<span class="hljs-property">env</span>.<span class="hljs-property">development</span>           <span class="hljs-comment">// 开发环境配置</span><br>├── .<span class="hljs-property">env</span>.<span class="hljs-property">production</span>            <span class="hljs-comment">// 生产环境配置</span><br>├── .<span class="hljs-property">env</span>.<span class="hljs-property">staging</span>               <span class="hljs-comment">// 测试环境配置</span><br>├── .<span class="hljs-property">gitignore</span>                 <span class="hljs-comment">// git 忽略项</span><br>├── index.<span class="hljs-property">html</span>                 <span class="hljs-comment">// 入口页面</span><br>├── package.<span class="hljs-property">json</span>               <span class="hljs-comment">// 项目配置文件（相当于pom.xml）</span><br>└── vue.<span class="hljs-property">config</span>.<span class="hljs-property">js</span>              <span class="hljs-comment">// Vue项目的配置信息（相当于application.yml）</span><br></code></pre></td></tr></table></figure><p><img src="assets/image-20240515202411640.png" alt="image-20240515202411640"></p><h2 id="表结构介绍">表结构介绍</h2><p><code>ruoyi-vue</code>数据库设计包含了多个表结构，用于支持系统的各种功能模块。</p><p>这些表可以根据它们的功能和用途进行分类，以便在后期使用时能够快速定位和理解。以下是对这些表结构的分类和简要说明：</p><p><img src="assets/image-20240515202517972.png" alt="image-20240515202517972"></p><p><img src="assets/ruoyi-vue.png" alt="ruoyi-vue"></p><h1>源码阅读</h1><p>本章我们将围绕入门案例生成的课程管理进行讲解，包含前后端代码的分析，以及前后端代码交互的流程，通过这部分的学习，不仅能让我们掌握若依的基础业务逻辑，在此基础上还能为我们日后的定制开发提供强有力的支撑。</p><h2 id="前端代码分析">前端代码分析</h2><p>找到 src/views/course/course/index.vue 文件，护理项目的前端代码已经添加了详细的注释，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;!-- 搜索表单 start --&gt;<br>    &lt;el-form<br>      :model=&quot;queryParams&quot;<br>      ref=&quot;queryRef&quot;<br>      :inline=&quot;true&quot;<br>      v-show=&quot;showSearch&quot;<br>      label-width=&quot;68px&quot;<br>    &gt;<br>      &lt;el-form-item label=&quot;课程编码&quot; prop=&quot;code&quot;&gt;<br>        &lt;el-input<br>          v-model=&quot;queryParams.code&quot;<br>          placeholder=&quot;请输入课程编码&quot;<br>          clearable<br>          @keyup.enter=&quot;handleQuery&quot;<br>        /&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-form-item label=&quot;课程学科&quot; prop=&quot;subject&quot;&gt;<br>        &lt;el-select<br>          v-model=&quot;queryParams.subject&quot;<br>          placeholder=&quot;请选择课程学科&quot;<br>          clearable<br>        &gt;<br>          &lt;el-option<br>            v-for=&quot;dict in course_subject&quot;<br>            :key=&quot;dict.value&quot;<br>            :label=&quot;dict.label&quot;<br>            :value=&quot;dict.value&quot;<br>          /&gt;<br>        &lt;/el-select&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-form-item label=&quot;课程名称&quot; prop=&quot;name&quot;&gt;<br>        &lt;el-input<br>          v-model=&quot;queryParams.name&quot;<br>          placeholder=&quot;请输入课程名称&quot;<br>          clearable<br>          @keyup.enter=&quot;handleQuery&quot;<br>        /&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-form-item label=&quot;适用人群&quot; prop=&quot;applicablePerson&quot;&gt;<br>        &lt;el-input<br>          v-model=&quot;queryParams.applicablePerson&quot;<br>          placeholder=&quot;请输入适用人群&quot;<br>          clearable<br>          @keyup.enter=&quot;handleQuery&quot;<br>        /&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-form-item&gt;<br>        &lt;el-button type=&quot;primary&quot; icon=&quot;Search&quot; @click=&quot;handleQuery&quot;<br>          &gt;搜索&lt;/el-button<br>        &gt;<br>        &lt;el-button icon=&quot;Refresh&quot; @click=&quot;resetQuery&quot;&gt;重置&lt;/el-button&gt;<br>      &lt;/el-form-item&gt;<br>    &lt;/el-form&gt;<br>    &lt;!-- 搜索表单 end --&gt;<br><br>    &lt;!-- 按钮区域 start --&gt;<br>    &lt;el-row :gutter=&quot;10&quot; class=&quot;mb8&quot;&gt;<br>      &lt;el-col :span=&quot;1.5&quot;&gt;<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          plain<br>          icon=&quot;Plus&quot;<br>          @click=&quot;handleAdd&quot;<br>          v-hasPermi=&quot;[&#x27;course:course:add&#x27;]&quot;<br>          &gt;新增&lt;/el-button<br>        &gt;<br>      &lt;/el-col&gt;<br>      &lt;el-col :span=&quot;1.5&quot;&gt;<br>        &lt;el-button<br>          type=&quot;success&quot;<br>          plain<br>          icon=&quot;Edit&quot;<br>          :disabled=&quot;single&quot;<br>          @click=&quot;handleUpdate&quot;<br>          v-hasPermi=&quot;[&#x27;course:course:edit&#x27;]&quot;<br>          &gt;修改&lt;/el-button<br>        &gt;<br>      &lt;/el-col&gt;<br>      &lt;el-col :span=&quot;1.5&quot;&gt;<br>        &lt;el-button<br>          type=&quot;danger&quot;<br>          plain<br>          icon=&quot;Delete&quot;<br>          :disabled=&quot;multiple&quot;<br>          @click=&quot;handleDelete&quot;<br>          v-hasPermi=&quot;[&#x27;course:course:remove&#x27;]&quot;<br>          &gt;删除&lt;/el-button<br>        &gt;<br>      &lt;/el-col&gt;<br>      &lt;el-col :span=&quot;1.5&quot;&gt;<br>        &lt;el-button<br>          type=&quot;warning&quot;<br>          plain<br>          icon=&quot;Download&quot;<br>          @click=&quot;handleExport&quot;<br>          v-hasPermi=&quot;[&#x27;course:course:export&#x27;]&quot;<br>          &gt;导出&lt;/el-button<br>        &gt;<br>      &lt;/el-col&gt;<br>      &lt;right-toolbar<br>        v-model:showSearch=&quot;showSearch&quot;<br>        @queryTable=&quot;getList&quot;<br>      &gt;&lt;/right-toolbar&gt;<br>    &lt;/el-row&gt;<br>    &lt;!-- 按钮区域end --&gt;<br><br>    &lt;!-- 数据展示表格 start --&gt;<br>    &lt;el-table<br>      v-loading=&quot;loading&quot;<br>      :data=&quot;courseList&quot;<br>      @selection-change=&quot;handleSelectionChange&quot;<br>    &gt;<br>      &lt;el-table-column type=&quot;selection&quot; width=&quot;55&quot; align=&quot;center&quot; /&gt;<br>      &lt;el-table-column label=&quot;课程id&quot; align=&quot;center&quot; prop=&quot;id&quot; /&gt;<br>      &lt;el-table-column label=&quot;课程编码&quot; align=&quot;center&quot; prop=&quot;code&quot; /&gt;<br>      &lt;el-table-column label=&quot;课程学科&quot; align=&quot;center&quot; prop=&quot;subject&quot;&gt;<br>        &lt;template #default=&quot;scope&quot;&gt;<br>          &lt;dict-tag :options=&quot;course_subject&quot; :value=&quot;scope.row.subject&quot; /&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;课程名称&quot; align=&quot;center&quot; prop=&quot;name&quot; /&gt;<br>      &lt;el-table-column label=&quot;价格&quot; align=&quot;center&quot; prop=&quot;price&quot; /&gt;<br>      &lt;el-table-column<br>        label=&quot;适用人群&quot;<br>        align=&quot;center&quot;<br>        prop=&quot;applicablePerson&quot;<br>      /&gt;<br>      &lt;el-table-column label=&quot;课程介绍&quot; align=&quot;center&quot; prop=&quot;info&quot; /&gt;<br>      &lt;el-table-column<br>        label=&quot;操作&quot;<br>        align=&quot;center&quot;<br>        class-name=&quot;small-padding fixed-width&quot;<br>      &gt;<br>        &lt;template #default=&quot;scope&quot;&gt;<br>          &lt;el-button<br>            link<br>            type=&quot;primary&quot;<br>            icon=&quot;Edit&quot;<br>            @click=&quot;handleUpdate(scope.row)&quot;<br>            v-hasPermi=&quot;[&#x27;course:course:edit&#x27;]&quot;<br>            &gt;修改&lt;/el-button<br>          &gt;<br>          &lt;el-button<br>            link<br>            type=&quot;primary&quot;<br>            icon=&quot;Delete&quot;<br>            @click=&quot;handleDelete(scope.row)&quot;<br>            v-hasPermi=&quot;[&#x27;course:course:remove&#x27;]&quot;<br>            &gt;删除&lt;/el-button<br>          &gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br>    &lt;!-- 数据展示表格 end --&gt;<br><br>    &lt;!-- 分页区域 start --&gt;<br>    &lt;pagination<br>      v-show=&quot;total &gt; 0&quot;<br>      :total=&quot;total&quot;<br>      v-model:page=&quot;queryParams.pageNum&quot;<br>      v-model:limit=&quot;queryParams.pageSize&quot;<br>      @pagination=&quot;getList&quot;<br>    /&gt;<br>    &lt;!-- 分页区域 end --&gt;<br><br>    &lt;!-- 添加或修改课程管理对话框 --&gt;<br>    &lt;el-dialog :title=&quot;title&quot; v-model=&quot;open&quot; width=&quot;500px&quot; append-to-body&gt;<br>      &lt;el-form ref=&quot;courseRef&quot; :model=&quot;form&quot; :rules=&quot;rules&quot; label-width=&quot;80px&quot;&gt;<br>        &lt;el-form-item label=&quot;课程编码&quot; prop=&quot;code&quot;&gt;<br>          &lt;el-input v-model=&quot;form.code&quot; placeholder=&quot;请输入课程编码&quot; /&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;课程学科&quot; prop=&quot;subject&quot;&gt;<br>          &lt;el-select v-model=&quot;form.subject&quot; placeholder=&quot;请选择课程学科&quot;&gt;<br>            &lt;el-option<br>              v-for=&quot;dict in course_subject&quot;<br>              :key=&quot;dict.value&quot;<br>              :label=&quot;dict.label&quot;<br>              :value=&quot;dict.value&quot;<br>            &gt;&lt;/el-option&gt;<br>          &lt;/el-select&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;课程名称&quot; prop=&quot;name&quot;&gt;<br>          &lt;el-input v-model=&quot;form.name&quot; placeholder=&quot;请输入课程名称&quot; /&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;价格&quot; prop=&quot;price&quot;&gt;<br>          &lt;el-input v-model=&quot;form.price&quot; placeholder=&quot;请输入价格&quot; /&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;适用人群&quot; prop=&quot;applicablePerson&quot;&gt;<br>          &lt;el-input<br>            v-model=&quot;form.applicablePerson&quot;<br>            placeholder=&quot;请输入适用人群&quot;<br>          /&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;课程介绍&quot; prop=&quot;info&quot;&gt;<br>          &lt;el-input v-model=&quot;form.info&quot; placeholder=&quot;请输入课程介绍&quot; /&gt;<br>        &lt;/el-form-item&gt;<br>      &lt;/el-form&gt;<br>      &lt;template #footer&gt;<br>        &lt;div class=&quot;dialog-footer&quot;&gt;<br>          &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm&quot;&gt;确 定&lt;/el-button&gt;<br>          &lt;el-button @click=&quot;cancel&quot;&gt;取 消&lt;/el-button&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br>    &lt;/el-dialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup name=&quot;Course&quot;&gt;<br>// 引入后端api接口<br>import &#123;<br>  listCourse,<br>  getCourse,<br>  delCourse,<br>  addCourse,<br>  updateCourse,<br>&#125; from &quot;@/api/course/course&quot;;<br>// 获取当前实例代理对象，用于访问组件数据、方法<br>const &#123; proxy &#125; = getCurrentInstance();<br>// 获取课程学科的数据字典<br>const &#123; course_subject &#125; = proxy.useDict(&quot;course_subject&quot;);<br>// 列表数据<br>const courseList = ref([]);<br>// 是否显示弹框<br>const open = ref(false);<br>// 是否显示加载状态<br>const loading = ref(true);<br>// 是否显示搜索栏<br>const showSearch = ref(true);<br>// 复选框，被选中id的数组<br>const ids = ref([]);<br>// 复选框，是否单选，用于高亮修改、删除按钮<br>const single = ref(true);<br>// 复选框，是否多选，仅高亮删除按钮<br>const multiple = ref(true);<br>// 总（记录）条数<br>const total = ref(0);<br>// 用于区分新增、修改对话框标题<br>const title = ref(&quot;&quot;);<br>// 定义reactive响应式对象<br>const data = reactive(&#123;<br>  // 新增或修改表单数据<br>  form: &#123;&#125;,<br>  // 搜索条件参数<br>  queryParams: &#123;<br>    pageNum: 1,<br>    pageSize: 10,<br>    code: null,<br>    subject: null,<br>    name: null,<br>    applicablePerson: null,<br>  &#125;,<br>  // 表单校验规则<br>  rules: &#123;<br>    code: [&#123; required: true, message: &quot;课程编码不能为空&quot;, trigger: &quot;blur&quot; &#125;],<br>    subject: [<br>      &#123; required: true, message: &quot;课程学科不能为空&quot;, trigger: &quot;change&quot; &#125;,<br>    ],<br>    name: [&#123; required: true, message: &quot;课程名称不能为空&quot;, trigger: &quot;blur&quot; &#125;],<br>    price: [&#123; required: true, message: &quot;价格不能为空&quot;, trigger: &quot;blur&quot; &#125;],<br>    applicablePerson: [<br>      &#123; required: true, message: &quot;适用人群不能为空&quot;, trigger: &quot;blur&quot; &#125;,<br>    ],<br>    info: [&#123; required: true, message: &quot;课程介绍不能为空&quot;, trigger: &quot;blur&quot; &#125;],<br>  &#125;,<br>&#125;);<br>// 将data对象的三个属性，转换为ref响应式对象<br>const &#123; queryParams, form, rules &#125; = toRefs(data);<br><br>/** 查询课程管理列表 */<br>function getList() &#123;<br>  loading.value = true;<br>  listCourse(queryParams.value).then((response) =&gt; &#123;<br>    courseList.value = response.rows;<br>    total.value = response.total;<br>    loading.value = false;<br>  &#125;);<br>&#125;<br><br>// 取消按钮<br>function cancel() &#123;<br>  open.value = false;<br>  reset();<br>&#125;<br><br>// 表单重置<br>function reset() &#123;<br>  form.value = &#123;<br>    id: null,<br>    code: null,<br>    subject: null,<br>    name: null,<br>    price: null,<br>    applicablePerson: null,<br>    info: null,<br>    createTime: null,<br>    updateTime: null,<br>  &#125;;<br>  proxy.resetForm(&quot;courseRef&quot;);<br>&#125;<br><br>/** 搜索按钮操作 */<br>function handleQuery() &#123;<br>  queryParams.value.pageNum = 1;<br>  getList();<br>&#125;<br><br>/** 重置按钮操作 */<br>function resetQuery() &#123;<br>  proxy.resetForm(&quot;queryRef&quot;);<br>  handleQuery();<br>&#125;<br><br>// 多选框选中数据<br>function handleSelectionChange(selection) &#123;<br>  ids.value = selection.map((item) =&gt; item.id);<br>  single.value = selection.length != 1;<br>  multiple.value = !selection.length;<br>&#125;<br><br>/** 新增按钮操作 */<br>function handleAdd() &#123;<br>  reset();<br>  open.value = true;<br>  title.value = &quot;添加课程管理&quot;;<br>&#125;<br><br>/** 修改按钮操作 */<br>function handleUpdate(row) &#123;<br>  reset();<br>  const _id = row.id || ids.value;<br>  getCourse(_id).then((response) =&gt; &#123;<br>    form.value = response.data;<br>    open.value = true;<br>    title.value = &quot;修改课程管理&quot;;<br>  &#125;);<br>&#125;<br><br>/** 提交按钮 */<br>function submitForm() &#123;<br>  proxy.$refs[&quot;courseRef&quot;].validate((valid) =&gt; &#123;<br>    if (valid) &#123;<br>      if (form.value.id != null) &#123;<br>        updateCourse(form.value).then((response) =&gt; &#123;<br>          proxy.$modal.msgSuccess(&quot;修改成功&quot;);<br>          open.value = false;<br>          getList();<br>        &#125;);<br>      &#125; else &#123;<br>        addCourse(form.value).then((response) =&gt; &#123;<br>          proxy.$modal.msgSuccess(&quot;新增成功&quot;);<br>          open.value = false;<br>          getList();<br>        &#125;);<br>      &#125;<br>    &#125;<br>  &#125;);<br>&#125;<br><br>/** 删除按钮操作 */<br>function handleDelete(row) &#123;<br>  const _ids = row.id || ids.value;<br>  proxy.$modal<br>    .confirm(&#x27;是否确认删除课程管理编号为&quot;&#x27; + _ids + &#x27;&quot;的数据项？&#x27;)<br>    .then(function () &#123;<br>      return delCourse(_ids);<br>    &#125;)<br>    .then(() =&gt; &#123;<br>      getList();<br>      proxy.$modal.msgSuccess(&quot;删除成功&quot;);<br>    &#125;)<br>    .catch(() =&gt; &#123;&#125;);<br>&#125;<br><br>/** 导出按钮操作 */<br>function handleExport() &#123;<br>  proxy.download(<br>    &quot;course/course/export&quot;,<br>    &#123;<br>      ...queryParams.value,<br>    &#125;,<br>    `course_$&#123;new Date().getTime()&#125;.xlsx`<br>  );<br>&#125;<br><br>// 页面加载时执行-查询课程管理列表<br>getList();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="后端代码分析">后端代码分析</h2><h3 id="CourseController">CourseController</h3><p>ruoyi-admin 模块下找到这个类：com.ruoyi.web.controller.course.CourseController 里面有 5 个对应的方法接口，详细代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.course.controller;<br><br><span class="hljs-keyword">import</span> com.sky.common.annotation.Log;<br><span class="hljs-keyword">import</span> com.sky.common.core.controller.BaseController;<br><span class="hljs-keyword">import</span> com.sky.common.core.domain.AjaxResult;<br><span class="hljs-keyword">import</span> com.sky.common.core.page.TableDataInfo;<br><span class="hljs-keyword">import</span> com.sky.common.enums.BusinessType;<br><span class="hljs-keyword">import</span> com.sky.common.utils.poi.ExcelUtil;<br><span class="hljs-keyword">import</span> com.sky.course.domain.Course;<br><span class="hljs-keyword">import</span> com.sky.course.service.ICourseService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 课程管理Controller</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/course/course&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CourseController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ICourseService courseService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询课程管理列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;course:course:list&#x27;)&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title function_">list</span><span class="hljs-params">(Course course)</span><br>    &#123;<br>        <span class="hljs-comment">//1. 开启分页</span><br>        startPage();<br>        <span class="hljs-comment">//2. 查询课程列表</span><br>        List&lt;Course&gt; list = courseService.selectCourseList(course);<br>        <span class="hljs-comment">//3. 返回表格分页数据对象</span><br>        <span class="hljs-keyword">return</span> getDataTable(list);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导出课程管理列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;course:course:export&#x27;)&quot;)</span><br>    <span class="hljs-meta">@Log(title = &quot;课程管理&quot;, businessType = BusinessType.EXPORT)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/export&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">export</span><span class="hljs-params">(HttpServletResponse response, Course course)</span><br>    &#123;<br>        List&lt;Course&gt; list = courseService.selectCourseList(course);<br>        ExcelUtil&lt;Course&gt; util = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelUtil</span>&lt;Course&gt;(Course.class);<br>        util.exportExcel(response, list, <span class="hljs-string">&quot;课程管理数据&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取课程管理详细信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;course:course:query&#x27;)&quot;)</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">getInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> success(courseService.selectCourseById(id));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增课程管理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;course:course:add&#x27;)&quot;)</span><br>    <span class="hljs-meta">@Log(title = &quot;课程管理&quot;, businessType = BusinessType.INSERT)</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Course course)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> toAjax(courseService.insertCourse(course));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改课程管理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;course:course:edit&#x27;)&quot;)</span><br>    <span class="hljs-meta">@Log(title = &quot;课程管理&quot;, businessType = BusinessType.UPDATE)</span><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">edit</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Course course)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> toAjax(courseService.updateCourse(course));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除课程管理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;course:course:remove&#x27;)&quot;)</span><br>    <span class="hljs-meta">@Log(title = &quot;课程管理&quot;, businessType = BusinessType.DELETE)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;ids&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long[] ids)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> toAjax(courseService.deleteCourseByIds(ids));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="BaseController">BaseController</h3><p>Controller 继承了 BaseController，其中 BaseController 详细定义如下图：</p><p><img src="assets/image-20240515203205623.png" alt="image-20240515203205623"></p><h3 id="TableDataInfo">TableDataInfo</h3><p>分页查询统一返回对象：表格分页数据对象</p><p><img src="assets/image-20240515203308811.png" alt="image-20240515203308811"></p><h3 id="AjaxResult">AjaxResult</h3><p>增删改查统一返回对象：操作消息提醒</p><p><img src="assets/image-20240515203414483.png" alt="image-20240515203414483"></p><h3 id="BaseEntity">BaseEntity</h3><p>所有实体类默认继承的 BaseEntity 基类</p><p><img src="assets/image-20240515203531887.png" alt="image-20240515203531887"></p><h3 id="权限注解">权限注解</h3><p>@PreAuthorize 注解是 Spring Security 框架中用来做权限检查的。</p><p>它在运行方法前先验证权限，权限够就放行，不够就拦截。</p><p><img src="assets/image-20240515203653598.png" alt="image-20240515203653598"></p><p>权限控制流程图</p><p><img src="assets/image-20240515203730129.png" alt="image-20240515203730129"> <img src="assets/image-20240515203733871.png" alt="image-20240515203733871"></p><h2 id="前后端交互流程">前后端交互流程</h2><p>查询课程管理列表</p><h3 id="接口文档">接口文档</h3><p><img src="assets/image-20240515203815442.png" alt="image-20240515203815442"></p><h3 id="跨域">跨域</h3><p>在前端开发中，跨域是一个常见的问题，特别是在使用 Vue 框架进行开发时。跨域是指在浏览器中发送的 AJAX 请求的目标地址与当前页面的地址不在同一个域下，这会导致浏览器的同源策略产生限制，从而阻止了跨域请求的发送。然而，我们可以通过代理服务器来解决这个问题。</p><p><img src="assets/image-20240515203903598.png" alt="image-20240515203903598"></p><p>代理服务器是位于客户端和目标服务器之间的一台服务器，它接收客户端发送的请求，并将请求转发给目标服务器。通过在代理服务器上进行请求转发，可以绕过浏览器的同源策略限制，从而实现跨域请求。</p><p>在 vue.config.js 文件中添加以下内容：</p><p><img src="assets/image-20240515203936120.png" alt="image-20240515203936120"></p><h1>二次开发</h1><p>接下来我们将利用这些知识，实现外卖管理系统的业务功能开发，本章培养的是大家如何基于若依进行二次开发的技能，所以这里我们拿其中一个菜品管理功能给同学们进行讲解</p><h2 id="模块定制">模块定制</h2><h3 id="若依框架修改器">若依框架修改器</h3><p>若依框架修改器是一个可以一键修改 RuoYi 框架包名、项目名等的工具。</p><p>地址：<a href="https://gitee.com/lpf_project/RuoYi-MT/releases">https://gitee.com/lpf_project/RuoYi-MT/releases</a></p><p>资料中已提供，将项目打成压缩包，直接修改即可：</p><p><img src="assets/image-20240503154426874.png" alt="image-20240503154426874"></p><p><img src="assets/image-20240503154346025.png" alt="image-20240503154346025"></p><h3 id="新建业务模块">新建业务模块</h3><h4 id="新建子模块">新建子模块</h4><p>在<code>sky</code>父工程下创建<code>sky-merchant</code>子模块，在<code>pom.xml</code>中导入核心模块依赖</p><p><img src="assets/image-20240430152646977.png" alt="image-20240430152646977"></p><h4 id="版本锁定">版本锁定</h4><p>在<code>RuoYi-Vue</code>父工程<code>pom.xml</code>中进行版本锁定</p><p><img src="assets/image-20240430152825711.png" alt="image-20240430152825711"></p><h4 id="添加模块依赖">添加模块依赖</h4><p>在<code>ruoyi-admin</code>模块<code>pom.xml</code>中添加模块依赖</p><p><img src="assets/image-20240430152947793.png" alt="image-20240430152947793"></p><h2 id="菜品管理">菜品管理</h2><p>利用若依代码生成器（主子表模板），生成菜品管理的前后端代码。</p><p><img src="assets/image-20240515205011305.png" alt="image-20240515205011305"></p><h3 id="代码生成-3">代码生成</h3><p>① 准备 SQL 并导入数据库</p><p><img src="assets/image-20240515204819091.png" alt="image-20240515204819091"></p><p>② 配置代码生成信息</p><p><img src="assets/image-20240515204845464.png" alt="image-20240515204845464"></p><p>③ 下载代码并导入项目</p><p><img src="assets/image-20240515204901273.png" alt="image-20240515204901273"></p><h3 id="升级改造">升级改造</h3><h4 id="页面组件">页面组件</h4><p>找到 src/views/merchant/dish/index.vue 文件，改造菜品查询列表和口味列表，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;el-form<br>      :model=&quot;queryParams&quot;<br>      ref=&quot;queryRef&quot;<br>      :inline=&quot;true&quot;<br>      v-show=&quot;showSearch&quot;<br>      label-width=&quot;68px&quot;<br>    &gt;<br>      &lt;el-form-item label=&quot;菜品名称&quot; prop=&quot;name&quot;&gt;<br>        &lt;el-input<br>          v-model=&quot;queryParams.name&quot;<br>          placeholder=&quot;请输入菜品名称&quot;<br>          clearable<br>          @keyup.enter=&quot;handleQuery&quot;<br>        /&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-form-item label=&quot;售卖状态&quot; prop=&quot;status&quot;&gt;<br>        &lt;el-select<br>          v-model=&quot;queryParams.status&quot;<br>          placeholder=&quot;请选择售卖状态&quot;<br>          clearable<br>        &gt;<br>          &lt;el-option<br>            v-for=&quot;dict in dish_status&quot;<br>            :key=&quot;dict.value&quot;<br>            :label=&quot;dict.label&quot;<br>            :value=&quot;dict.value&quot;<br>          /&gt;<br>        &lt;/el-select&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-form-item&gt;<br>        &lt;el-button type=&quot;primary&quot; icon=&quot;Search&quot; @click=&quot;handleQuery&quot;<br>          &gt;搜索&lt;/el-button<br>        &gt;<br>        &lt;el-button icon=&quot;Refresh&quot; @click=&quot;resetQuery&quot;&gt;重置&lt;/el-button&gt;<br>      &lt;/el-form-item&gt;<br>    &lt;/el-form&gt;<br><br>    &lt;el-row :gutter=&quot;10&quot; class=&quot;mb8&quot;&gt;<br>      &lt;el-col :span=&quot;1.5&quot;&gt;<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          plain<br>          icon=&quot;Plus&quot;<br>          @click=&quot;handleAdd&quot;<br>          v-hasPermi=&quot;[&#x27;merchant:dish:add&#x27;]&quot;<br>          &gt;新增&lt;/el-button<br>        &gt;<br>      &lt;/el-col&gt;<br>      &lt;el-col :span=&quot;1.5&quot;&gt;<br>        &lt;el-button<br>          type=&quot;success&quot;<br>          plain<br>          icon=&quot;Edit&quot;<br>          :disabled=&quot;single&quot;<br>          @click=&quot;handleUpdate&quot;<br>          v-hasPermi=&quot;[&#x27;merchant:dish:edit&#x27;]&quot;<br>          &gt;修改&lt;/el-button<br>        &gt;<br>      &lt;/el-col&gt;<br>      &lt;el-col :span=&quot;1.5&quot;&gt;<br>        &lt;el-button<br>          type=&quot;danger&quot;<br>          plain<br>          icon=&quot;Delete&quot;<br>          :disabled=&quot;multiple&quot;<br>          @click=&quot;handleDelete&quot;<br>          v-hasPermi=&quot;[&#x27;merchant:dish:remove&#x27;]&quot;<br>          &gt;删除&lt;/el-button<br>        &gt;<br>      &lt;/el-col&gt;<br>      &lt;el-col :span=&quot;1.5&quot;&gt;<br>        &lt;el-button<br>          type=&quot;warning&quot;<br>          plain<br>          icon=&quot;Download&quot;<br>          @click=&quot;handleExport&quot;<br>          v-hasPermi=&quot;[&#x27;merchant:dish:export&#x27;]&quot;<br>          &gt;导出&lt;/el-button<br>        &gt;<br>      &lt;/el-col&gt;<br>      &lt;right-toolbar<br>        v-model:showSearch=&quot;showSearch&quot;<br>        @queryTable=&quot;getList&quot;<br>      &gt;&lt;/right-toolbar&gt;<br>    &lt;/el-row&gt;<br><br>    &lt;el-table<br>      v-loading=&quot;loading&quot;<br>      :data=&quot;dishList&quot;<br>      @selection-change=&quot;handleSelectionChange&quot;<br>    &gt;<br>      &lt;el-table-column type=&quot;selection&quot; width=&quot;55&quot; align=&quot;center&quot; /&gt;<br>      &lt;!-- &lt;el-table-column label=&quot;主键&quot; align=&quot;center&quot; prop=&quot;id&quot; /&gt; --&gt;<br>      &lt;el-table-column label=&quot;菜品名称&quot; align=&quot;center&quot; prop=&quot;name&quot; /&gt;<br>      &lt;!-- &lt;el-table-column label=&quot;售价&quot; align=&quot;center&quot; prop=&quot;price&quot; /&gt; --&gt;<br>      &lt;el-table-column label=&quot;售价&quot; align=&quot;center&quot;&gt;<br>        &lt;template #default=&quot;&#123; row &#125;&quot;&gt;<br>          &lt;span&gt;￥&#123;&#123; row.price &#125;&#125;&lt;/span&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;图片&quot; align=&quot;center&quot; prop=&quot;image&quot; width=&quot;100&quot;&gt;<br>        &lt;template #default=&quot;scope&quot;&gt;<br>          &lt;image-preview :src=&quot;scope.row.image&quot; :width=&quot;50&quot; :height=&quot;50&quot; /&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;售卖状态&quot; align=&quot;center&quot; prop=&quot;status&quot;&gt;<br>        &lt;template #default=&quot;scope&quot;&gt;<br>          &lt;dict-tag :options=&quot;dish_status&quot; :value=&quot;scope.row.status&quot; /&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>      &lt;el-table-column<br>        label=&quot;更新时间&quot;<br>        align=&quot;center&quot;<br>        prop=&quot;updateTime&quot;<br>        width=&quot;180&quot;<br>      &gt;<br>        &lt;template #default=&quot;scope&quot;&gt;<br>          &lt;span&gt;&#123;&#123;<br>            parseTime(scope.row.updateTime, &quot;&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;&quot;)<br>          &#125;&#125;&lt;/span&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>      &lt;el-table-column<br>        label=&quot;操作&quot;<br>        align=&quot;center&quot;<br>        class-name=&quot;small-padding fixed-width&quot;<br>      &gt;<br>        &lt;template #default=&quot;scope&quot;&gt;<br>          &lt;el-button<br>            link<br>            type=&quot;primary&quot;<br>            icon=&quot;Edit&quot;<br>            @click=&quot;handleUpdate(scope.row)&quot;<br>            v-hasPermi=&quot;[&#x27;merchant:dish:edit&#x27;]&quot;<br>            &gt;修改&lt;/el-button<br>          &gt;<br>          &lt;el-button<br>            link<br>            type=&quot;primary&quot;<br>            icon=&quot;Delete&quot;<br>            @click=&quot;handleDelete(scope.row)&quot;<br>            v-hasPermi=&quot;[&#x27;merchant:dish:remove&#x27;]&quot;<br>            &gt;删除&lt;/el-button<br>          &gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br><br>    &lt;pagination<br>      v-show=&quot;total &gt; 0&quot;<br>      :total=&quot;total&quot;<br>      v-model:page=&quot;queryParams.pageNum&quot;<br>      v-model:limit=&quot;queryParams.pageSize&quot;<br>      @pagination=&quot;getList&quot;<br>    /&gt;<br><br>    &lt;!-- 添加或修改菜品管理对话框 --&gt;<br>    &lt;el-dialog :title=&quot;title&quot; v-model=&quot;open&quot; width=&quot;600px&quot; append-to-body&gt;<br>      &lt;el-form ref=&quot;dishRef&quot; :model=&quot;form&quot; :rules=&quot;rules&quot; label-width=&quot;80px&quot;&gt;<br>        &lt;el-form-item label=&quot;菜品名称&quot; prop=&quot;name&quot;&gt;<br>          &lt;el-input v-model=&quot;form.name&quot; placeholder=&quot;请输入菜品名称&quot; /&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;售价&quot; prop=&quot;price&quot;&gt;<br>          &lt;el-input v-model=&quot;form.price&quot; placeholder=&quot;请输入售价&quot; /&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;图片&quot; prop=&quot;image&quot;&gt;<br>          &lt;image-upload v-model=&quot;form.image&quot; /&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;描述信息&quot; prop=&quot;description&quot;&gt;<br>          &lt;el-input v-model=&quot;form.description&quot; placeholder=&quot;请输入描述信息&quot; /&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;售卖状态&quot; prop=&quot;status&quot;&gt;<br>          &lt;el-select v-model=&quot;form.status&quot; placeholder=&quot;请选择售卖状态&quot;&gt;<br>            &lt;el-option<br>              v-for=&quot;dict in dish_status&quot;<br>              :key=&quot;dict.value&quot;<br>              :label=&quot;dict.label&quot;<br>              :value=&quot;parseInt(dict.value)&quot;<br>            &gt;&lt;/el-option&gt;<br>          &lt;/el-select&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-divider content-position=&quot;center&quot;&gt;菜品口味关系信息&lt;/el-divider&gt;<br>        &lt;el-row :gutter=&quot;10&quot; class=&quot;mb8&quot;&gt;<br>          &lt;el-col :span=&quot;1.5&quot;&gt;<br>            &lt;el-button type=&quot;primary&quot; icon=&quot;Plus&quot; @click=&quot;handleAddDishFlavor&quot;<br>              &gt;添加&lt;/el-button<br>            &gt;<br>          &lt;/el-col&gt;<br>          &lt;el-col :span=&quot;1.5&quot;&gt;<br>            &lt;el-button<br>              type=&quot;danger&quot;<br>              icon=&quot;Delete&quot;<br>              @click=&quot;handleDeleteDishFlavor&quot;<br>              &gt;删除&lt;/el-button<br>            &gt;<br>          &lt;/el-col&gt;<br>        &lt;/el-row&gt;<br>        &lt;el-table<br>          :data=&quot;dishFlavorList&quot;<br>          :row-class-name=&quot;rowDishFlavorIndex&quot;<br>          @selection-change=&quot;handleDishFlavorSelectionChange&quot;<br>          ref=&quot;dishFlavor&quot;<br>        &gt;<br>          &lt;el-table-column type=&quot;selection&quot; width=&quot;50&quot; align=&quot;center&quot; /&gt;<br>          &lt;el-table-column<br>            label=&quot;序号&quot;<br>            align=&quot;center&quot;<br>            prop=&quot;index&quot;<br>            width=&quot;50&quot;<br>          /&gt;<br>          &lt;el-table-column label=&quot;口味名称&quot; prop=&quot;name&quot; width=&quot;150&quot;&gt;<br>            &lt;template #default=&quot;scope&quot;&gt;<br>              &lt;!-- &lt;el-input v-model=&quot;scope.row.name&quot; placeholder=&quot;请输入口味名称&quot; /&gt; --&gt;<br>              &lt;el-select<br>                v-model=&quot;scope.row.name&quot;<br>                placeholder=&quot;请选择口味名称&quot;<br>                @change=&quot;changeFlavorName(scope.row)&quot;<br>              &gt;<br>                &lt;el-option<br>                  v-for=&quot;dishFlavor in dishFlavorListSelect&quot;<br>                  :key=&quot;dishFlavor.name&quot;<br>                  :label=&quot;dishFlavor.name&quot;<br>                  :value=&quot;dishFlavor.name&quot;<br>                /&gt;<br>              &lt;/el-select&gt;<br>            &lt;/template&gt;<br>          &lt;/el-table-column&gt;<br>          &lt;el-table-column label=&quot;口味列表&quot; prop=&quot;value&quot; width=&quot;350&quot;&gt;<br>            &lt;template #default=&quot;scope&quot;&gt;<br>              &lt;!-- &lt;el-input v-model=&quot;scope.row.value&quot; placeholder=&quot;请输入口味列表&quot; /&gt; --&gt;<br>              &lt;el-select<br>                v-model=&quot;scope.row.value&quot;<br>                placeholder=&quot;请选择口味列表&quot;<br>                multiple<br>                @focus=&quot;focusFlavorName(scope.row)&quot;<br>                style=&quot;width: 90%;&quot;<br>              &gt;<br>                &lt;el-option<br>                  v-for=&quot;value in checkValueList&quot;<br>                  :key=&quot;value&quot;<br>                  :label=&quot;value&quot;<br>                  :value=&quot;value&quot;<br>                /&gt;<br>              &lt;/el-select&gt;<br>            &lt;/template&gt;<br>          &lt;/el-table-column&gt;<br>        &lt;/el-table&gt;<br>      &lt;/el-form&gt;<br>      &lt;template #footer&gt;<br>        &lt;div class=&quot;dialog-footer&quot;&gt;<br>          &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm&quot;&gt;确 定&lt;/el-button&gt;<br>          &lt;el-button @click=&quot;cancel&quot;&gt;取 消&lt;/el-button&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br>    &lt;/el-dialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup name=&quot;Dish&quot;&gt;<br>import &#123;<br>  listDish,<br>  getDish,<br>  delDish,<br>  addDish,<br>  updateDish,<br>&#125; from &quot;@/api/merchant/dish&quot;;<br>import &#123; ref &#125; from &quot;vue&quot;;<br><br>const &#123; proxy &#125; = getCurrentInstance();<br>const &#123; dish_status &#125; = proxy.useDict(&quot;dish_status&quot;);<br><br>const dishList = ref([]);<br>const dishFlavorList = ref([]);<br>const open = ref(false);<br>const loading = ref(true);<br>const showSearch = ref(true);<br>const ids = ref([]);<br>const checkedDishFlavor = ref([]);<br>const single = ref(true);<br>const multiple = ref(true);<br>const total = ref(0);<br>const title = ref(&quot;&quot;);<br><br>const data = reactive(&#123;<br>  form: &#123;&#125;,<br>  queryParams: &#123;<br>    pageNum: 1,<br>    pageSize: 10,<br>    name: null,<br>    status: null,<br>  &#125;,<br>  rules: &#123;<br>    name: [&#123; required: true, message: &quot;菜品名称不能为空&quot;, trigger: &quot;blur&quot; &#125;],<br>    price: [&#123; required: true, message: &quot;售价不能为空&quot;, trigger: &quot;blur&quot; &#125;],<br>    image: [&#123; required: true, message: &quot;图片不能为空&quot;, trigger: &quot;blur&quot; &#125;],<br>    status: [<br>      &#123; required: true, message: &quot;售卖状态不能为空&quot;, trigger: &quot;change&quot; &#125;,<br>    ],<br>  &#125;,<br>&#125;);<br><br>const &#123; queryParams, form, rules &#125; = toRefs(data);<br>//-----------------------------<br>// 定义口味名称和口味列表静态数据<br>const dishFlavorListSelect = ref([<br>  &#123; name: &quot;辣度&quot;, value: [&quot;不辣&quot;, &quot;微辣&quot;, &quot;中辣&quot;, &quot;重辣&quot;] &#125;,<br>  &#123; name: &quot;忌口&quot;, value: [&quot;不要葱&quot;, &quot;不要蒜&quot;, &quot;不要香菜&quot;, &quot;不要辣&quot;] &#125;,<br>  &#123; name: &quot;甜味&quot;, value: [&quot;无糖&quot;, &quot;少糖&quot;, &quot;半糖&quot;, &quot;多糖&quot;] &#125;,<br>]);<br>// 存储当前选中口味列表数组<br>const checkValueList = ref([]);<br>// 定义改变口味名称时更新当前选中的口味列表<br>function changeFlavorName(row) &#123;<br>  // 清空当前行value<br>  row.value = [];<br>  // 根据选中name去查找静态数据的value<br>  checkValueList.value = dishFlavorListSelect.value.find(<br>    (item) =&gt; item.name == row.name<br>  ).value;<br>&#125;<br>// 定义口味列表获取焦点时更新当前选中的口味列表<br>function focusFlavorName(row) &#123;<br>  // 根据选中name去查找静态数据的value<br>  checkValueList.value = dishFlavorListSelect.value.find(<br>    (item) =&gt; item.name == row.name<br>  ).value;<br>&#125;<br><br>//-----------------------------<br>/** 查询菜品管理列表 */<br>function getList() &#123;<br>  loading.value = true;<br>  listDish(queryParams.value).then((response) =&gt; &#123;<br>    dishList.value = response.rows;<br>    total.value = response.total;<br>    loading.value = false;<br>  &#125;);<br>&#125;<br><br>// 取消按钮<br>function cancel() &#123;<br>  open.value = false;<br>  reset();<br>&#125;<br><br>// 表单重置<br>function reset() &#123;<br>  form.value = &#123;<br>    id: null,<br>    name: null,<br>    price: null,<br>    image: null,<br>    description: null,<br>    status: null,<br>    createTime: null,<br>    updateTime: null,<br>  &#125;;<br>  dishFlavorList.value = [];<br>  proxy.resetForm(&quot;dishRef&quot;);<br>&#125;<br><br>/** 搜索按钮操作 */<br>function handleQuery() &#123;<br>  queryParams.value.pageNum = 1;<br>  getList();<br>&#125;<br><br>/** 重置按钮操作 */<br>function resetQuery() &#123;<br>  proxy.resetForm(&quot;queryRef&quot;);<br>  handleQuery();<br>&#125;<br><br>// 多选框选中数据<br>function handleSelectionChange(selection) &#123;<br>  ids.value = selection.map((item) =&gt; item.id);<br>  single.value = selection.length != 1;<br>  multiple.value = !selection.length;<br>&#125;<br><br>/** 新增按钮操作 */<br>function handleAdd() &#123;<br>  reset();<br>  open.value = true;<br>  title.value = &quot;添加菜品管理&quot;;<br>&#125;<br><br>/** 修改按钮操作 */<br>function handleUpdate(row) &#123;<br>  reset();<br>  const _id = row.id || ids.value;<br>  getDish(_id).then((response) =&gt; &#123;<br>    form.value = response.data;<br>    dishFlavorList.value = response.data.dishFlavorList;<br>    // 将口味列表value字符串转为json数组<br>    if (dishFlavorList.value != null) &#123;<br>      dishFlavorList.value.forEach((item) =&gt; &#123;<br>        item.value = JSON.parse(item.value);<br>      &#125;);<br>    &#125;<br><br>    open.value = true;<br>    title.value = &quot;修改菜品管理&quot;;<br>  &#125;);<br>&#125;<br><br>/** 提交按钮 */<br>function submitForm() &#123;<br>  proxy.$refs[&quot;dishRef&quot;].validate((valid) =&gt; &#123;<br>    if (valid) &#123;<br>      form.value.dishFlavorList = dishFlavorList.value;<br>      // 将口味列表中value通过JSON工具类转为字符串<br>      if (form.value.dishFlavorList != null) &#123;<br>        form.value.dishFlavorList.forEach((item) =&gt; &#123;<br>          item.value = JSON.stringify(item.value);<br>        &#125;);<br>      &#125;<br><br>      if (form.value.id != null) &#123;<br>        updateDish(form.value).then((response) =&gt; &#123;<br>          proxy.$modal.msgSuccess(&quot;修改成功&quot;);<br>          open.value = false;<br>          getList();<br>        &#125;);<br>      &#125; else &#123;<br>        addDish(form.value).then((response) =&gt; &#123;<br>          proxy.$modal.msgSuccess(&quot;新增成功&quot;);<br>          open.value = false;<br>          getList();<br>        &#125;);<br>      &#125;<br>    &#125;<br>  &#125;);<br>&#125;<br><br>/** 删除按钮操作 */<br>function handleDelete(row) &#123;<br>  const _ids = row.id || ids.value;<br>  proxy.$modal<br>    .confirm(&#x27;是否确认删除菜品管理编号为&quot;&#x27; + _ids + &#x27;&quot;的数据项？&#x27;)<br>    .then(function () &#123;<br>      return delDish(_ids);<br>    &#125;)<br>    .then(() =&gt; &#123;<br>      getList();<br>      proxy.$modal.msgSuccess(&quot;删除成功&quot;);<br>    &#125;)<br>    .catch(() =&gt; &#123;&#125;);<br>&#125;<br><br>/** 菜品口味关系序号 */<br>function rowDishFlavorIndex(&#123; row, rowIndex &#125;) &#123;<br>  row.index = rowIndex + 1;<br>&#125;<br><br>/** 菜品口味关系添加按钮操作 */<br>function handleAddDishFlavor() &#123;<br>  let obj = &#123;&#125;;<br>  obj.name = &quot;&quot;;<br>  obj.value = &quot;&quot;;<br>  dishFlavorList.value.push(obj);<br>&#125;<br><br>/** 菜品口味关系删除按钮操作 */<br>function handleDeleteDishFlavor() &#123;<br>  if (checkedDishFlavor.value.length == 0) &#123;<br>    proxy.$modal.msgError(&quot;请先选择要删除的菜品口味关系数据&quot;);<br>  &#125; else &#123;<br>    const dishFlavors = dishFlavorList.value;<br>    const checkedDishFlavors = checkedDishFlavor.value;<br>    dishFlavorList.value = dishFlavors.filter(function (item) &#123;<br>      return checkedDishFlavors.indexOf(item.index) == -1;<br>    &#125;);<br>  &#125;<br>&#125;<br><br>/** 复选框选中数据 */<br>function handleDishFlavorSelectionChange(selection) &#123;<br>  checkedDishFlavor.value = selection.map((item) =&gt; item.index);<br>&#125;<br><br>/** 导出按钮操作 */<br>function handleExport() &#123;<br>  proxy.download(<br>    &quot;merchant/dish/export&quot;,<br>    &#123;<br>      ...queryParams.value,<br>    &#125;,<br>    `dish_$&#123;new Date().getTime()&#125;.xlsx`<br>  );<br>&#125;<br><br>getList();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="图片上传组件">图片上传组件</h4><p>由于之前的图片访问是本地的路径和服务，需要发起请求才能获取图片，现在我们使用了 OSS，图片可直接访问，无需再次访问后端服务，所以前端的图片访问逻辑我们需要修改</p><ul><li>修改文件位置：src/components/imageUpload/index.vue</li><li>如果图片路径是以 http 开头的，则不走后台服务访问，直接访问 OSS，之前的不变，如下图</li></ul><p><img src="assets/image-20240515205705604.png" alt="image-20240515205705604"></p><h2 id="页面调整">页面调整</h2><p>如果使用若依框架项目做为脚手架，那么我们肯定需要在页面显示中，符合自己公司或者项目的标识才行，需要更换的地方很多，我们依次来解决它</p><ul><li>浏览器标签页 logo 标识、标题</li><li>系统页面中的 logo 标识、标题</li><li>去除源码地址 &amp; 文档地址</li><li>主题风格和菜单图标</li><li>登录名称及背景图</li></ul><p><img src="assets/image-20240515211842252.png" alt="image-20240515211842252"></p><p><img src="assets/image-20240515211848147.png" alt="image-20240515211848147"></p><h3 id="浏览器标签页-icon、标题">浏览器标签页 icon、标题</h3><p>找到资料中的 logo 图标，替换前端项目中的 public 文件夹，删除原有的 favicon.ico，把新拷贝过来的 logo 更名为 favicon.ico 即可</p><p><img src="assets/image-20240503154918697.png" alt="image-20240503154918697"></p><p>找到根目录下的 index.html 文件，把 title 更换为自己想要的内容即可</p><p><img src="assets/image-20240503154945668.png" alt="image-20240503154945668"></p><h3 id="系统页面中的-logo、标题">系统页面中的 logo、标题</h3><p>找到资料中的 logo 文件，替换 src/assets/logo/logo.png 文件</p><p><img src="assets/image-20240503155059313.png" alt="image-20240503155059313"></p><p>若依的系统页面标题引用的是开发环境的配置，我们只需要修改开发的环境的 VITE_APP_TITLE 属性即可</p><p><img src="assets/image-20240503155126721.png" alt="image-20240503155126721"></p><h3 id="去除源码-文档">去除源码 &amp; 文档</h3><p><img src="assets/image-20240503155305048.png" alt="image-20240503155305048"></p><h3 id="主题和自定义图标">主题和自定义图标</h3><p>在目前的前端项目中，已经提供了非常便利的操作方式，可以切换主题的风格</p><p>操作：点击右上角的头像，可以找到**布局设置，**如下操作</p><p><img src="assets/17157783775591.png" alt="img"></p><p>在前端代码中也有对应的操作，更好主题风格文件位置：src/setting.js</p><p><img src="assets/image-20240515210823709.png" alt="image-20240515210823709"></p><p>更换主题颜色文件位置：src/store/modules/settings.js</p><p><img src="assets/image-20240515210930466.png" alt="image-20240515210930466"></p><p>访问阿里巴巴矢量图库，搜索图标：<a href="https://www.iconfont.cn/search/index?searchType=icon&amp;q=%E8%8F%9C%E5%93%81%E7%AE%A1%E7%90%86">https://www.iconfont.cn/search/index?searchType=icon&amp;q=菜品管理</a></p><p><img src="assets/image-20240515211041187.png" alt="image-20240515211041187"></p><p>将下载好的图标复制到 src/assets/icons/svg 目录下，就可以给指定菜单设置图标了</p><p><img src="assets/image-20240503155635595.png" alt="image-20240503155635595"></p><h3 id="登录页面中标题、背景图">登录页面中标题、背景图</h3><p>登录名称和背景图，我们可以直接找到登录的组件进行修改即可</p><p>组件位置：src/views/login.vue</p><p><img src="assets/image-20240510110514167.png" alt="image-20240510110514167"></p><p><img src="assets/image-20240503155545404.png" alt="image-20240503155545404"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>若依</tag>
      
      <tag>springboot</tag>
      
      <tag>vue</tag>
      
      <tag>mysql</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>419小U的数列因子挑战</title>
    <link href="/2025/02/03/419%E5%B0%8FU%E7%9A%84%E6%95%B0%E5%88%97%E5%9B%A0%E5%AD%90%E6%8C%91%E6%88%98/"/>
    <url>/2025/02/03/419%E5%B0%8FU%E7%9A%84%E6%95%B0%E5%88%97%E5%9B%A0%E5%AD%90%E6%8C%91%E6%88%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>512会议按时抵达所需的最小延迟跳过次数</title>
    <link href="/2025/02/02/512%E4%BC%9A%E8%AE%AE%E6%8C%89%E6%97%B6%E6%8A%B5%E8%BE%BE%E6%89%80%E9%9C%80%E7%9A%84%E6%9C%80%E5%B0%8F%E5%BB%B6%E8%BF%9F%E8%B7%B3%E8%BF%87%E6%AC%A1%E6%95%B0/"/>
    <url>/2025/02/02/512%E4%BC%9A%E8%AE%AE%E6%8C%89%E6%97%B6%E6%8A%B5%E8%BE%BE%E6%89%80%E9%9C%80%E7%9A%84%E6%9C%80%E5%B0%8F%E5%BB%B6%E8%BF%9F%E8%B7%B3%E8%BF%87%E6%AC%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="解题思路">解题思路</h3><ol><li><p>思路<br>使用动态规划求解。在每条路线上维护一个数组 dp，其中 dp[i][j] 表示前i条路线后恰好跳过 j 次等待时所需的最短时间。然后可以使用滚动数组进行优化，即只维护一个长度为 n 的 dp 数组。</p></li><li><p>状态转移</p><ul><li>对于第一条路线，时间为 dist[0] / speed，不需要等待。</li><li>对于后续路线，第 i 条的时间有两种选择：<ul><li>不跳过等待：需要等待至最近的整数小时，即 dp[j] = ceil(前一状态的时间) + 当前路程时间</li><li>跳过等待：直接加上当前路程的时间，即 dp[j] = 前一状态的时间 + 当前路程时间，同时跳过次数增加 1<br>最后取两种方法的较优值更新 dp。</li></ul></li></ul></li></ol><h3 id="实现代码">实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> ceil<br>inf = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">dist: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], speed: <span class="hljs-built_in">int</span>, hoursBefore: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    n = <span class="hljs-built_in">len</span>(dist)<br>    pre = [inf] * n<br>    pre[<span class="hljs-number">0</span>] = dist[<span class="hljs-number">0</span>] / speed<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>        cur = [inf] * n<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>):<br>            <span class="hljs-comment"># 用, 不用</span><br>            cur[j] = <span class="hljs-built_in">min</span>(pre[j - <span class="hljs-number">1</span>], ceil(pre[j]) <span class="hljs-keyword">if</span> pre[j] != inf <span class="hljs-keyword">else</span> inf) + dist[i] / speed<br>        pre = cur.copy()<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> pre[j] &lt;= hoursBefore:<br>            <span class="hljs-keyword">return</span> j<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(dist=[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>], speed=<span class="hljs-number">5</span>, hoursBefore=<span class="hljs-number">3</span>) == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(solution(dist=[<span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>], speed=<span class="hljs-number">7</span>, hoursBefore=<span class="hljs-number">4</span>) == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(solution(dist=[<span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>], speed=<span class="hljs-number">4</span>, hoursBefore=<span class="hljs-number">8</span>) == <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><p>时间复杂度：$O(n^2)$，其中 n 为路线数量。<br>空间复杂度：$O(n)$。</p>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>393小F的超市购物策略</title>
    <link href="/2025/02/01/393%E5%B0%8FF%E7%9A%84%E8%B6%85%E5%B8%82%E8%B4%AD%E7%89%A9%E7%AD%96%E7%95%A5/"/>
    <url>/2025/02/01/393%E5%B0%8FF%E7%9A%84%E8%B6%85%E5%B8%82%E8%B4%AD%E7%89%A9%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>小 F 需要在初始金额 x 内购物，每个商品有价格 a[i] 和喜爱度 b[i]。目标是在不超出预算的情况下获得最大化的喜爱度和。特殊之处在于：</p><ul><li>初始没有优惠机会，只有在原价购买（支付 a[i]）后，才获得下一个商品半价购买（支付 a[i]//2）的优惠机会；</li><li>如果优惠机会未使用（状态 op 为 1），可以选择对当前商品使用优惠（半价购买），但使用后恢复普通状态（op 变为 0）；</li><li>跳过或使用优惠购买后，优惠机会均被重置为 0，即必须重新原价购买才能获得优惠资格。</li></ul><h3 id="解题思路">解题思路</h3><p>用 DFS + 记忆化（cache）来搜索所有可能的购买组合。<br>定义递归函数 dfs(i, j, op)：</p><ul><li>i：当前处理的商品下标</li><li>j：剩余金额</li><li>op：优惠状态（1 表示可以半价购买，0 表示无优惠机会）<br>对于每个商品有三种选择：</li><li>跳过该商品：金额不变，且状态重置为 0</li><li>如果有优惠机会（op == 1）且剩余金额够商品半价，则可半价购买，金额减少 a[i]//2，购买后状态置为 0</li><li>如果剩余金额够以原价购买，则购买该商品，金额减少 a[i]，同时获得下一个商品使用优惠的机会，即状态变为 1<br>最终返回达到末尾时获得的喜爱度总和的最大值。</li></ul><h3 id="实现代码">实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> cache<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, x: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span>, b: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">    @cache</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i, j, op</span>):<br>        <span class="hljs-keyword">if</span> i == n:  <span class="hljs-comment"># 所有商品处理完毕</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 不购买，且状态重置为 0</span><br>        res = dfs(i + <span class="hljs-number">1</span>, j, <span class="hljs-number">0</span>)<br>        <span class="hljs-comment"># 若有优惠机会，尝试半价购买</span><br>        <span class="hljs-keyword">if</span> op == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> j &gt;= a[i] // <span class="hljs-number">2</span>:<br>            res = <span class="hljs-built_in">max</span>(res, dfs(i + <span class="hljs-number">1</span>, j - a[i] // <span class="hljs-number">2</span>, <span class="hljs-number">0</span>) + b[i])<br>        <span class="hljs-comment"># 尝试原价购买，并获得优惠机会</span><br>        <span class="hljs-keyword">if</span> j &gt;= a[i]:<br>            res = <span class="hljs-built_in">max</span>(res, dfs(i + <span class="hljs-number">1</span>, j - a[i], <span class="hljs-number">1</span>) + b[i])<br>        <span class="hljs-keyword">return</span> res<br><br>    <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, x, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><p>时间复杂度：$O(n * x)$，其中 n 为商品数量，x 为初始金额。<br>空间复杂度：$O(n * x)$。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>386小C的合法k-size字符串问题</title>
    <link href="/2025/02/01/386%E5%B0%8FC%E7%9A%84%E5%90%88%E6%B3%95k-size%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/"/>
    <url>/2025/02/01/386%E5%B0%8FC%E7%9A%84%E5%90%88%E6%B3%95k-size%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>小 C 最近在研究合法的 k-size 字符串。一个字符串被称为 k-size，是指它可以被分成恰好 k 段连续的相同字符组成的子串。</p><p>例如：</p><ul><li>字符串 “aabbbccc” 是 3-size，因为它可以分成 [“aa”, “bbb”, “ccc”] 这三段。</li><li>字符串 “ababaab” 是 6-size，因为它可以分成 [“a”, “b”, “a”, “b”, “aa”, “b”] 这六段。</li></ul><p>小 C 认为，只有当每个连续段的长度至少为 2 时，该字符串才是合法的。例如，“aabbbccc” 是合法的，而 “ababaab” 不是合法的。</p><p>现在，给定字符串长度 n 和要求的连续段数量 k，小 C 想知道，长度为 n 的、仅由小写字母组成的合法的 k-size 字符串有多少个？答案可能非常大，请将结果对 10^9+7 取模。</p><h3 id="解题思路">解题思路</h3><ol><li><p><strong>分段计数</strong><br>将字符串分成 k 段，每段由相同字符组成，且每段长度至少为 2。设每段的长度为 L₁, L₂, …, Lₖ，则有<br>  L₁ + L₂ + … + Lₖ = n，并且 Lᵢ ≥ 2。<br>令 xᵢ = Lᵢ - 2（xᵢ ≥ 0），则<br>  x₁ + x₂ + … + xₖ = n - 2k。<br>非负整数解的个数即为<br>  C((n - 2k) + k - 1, k - 1) = C(n - k - 1, k - 1)。</p></li><li><p><strong>选字母方案</strong><br>每一段所用的字符均相同，且相邻段的字符不同。</p><ul><li>第一段有 26 种选法</li><li>剩余每段必须和前一段不同，因此每段有 25 种选法<br>故字母的选取方案为 26 × 25^(k - 1)。</li></ul></li><li><p><strong>最终答案</strong><br>合法的 k-size 字符串数为两部分组合，即<br>   答案 = C(n - k - 1, k - 1) × 26 × 25^(k - 1)。<br>由于 n 和 k 可能较大，计算过程中需要使用模 1e9+7。</p></li></ol><h3 id="实现代码">实现代码</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">def</span> C(n, m, p):<br>    <span class="hljs-attribute">if</span> m &lt; <span class="hljs-number">0</span> or n &lt; m:<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-attribute">if</span> m == <span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-attribute">m</span> = min(m, n - m)<br>    <span class="hljs-attribute">a</span> = <span class="hljs-number">1</span><br>    <span class="hljs-attribute">b</span> = <span class="hljs-number">1</span><br>    <span class="hljs-attribute">for</span> i in range(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>        <span class="hljs-attribute">a</span> = a * (n - i + <span class="hljs-number">1</span>) % p<br>        <span class="hljs-attribute">b</span> = (b * i) % p<br>    <span class="hljs-attribute">return</span> a * pow(b, p - <span class="hljs-number">2</span>, p) % p<br><br><span class="hljs-attribute">def</span> lucas(n, m, p):<br>    <span class="hljs-attribute">return</span> C(n % p, m % p, p) * lucas(n // p, m // p, p) % p if m else <span class="hljs-number">1</span><br><br><span class="hljs-attribute">mod</span> = int(<span class="hljs-number">1</span>e9 + <span class="hljs-number">7</span>)<br><span class="hljs-attribute">def</span> solution(n: int, k:int) -&gt; int:<br>    <span class="hljs-attribute">return</span> lucas(n - k - <span class="hljs-number">1</span>, k - <span class="hljs-number">1</span>, mod) * <span class="hljs-number">26</span> * pow(<span class="hljs-number">25</span>, k - <span class="hljs-number">1</span>, mod) % mod<br><br><span class="hljs-attribute">if</span> __name__ == &#x27;__main__&#x27;:<br>    <span class="hljs-attribute">print</span>(solution(n = <span class="hljs-number">2</span>, k = <span class="hljs-number">1</span>) == <span class="hljs-number">26</span>)<br>    <span class="hljs-attribute">print</span>(solution(n = <span class="hljs-number">4</span>, k = <span class="hljs-number">2</span>) == <span class="hljs-number">650</span>)<br>    <span class="hljs-attribute">print</span>(solution(n = <span class="hljs-number">10</span>, k = <span class="hljs-number">5</span>) == <span class="hljs-number">10156250</span>)<br><br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><p>时间复杂度：$O(k)$。<br>空间复杂度：$O(1)$。</p>]]></content>
    
    
    
    <tags>
      
      <tag>组合数学</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>374字符串权值最小化分割问题</title>
    <link href="/2025/02/01/374%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9D%83%E5%80%BC%E6%9C%80%E5%B0%8F%E5%8C%96%E5%88%86%E5%89%B2%E9%97%AE%E9%A2%98/"/>
    <url>/2025/02/01/374%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9D%83%E5%80%BC%E6%9C%80%E5%B0%8F%E5%8C%96%E5%88%86%E5%89%B2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><h3 id="问题描述">问题描述</h3><p>小 G 定义了一个字符串的权值为：字符串的长度乘以字符串中不同字母的种类数量。现在，小 G 有一个字符串，她希望将这个字符串切分成 <code>k</code> 个子串，并希望这些子串的最大权值尽可能小。你需要帮助小 G 找到最优的切分方案，使得这 <code>k</code> 个子串中的最大权值最小化。</p><h3 id="解题思路">解题思路</h3><p>看见最大值最小化直接二分答案，然后判断是否能够切分成 <code>k</code> 个子串。<br><code>check</code>的时候，遍历字符串，用一个集合记录当前子串的不同字母，如果当前子串的不同字母数量乘以当前子串的长度大于 <code>mid</code>，则说明需要切分，切分的次数加一。<br>最后判断切分的次数是否大于 <code>k</code>，如果大于 <code>k</code>，说明 <code>mid</code> 太小，需要增大，否则减小。</p><h3 id="实现代码">实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    n = <span class="hljs-built_in">len</span>(s)<br>    l, r = <span class="hljs-number">1</span>, <span class="hljs-number">26</span> * n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">mid</span>):<br>        d = <span class="hljs-built_in">set</span>()<br>        cnt = length = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            length += <span class="hljs-number">1</span><br>            d.add(s[i])<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(d) * length &gt; mid:<br>                length = <span class="hljs-number">1</span><br>                d = <span class="hljs-built_in">set</span>(&#123;s[i]&#125;)<br>                cnt += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> cnt + <span class="hljs-number">1</span> &gt; k<br><br>    <span class="hljs-keyword">while</span> l &lt;= r:<br>        mid = l + r &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> check(mid):<br>            l = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            r = mid - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> l<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;ababbbb&quot;</span>, <span class="hljs-number">2</span>) == <span class="hljs-number">6</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;abcabcabc&quot;</span>, <span class="hljs-number">3</span>) == <span class="hljs-number">9</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;aaabbbcccddd&quot;</span>, <span class="hljs-number">4</span>) == <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><p><strong>时间复杂度</strong>：</p><ul><li>二分查找的时间复杂度为 <code>O(log (26 * n))</code>。</li><li>每次 <code>check</code> 调用的时间复杂度为 <code>O(n)</code>，因为需要遍历整个字符串。</li><li>因此，总的时间复杂度为 <code>O(n log (26 * n))</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：</p><ul><li>使用了常数级别的额外空间，空间复杂度为 <code>O(1)</code>。</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>二分</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>410小R的数组构造挑战</title>
    <link href="/2025/01/31/410%E5%B0%8FR%E7%9A%84%E6%95%B0%E7%BB%84%E6%9E%84%E9%80%A0%E6%8C%91%E6%88%98/"/>
    <url>/2025/01/31/410%E5%B0%8FR%E7%9A%84%E6%95%B0%E7%BB%84%E6%9E%84%E9%80%A0%E6%8C%91%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><h3 id="问题描述">问题描述</h3><p>小 R 有一个长度为 <code>n</code> 的数组，数组相邻元素的差值最多为 <code>1</code>，即 $|a_i − a_{i+1}| ≤ 1$，且数组中的元素都是正整数，即 $a_i ≥ 1$。现在已知数组的长度为 <code>n</code>，数组的和为 <code>m</code>，小 R 想知道所有符合条件的数组中，第 $p$ 个位置的元素 $a_p$ 的最大值是多少。</p><h4 id="约束条件：">约束条件：</h4><ul><li><code>1 ≤ p ≤ n ≤ m</code></li></ul><h3 id="解题思路">解题思路</h3><ol><li><p><strong>二分查找</strong>：</p><ul><li>使用二分查找在范围 <code>[1, m]</code> 内寻找 <code>a_p</code> 的最大可能值。</li><li><code>l</code> 表示当前范围的下界，<code>r</code> 表示上界。</li></ul></li><li><p><strong>辅助函数 <code>calc(i, v)</code></strong>：</p><ul><li>计算从位置 <code>i</code> 开始，向两边扩展时，每个位置的值如何分配，使得相邻元素差值不超过 <code>1</code>。</li><li>如果 <code>v &gt; i</code>，则左侧的元素从 <code>v - i + 1</code> 递增到 <code>v</code>，形成等差数列。</li><li>如果 <code>v ≤ i</code>，则前 <code>v</code> 个元素递增，剩下的元素为 <code>1</code>。</li><li>可以通过等差数列求和公式$O(1)$计算。</li></ul></li></ol><h3 id="实现代码">实现代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, m: <span class="hljs-built_in">int</span>, p: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">i, v</span>):<br>        <span class="hljs-keyword">if</span> v &gt; i:<br>            <span class="hljs-keyword">return</span> (v + v - i + <span class="hljs-number">1</span>) * i // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> v * (v + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span> + i - v<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">return</span> calc(p, x) + calc(n - p + <span class="hljs-number">1</span>, x) - x<br><br>    l, r = <span class="hljs-number">1</span>, m<br>    <span class="hljs-keyword">while</span> l &lt;= r:<br>        mid = l + r &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> check(mid) &lt;= m:<br>            l = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            r = mid - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> r<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>) == <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>) == <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>) == <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><p><strong>时间复杂度</strong>：</p><ul><li>二分查找的时间复杂度为 <code>O(log m)</code>。每次 <code>check</code> 调用的时间复杂度为 <code>O(1)</code>，因为 <code>calc</code> 函数的计算是常数时间。因此，总的时间复杂度为 <code>O(log m)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：</p><ul><li>使用了常数级别的额外空间，空间复杂度为 <code>O(1)</code>。</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>二分</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>403小N的改数组问题</title>
    <link href="/2025/01/29/403%E5%B0%8FN%E7%9A%84%E6%94%B9%E6%95%B0%E7%BB%84%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/29/403%E5%B0%8FN%E7%9A%84%E6%94%B9%E6%95%B0%E7%BB%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="解题思路">解题思路</h2><p>题目要求在一个正整数的表示中，恰好修改 <code>k</code> 位，使其成为 75 的倍数。要满足 75 的倍数条件，必须满足以下两点：</p><ol><li><p><strong>末两位是 00、25、50 或 75</strong>：这是因为 75 是 25 和 3 的最小公倍数，所以数的末两位需要是上述之一以满足被 25 整除，同时整个数的数字之和需要被 3 整除。</p></li><li><p><strong>数字之和被 3 整除</strong>：这是因为一个数能被 75 整除当且仅当其各位数字之和能被 3 整除。</p></li><li><p><strong>状态参数</strong>：</p><ul><li><code>i</code>: 当前处理的位数位置。</li><li><code>left</code>: 剩余可以修改的位数。</li><li><code>is_num</code>: 是否已经开始形成有效数字（防止前导零）。</li><li><code>sum</code>: 当前数字之和模 3 的值。</li></ul></li><li><p><strong>递归终止条件</strong>：</p><ul><li>当处理到倒数第二位时，检查末两位是否可以组成 <code>00</code>, <code>25</code>, <code>50</code>, <code>75</code> 之一，并且总修改次数与 <code>left</code> 相等，同时数字之和满足被 3 整除的条件。</li></ul></li><li><p><strong>选择每一位数字</strong>：</p><ul><li>对于每一位，根据是否已经开始形成数字 (<code>is_num</code>) 决定当前位可以取的最小值（防止前导零）。</li><li>尝试所有可能的数字（0-9），并相应地更新剩余修改次数和数字之和。</li></ul></li></ol><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> cache<br>mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    n = <span class="hljs-built_in">len</span>(s)<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-meta">    @cache</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i, left, is_num, <span class="hljs-built_in">sum</span></span>):<br>        <span class="hljs-keyword">if</span> left &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> i == n - <span class="hljs-number">2</span>:<br>            ans = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;00&quot;</span>, <span class="hljs-string">&quot;25&quot;</span>, <span class="hljs-string">&quot;50&quot;</span>, <span class="hljs-string">&quot;75&quot;</span>]:<br>                <span class="hljs-keyword">if</span> t == <span class="hljs-string">&quot;00&quot;</span> <span class="hljs-keyword">and</span> is_num == <span class="hljs-literal">False</span>:<br>                    <span class="hljs-keyword">continue</span><br>                cnt = (t[<span class="hljs-number">0</span>] != s[i]) + (t[<span class="hljs-number">1</span>] != s[i + <span class="hljs-number">1</span>])<br>                <span class="hljs-keyword">if</span> cnt != left <span class="hljs-keyword">or</span> (<span class="hljs-built_in">int</span>(t[<span class="hljs-number">0</span>]) + <span class="hljs-built_in">int</span>(t[<span class="hljs-number">1</span>]) + <span class="hljs-built_in">sum</span>) % <span class="hljs-number">3</span>:<br>                    <span class="hljs-keyword">continue</span><br>                ans += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> ans<br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> is_num <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>            res += dfs(i + <span class="hljs-number">1</span>, left - (j != <span class="hljs-built_in">int</span>(s[i])), is_num <span class="hljs-keyword">or</span> j, (<span class="hljs-built_in">sum</span> + j) % <span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">return</span> res % mod<br>    res = dfs(<span class="hljs-number">0</span>, k, <span class="hljs-literal">False</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(s = <span class="hljs-string">&quot;3554&quot;</span>, k = <span class="hljs-number">2</span>) == <span class="hljs-number">7</span>)<br>    <span class="hljs-built_in">print</span>(solution(s = <span class="hljs-string">&quot;6005&quot;</span>, k = <span class="hljs-number">1</span>) == <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(solution(s = <span class="hljs-string">&quot;911154&quot;</span>, k = <span class="hljs-number">3</span>) == <span class="hljs-number">187</span>)<br><br><br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><strong>时间复杂度</strong>：由于使用了记忆化搜索，状态数为 <code>n * k * 2 * 3</code>，其中 <code>n</code> 是数字长度，<code>k</code> 是允许修改的位数。同时枚举了每位被修改成哪个数字。因此，时间复杂度为 <code>O(n * k * 2 * 3 * 10)</code>。其中<code>n</code>为字符串<code>s</code>的长度。</li><li><strong>空间复杂度</strong>：同样为 <code>O(n * k * 2 * 3)</code>，用于存储记忆化搜索的状态。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>398小L的元素修改问题</title>
    <link href="/2025/01/29/398%E5%B0%8FL%E7%9A%84%E5%85%83%E7%B4%A0%E4%BF%AE%E6%94%B9%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/29/398%E5%B0%8FL%E7%9A%84%E5%85%83%E7%B4%A0%E4%BF%AE%E6%94%B9%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述">题目描述</h3><p>小 R 拿到了一个数组，她可以进行如下操作：使得一个元素加<code>1</code>，另一个元素减<code>1</code>。她希望最终数组的每个元素大小都在$ [l, r] $的范围内。小 R 想知道，最少需要多少次操作可以达到目标。</p><p>如果无法通过有限次操作使所有元素都落在指定范围内，则返回 <code>-1</code>。</p><h3 id="解题思路">解题思路</h3><p>为了使数组中的所有元素都落在区间 ([l, r]) 内，小 R 可以通过进行以下操作来调整数组：</p><ol><li><p><strong>统计调整需求</strong>：</p><ul><li>遍历数组，计算所有小于 (l) 的元素需要增加的总次数（记为 <code>cnt1</code>）。</li><li>计算所有大于 (r) 的元素需要减少的总次数（记为 <code>cnt2</code>）。</li></ul></li><li><p><strong>验证总和条件</strong>：</p><ul><li><p>计算数组元素的总和 (s)。</p></li><li><p>检查是否满足 (l \times n \leq s \leq r \times n)。</p><ul><li>如果不满足，说明无法通过有限次操作将所有元素调整到指定范围内，返回 <code>-1</code>。</li></ul></li><li><p>如果满足总和条件，所需的最小操作次数为 <code>cnt1</code> 和 <code>cnt2</code> 中的较大值。这是因为每一次操作可以同时满足一个增加和一个减少的需求。</p></li></ul></li></ol><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, l: <span class="hljs-built_in">int</span>, r: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    cnt1 = cnt2 = s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a:<br>        <span class="hljs-keyword">if</span> x &lt; l:<br>            cnt1 += l - x<br>        <span class="hljs-keyword">if</span> x &gt; r:<br>            cnt2 += x - r<br>        s += x<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(cnt1, cnt2) <span class="hljs-keyword">if</span> l * n &lt;= s &lt;= r * n <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">2</span>, l = <span class="hljs-number">3</span>, r = <span class="hljs-number">5</span>, a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]) == -<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">3</span>, l = <span class="hljs-number">4</span>, r = <span class="hljs-number">6</span>, a = [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>]) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">4</span>, l = <span class="hljs-number">2</span>, r = <span class="hljs-number">8</span>, a = [<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>]) == <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><p>时间复杂度：$O(n)$，其中$ n $是数组的长度。<br>空间复杂度：$O(1)$。</p>]]></content>
    
    
    
    <tags>
      
      <tag>贪心</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>433数组元素最小操作次数问题</title>
    <link href="/2025/01/27/433%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/27/433%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><h3 id="问题分析">问题分析</h3><p>我们需要将数组中的所有元素通过一系列“除以 2 并向下取整”的操作变得相等。目标是找到最少的操作次数使得所有元素相等。</p><h3 id="解题思路">解题思路</h3><ol><li><p><strong>记录每个数及其通过不断除以 2 后可能出现的值：</strong></p><ul><li>对于数组中的每个元素 <code>x</code>，记录它本身及其通过不断除以 2 后得到的所有可能值。</li><li>同时记录将 <code>x</code> 变成这些值所需的操作次数。</li></ul></li><li><p><strong>使用哈希表统计：</strong></p><ul><li>使用两个字典 <code>cnt</code> 和 <code>d</code>：<ul><li><code>cnt[x]</code>：记录值 <code>x</code> 出现的次数，即有多少个元素可以通过某些操作变成 <code>x</code>。</li><li><code>d[x]</code>：记录所有将元素变成 <code>x</code> 所需的总操作次数。</li></ul></li></ul></li><li><p><strong>遍历所有可能的目标值，找到最小的总操作次数：</strong></p><ul><li>遍历字典 <code>cnt</code> 中的所有键 <code>x</code>，如果 <code>cnt[x]</code> 等于数组的长度 <code>n</code>，表示所有元素都可以被转换为 <code>x</code>。</li><li>在满足条件的 <code>x</code> 中，选择 <code>d[x]</code> 最小的作为答案。</li></ul></li></ol><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    d = defaultdict(<span class="hljs-built_in">int</span>)<br>    cnt = defaultdict(<span class="hljs-built_in">int</span>)<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a:<br>        cnt[x] += <span class="hljs-number">1</span><br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> x:<br>            i += <span class="hljs-number">1</span><br>            x //= <span class="hljs-number">2</span><br>            cnt[x] += <span class="hljs-number">1</span><br>            d[x] += i<br>    res = <span class="hljs-built_in">min</span>(d[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cnt <span class="hljs-keyword">if</span> cnt[x] == n)<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">4</span>, a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]) == <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">1</span>, a = [<span class="hljs-number">114514</span>]) == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">5</span>, a = [<span class="hljs-number">16</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]) == <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><strong>时间复杂度：</strong> O(n log MAX)，其中 <code>n</code> 是数组的长度，<code>MAX</code> 是数组中最大元素的值。因为对于每个元素，最多需要进行 log(MAX) 次除以 2 的操作。</li><li><strong>空间复杂度：</strong> O(n log MAX)，用于存储所有可能的中间值及其对应的操作次数。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>稀土掘金</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>448最大连续子数组和问题</title>
    <link href="/2025/01/27/448%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/27/448%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1>题解</h1><h2 id="问题描述">问题描述</h2><p>给定一个整数数组，允许最多进行一次修改，将任意一个元素修改为任意给定的值 <code>x</code>。求经过修改后，能够得到的连续子数组的最大和。</p><h2 id="解题思路">解题思路</h2><p>一个比较经典的动态规划，需要注意的是题目要求的是必须恰好修改一次。</p><ol><li><p><strong>特殊情况处理</strong>：</p><ul><li>当数组长度为 1 时，返回 <code>x</code>。</li><li>如果数组中所有元素都小于等于 0，返回数组中最大的元素和 <code>x</code> 中的较大者。</li></ul></li><li><p><strong>前缀和计算</strong>：</p><ul><li>使用后缀数组 <code>suf</code>，其中 <code>suf[i]</code> 表示从第 <code>i</code> 个元素开始的最大子数组和。</li><li>从数组末尾向前遍历，更新 <code>suf[i]</code> 为 <code>suf[i+1] + a[i-1]</code> 和 <code>0</code> 的较大值。</li></ul></li><li><p><strong>遍历数组并计算结果</strong>：</p><ul><li>使用变量 <code>f</code> 来记录当前的最大子数组和。</li><li>对于每个位置 <code>i</code>，计算将 <code>a[i-1]</code> 修改为 <code>x</code> 后的最大子数组和，更新结果 <code>res</code>。</li><li>更新 <code>f</code> 为 <code>f + a[i-1]</code> 和 <code>0</code> 的较大值，以便下一次迭代使用。</li></ul></li></ol><h2 id="代码解析">代码解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, x: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> x<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>(i &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(a + [x])<br>    suf = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        suf[i] = <span class="hljs-built_in">max</span>(suf[i + <span class="hljs-number">1</span>] + a[i - <span class="hljs-number">1</span>], <span class="hljs-number">0</span>)<br>    res = f = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        res = <span class="hljs-built_in">max</span>(res, f + suf[i + <span class="hljs-number">1</span>] + x, f, suf[i + <span class="hljs-number">1</span>])<br>        f = <span class="hljs-built_in">max</span>(f + a[i - <span class="hljs-number">1</span>], <span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">5</span>, x = <span class="hljs-number">10</span>, a = [<span class="hljs-number">5</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">5</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">2</span>]) == <span class="hljs-number">15</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">2</span>, x = -<span class="hljs-number">3</span>, a = [-<span class="hljs-number">5</span>, -<span class="hljs-number">2</span>]) == -<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">6</span>, x = <span class="hljs-number">10</span>, a = [<span class="hljs-number">4</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">1</span>]) == <span class="hljs-number">15</span>)<br><br></code></pre></td></tr></table></figure><h2 id="复杂度分析">复杂度分析</h2><ul><li><strong>时间复杂度</strong>：O(n)，其中 n 是数组的长度。需要两次遍历数组。</li><li><strong>空间复杂度</strong>：O(n)，用于存储后缀数组 <code>suf</code>。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>贪心</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>412小S的子序列平均数之和</title>
    <link href="/2025/01/27/412%E5%B0%8FS%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97%E5%B9%B3%E5%9D%87%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2025/01/27/412%E5%B0%8FS%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97%E5%B9%B3%E5%9D%87%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>小 S 得到了一个由 <code>n</code> 个元素组成的数组，她想求出所有子序列的平均数之和。由于子序列的数量非常多，因此需要对结果取模 (10^9 + 7) 来避免结果过大。子序列是从原数组中选择部分元素，保持原数组的顺序形成的新数组。</p><p>你需要输出所有子序列的平均数之和对 (10^9 + 7) 取模的值。</p><p>可以证明，最终的答案一定是一个有理数 (\frac{a}{b})，对 (p) 取模的意义是在 ([0, p-1]) 区间找到一个满足 (x \cdot b \mod p = a) 的 (x)。</p><h3 id="解题思路">解题思路</h3><p>题目要求计算所有子序列的平均数之和。由于子序列的数量指数级增长，直接枚举所有子序列会导致时间复杂度过高。因此，我们需要找到一种高效的方法来计算结果。</p><p>考虑到子序列的平均数可以表示为子序列元素之和除以子序列的长度，我们可以将问题转化为计算所有子序列元素之和的加权和，其中权重是子序列长度的倒数。</p><p>具体步骤如下：</p><ol><li><p><strong>组合数学</strong>：对于长度为<code>i</code>的子序列，一共有<code>C(n, i)</code>中，而每个元素在子序列中的出现的次数为<code>C(n-1, i-1)</code>，因此可以直接计算出子序列元素之和的加权和。</p></li><li><p><strong>预处理组合数</strong>：为了快速计算组合数 <code>C(n, k)</code>，我们提前计算阶乘和逆阶乘，并利用模反元素进行组合数的计算。</p></li></ol><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>N = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>)<br>fac = [<span class="hljs-number">1</span>] * N<br>infac = [<span class="hljs-number">1</span>] * N<br>mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, N):<br>    fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod<br>    infac[i] = infac[i - <span class="hljs-number">1</span>] * <span class="hljs-built_in">pow</span>(i, mod - <span class="hljs-number">2</span>, mod) % mod<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">comb</span>(<span class="hljs-params">n, k</span>):<br>    <span class="hljs-keyword">return</span> fac[n] * infac[n - k] % mod * infac[k] % mod<br><br>inv = <span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">pow</span>(x, mod - <span class="hljs-number">2</span>, mod)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, arr: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    s = <span class="hljs-built_in">sum</span>(arr)<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        res = (res + s * comb(n - <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>) * inv(i)) % mod<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) == <span class="hljs-number">14</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">2</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>]) == <span class="hljs-number">500000008</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]) == <span class="hljs-number">15</span>)<br><br><br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><p>时间复杂度: $O(n)$, 预处理组合数的时间复杂度为$O(n)$，计算结果的时间复杂度为$O(n)$。<code>pow</code>可以再预处理一下。<br>空间复杂度: $O(n)$</p>]]></content>
    
    
    
    <tags>
      
      <tag>组合数学</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>606画作</title>
    <link href="/2025/01/25/606%E7%94%BB%E4%BD%9C/"/>
    <url>/2025/01/25/606%E7%94%BB%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>在一个充满色彩的艺术画廊里，小艾拥有 <code>n</code> 幅长度不一的画作，每幅画的长度都是从 <code>1</code> 到 <code>n</code> 的自然数。小艾的目标是将这些画作以特定的顺序摆放，并确保从入口处可以清晰地恰好看到 <code>k</code> 幅画作。判断某幅画是否可见的标准是：它左侧的画作中没有比它更高的遮挡物。</p><p>小艾想要计算出所有可能的摆放方式，以满足上述可见性条件。由于结果可能会非常庞大，需要将最终的答案对 <code>10^9 + 7</code> 进行取模后输出。</p><p><strong>约束条件：</strong></p><ul><li>时间限制：3 秒</li><li>数据范围为 <code>1 ≤ k ≤ n ≤ 3000</code></li></ul><h3 id="解题思路">解题思路</h3><p>这道题目可以通过动态规划来解决。定义 <code>dp[i][j]</code> 表示前 <code>i</code> 幅画中恰好有 <code>j</code> 幅画可见的排列数。对于每一幅画，我们有两种选择：</p><ol><li><strong>当前画作是最高的</strong>：此时它一定是可见的，因此 <code>dp[i][j] += dp[i-1][j-1]</code>。</li><li><strong>当前画作不是最高的</strong>：这样它不会被看到，除了最高的还有 <code>i</code> 种选择来保持不是最高的状态，因此 <code>dp[i][j] += dp[i-1][j] * i</code>。</li></ol><p>为了优化空间复杂度，可以使用滚动数组，仅保留前一状态和当前状态。</p><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br>mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    pre = [<span class="hljs-number">0</span>] * (k + <span class="hljs-number">1</span>)<br>    pre[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        cur = [<span class="hljs-number">0</span>] * (k + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>):<br>            cur[j] = (pre[j - <span class="hljs-number">1</span>] + i * pre[j]) % mod<br>        pre = cur.copy()<br>    <span class="hljs-keyword">return</span> pre[k]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(n=<span class="hljs-number">4</span>, k=<span class="hljs-number">2</span>) == <span class="hljs-number">11</span>)<br>    <span class="hljs-built_in">print</span>(solution(n=<span class="hljs-number">6</span>, k=<span class="hljs-number">3</span>) == <span class="hljs-number">225</span>)<br>    <span class="hljs-built_in">print</span>(solution(n=<span class="hljs-number">7</span>, k=<span class="hljs-number">4</span>) == <span class="hljs-number">735</span>)<br>    <span class="hljs-built_in">print</span>(solution(n=<span class="hljs-number">9</span>, k=<span class="hljs-number">5</span>) == <span class="hljs-number">22449</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>602金银珠宝的数值</title>
    <link href="/2025/01/25/602%E9%87%91%E9%93%B6%E7%8F%A0%E5%AE%9D%E7%9A%84%E6%95%B0%E5%80%BC/"/>
    <url>/2025/01/25/602%E9%87%91%E9%93%B6%E7%8F%A0%E5%AE%9D%E7%9A%84%E6%95%B0%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>在一个神秘的竞技场中，勇敢的探险者小青拥有两个宝箱：一个宝箱里装满了 n 个金银珠宝的数值，另一个则是一个包含 m 个神秘符文的序列。小青面临着一个挑战：在接下来的 m 轮中，他必须在这两者之间做出明智的选择，以获得最高的财富。</p><p>在每一轮（第 i 轮）中，小青可以选择从宝箱的最上面或最下面取出一个珠宝 x。然后，他会将这个珠宝的价值乘以对应的符文 c[i]，并把结果累加到他的总财富中。被取出的珠宝将从宝箱中消失，接着小青会继续下一轮操作，直到完成 m 轮。</p><p>你的任务是帮助小青计算，在完成 m 轮挑战后，他可以获得的最高财富是多少。</p><p><strong>输入：</strong></p><ul><li><code>stones</code>：宝箱中 n 个金银珠宝的数值</li><li><code>c</code>：m 个神秘符文</li></ul><p><strong>约束条件：</strong></p><ul><li>时间限制：3 秒</li><li>1 ≤ m ≤ n ≤ 2000</li><li>-1000 ≤ stones[i], c[i] ≤ 1000</li></ul><h3 id="解题思路">解题思路</h3><p>这道题目可以通过动态规划和记忆化搜索来解决。小青在每一轮可以选择从宝箱的最上面或最下面取出一个珠宝，并将其价值乘以对应的符文，累加到总财富中。目标是最大化总财富。</p><p>使用递归加缓存（memoization）的方式来避免重复计算。定义一个函数 <code>dfs(i, j)</code>，表示在当前选择了 前<code>i</code> 个左端元素和 后<code>j</code> 个右端元素后的最大财富。</p><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> cache<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> setrecursionlimit<br>setrecursionlimit(<span class="hljs-number">4010</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">stones: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], c: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    n, m = <span class="hljs-built_in">len</span>(stones), <span class="hljs-built_in">len</span>(c)<br><span class="hljs-meta">    @cache</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i, j</span>):<br>        <span class="hljs-keyword">if</span> n - (j - i + <span class="hljs-number">1</span>) &gt;= m:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dfs(i + <span class="hljs-number">1</span>, j) + stones[i] * c[n - (j - i + <span class="hljs-number">1</span>)], dfs(i, j - <span class="hljs-number">1</span>) + stones[j] * c[n - (j - i + <span class="hljs-number">1</span>)])<br>    <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(stones=[-<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], c=[<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]) == <span class="hljs-number">25</span>)<br>    <span class="hljs-built_in">print</span>(solution(stones=[<span class="hljs-number">6</span>, -<span class="hljs-number">7</span>, <span class="hljs-number">1</span>], c=[<span class="hljs-number">4</span>, -<span class="hljs-number">3</span>]) == <span class="hljs-number">45</span>)<br>    <span class="hljs-built_in">print</span>(solution(stones=[<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">9</span>], c=[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">5</span>]) == <span class="hljs-number">40</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>记忆化搜索</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>600数组递增操作问题</title>
    <link href="/2025/01/25/600%E6%95%B0%E7%BB%84%E9%80%92%E5%A2%9E%E6%93%8D%E4%BD%9C%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/25/600%E6%95%B0%E7%BB%84%E9%80%92%E5%A2%9E%E6%93%8D%E4%BD%9C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>在一个神秘的森林里，两个探险家，小智和小璇，面临着一项艰巨的任务。他们拥有两个魔法宝箱，分别装有整数列表 <code>list1</code> 和 <code>list2</code>。他们的目标是通过某种方式将 <code>list1</code> 转变为一个严格递增的序列。</p><p>他们可以执行的操作是：在任意时刻，选择 <code>list1</code> 中的一个元素和 <code>list2</code> 中的一个元素进行替换。具体来说，他们可以选择 <code>list1</code> 的某个位置 <code>i</code> 和 <code>list2</code> 的某个位置 <code>j</code>，并将 <code>list1[i]</code> 设置为 <code>list2[j]</code>。</p><p>现在，小智和小璇需要你帮助他们计算出，通过最少的操作次数，是否可以将 <code>list1</code> 变为严格递增的序列。如果可以做到，请返回所需的最少操作次数；如果不可能，请返回 <code>-1</code>。</p><h3 id="测试样例">测试样例</h3><p>样例 1：</p><p>输入：<code>list1 = [3, 8, 4, 10, 11]</code>, <code>list2 = [2, 7, 5, 9]</code><br>输出：<code>1</code></p><p>样例 2：</p><p>输入：<code>list1 = [5, 9, 7, 11]</code>, <code>list2 = [1, 6, 8, 12]</code><br>输出：<code>1</code></p><p>样例 3：</p><p>输入：<code>list1 = [1, 3, 4, 6]</code>, <code>list2 = [2, 5]</code><br>输出：<code>0</code></p><h2 id="题解">题解</h2><p>这道题目要求通过最小的操作次数，将 <code>list1</code> 转变为一个严格递增的序列。可以选择将 <code>list1</code> 中的任意元素替换为 <code>list2</code> 中的任意元素。</p><h3 id="解题思路">解题思路</h3><p>使用动态规划来解决这个问题。维护一个字典 <code>pre</code>，其中键表示当前序列的最后一个元素，值表示达到该值并且序列是严格递增的所需的最小操作次数。</p><ol><li><strong>初始化</strong>：将 <code>pre</code> 初始化为 <code>&#123; -inf: 0 &#125;</code>，表示在序列开始前，最后一个元素为负无穷，操作次数为 0。</li><li><strong>遍历 <code>list1</code></strong>：对于 <code>list1</code> 中的每一个元素 <code>x</code>，<ul><li>创建一个新的字典 <code>cur</code> 来记录当前状态。</li><li>对于 <code>pre</code> 中的每一个状态 <code>k</code>，<ul><li>如果 <code>x &gt; k</code>，则可以不替换，直接更新 <code>cur[x]</code>。</li><li>使用二分查找找到 <code>list2</code> 中第一个大于 <code>k</code> 的元素 <code>a[j]</code>，将 <code>cur[a[j]]</code> 更新为 <code>v + 1</code>。</li></ul></li></ul></li><li><strong>更新状态</strong>：将 <code>pre</code> 更新为 <code>cur</code> 的副本。</li><li><strong>结果</strong>：遍历完成后，如果 <code>cur</code> 不为空，返回最小的操作次数，否则返回 -1。</li></ol><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><span class="hljs-keyword">from</span> bisect <span class="hljs-keyword">import</span> bisect_right<br><br>inf = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;inf&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">list1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], list2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    a = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>(list2))<br>    pre = defaultdict(<span class="hljs-keyword">lambda</span>: inf)<br>    pre[-inf] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1):<br>        cur = defaultdict(<span class="hljs-keyword">lambda</span>: inf)<br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> pre.items():<br>            <span class="hljs-keyword">if</span> x &gt; k:<br>                cur[x] = <span class="hljs-built_in">min</span>(cur[x], v)<br>            j = bisect_right(a, k)<br>            <span class="hljs-keyword">if</span> j &lt; <span class="hljs-built_in">len</span>(a):<br>                cur[a[j]] = <span class="hljs-built_in">min</span>(cur[a[j]], v + <span class="hljs-number">1</span>)<br>        pre = cur.copy()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cur:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(cur.values())<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(list1=[<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>], list2=[<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>]) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(list1=[<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>], list2=[<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>]) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(list1=[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>], list2=[<span class="hljs-number">2</span>, <span class="hljs-number">5</span>]) == <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><strong>时间复杂度</strong>：$O(n ^ 2 log m)$，其中 n 是 <code>list1</code> 的长度，m 是 <code>list2</code> 的长度。主要由排序和二分查找操作决定。</li><li><strong>空间复杂度</strong>：$O(m)$，用于存储动态规划的状态。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>稀土掘金</tag>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>357区间和匹配问题</title>
    <link href="/2025/01/24/357%E5%8C%BA%E9%97%B4%E5%92%8C%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/24/357%E5%8C%BA%E9%97%B4%E5%92%8C%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>小 U 手上有两个长度为 n 的数组 A 和 B。她需要找到所有的区间[L, R]，满足在这个区间内，数组 A 的元素和在范围[La, Ra]之间，同时数组 B 的元素和在范围[Lb, Rb]之间。你能帮助她计算满足条件的区间数量吗？</p><h3 id="解题思路">解题思路</h3><ol><li><p><strong>前缀和预处理</strong></p><ul><li>使用前缀和数组 SA 和 SB 分别存储数组 A 和 B 的累积和</li></ul></li><li><p><strong>二分查找</strong></p><ul><li>遍历每个右端点 i</li><li>对于每个右端点，需要找到合适的左端点范围</li><li>使用二分查找快速定位满足条件的左端点区间</li></ul></li><li><p><strong>区间条件转换</strong></p><ul><li>对于区间[L,R]，其和必须在[La,Ra]之间</li><li>可以转换为: SA[R] - SA[L-1] ∈ [La,Ra]</li><li>进一步转换为: SA[R] - Ra ≤ SA[L-1] ≤ SA[R] - La</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">N: <span class="hljs-built_in">int</span>, A: <span class="hljs-built_in">list</span>, B: <span class="hljs-built_in">list</span>, La: <span class="hljs-built_in">int</span>, Ra: <span class="hljs-built_in">int</span>, Lb: <span class="hljs-built_in">int</span>, Rb: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 计算前缀和数组</span><br>    SA = <span class="hljs-built_in">list</span>(accumulate(A, initial=<span class="hljs-number">0</span>))  <span class="hljs-comment"># A的前缀和</span><br>    SB = <span class="hljs-built_in">list</span>(accumulate(B, initial=<span class="hljs-number">0</span>))  <span class="hljs-comment"># B的前缀和</span><br>    res = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 遍历每个右端点</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(A) + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 对数组A，计算左端点应满足的值域范围</span><br>        x, y = SA[i] - La, SA[i] - Ra  <span class="hljs-comment"># y &lt;= SA[L-1] &lt;= x</span><br>        l1, r1 = bisect_left(SA, y), bisect_right(SA, x)<br><br>        <span class="hljs-comment"># 对数组B，计算左端点应满足的值域范围</span><br>        x, y = SB[i] - Lb, SB[i] - Rb  <span class="hljs-comment"># y &lt;= SB[L-1] &lt;= x</span><br>        l2, r2 = bisect_left(SB, y), bisect_right(SB, x)<br><br>        <span class="hljs-comment"># 取两个数组共同满足的左端点范围</span><br>        l = <span class="hljs-built_in">max</span>(l1, l2)  <span class="hljs-comment"># 左端点的最大值</span><br>        r = <span class="hljs-built_in">min</span>(r1, r2)  <span class="hljs-comment"># 右端点的最小值</span><br>        res += <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, r - l)  <span class="hljs-comment"># 累加满足条件的区间数</span><br><br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li>时间复杂度：O(N log N)<ul><li>前缀和计算：O(N)</li><li>对每个右端点进行二分查找：O(N log N)</li></ul></li><li>空间复杂度：O(N)<ul><li>需要存储两个前缀和数组</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>前缀和</tag>
      
      <tag>稀土掘金</tag>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>349删除路径后的最短路问题</title>
    <link href="/2025/01/24/349%E5%88%A0%E9%99%A4%E8%B7%AF%E5%BE%84%E5%90%8E%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/24/349%E5%88%A0%E9%99%A4%E8%B7%AF%E5%BE%84%E5%90%8E%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>小 F 正在探索一个有 <code>n</code> 个点的地图，其中每个点都有对应的二维坐标 <code>(xi, yi)</code>。起点是第 <code>s</code> 个点，终点是第 <code>t</code> 个点，原本所有点之间都有一条线段，表示可以通行，并且长度为欧几里得距离。但是由于某些意外，起点 <code>s</code> 和终点 <code>t</code> 之间的直接通行路径被删除了。小 F 希望你帮忙计算从 <code>s</code> 到 <code>t</code> 的最短路径，允许经过其他点，但不能直接通过删除的那条线。</p><p>需要注意的是，点 <code>i, j</code> 之间的欧几里得距离计算公式为：</p><p>[ \text{distance} = \sqrt{(x_i - x_j)^2 + (y_i - y_j)^2} ]</p><p>你需要输出从起点 <code>s</code> 到终点 <code>t</code> 的最短距离，结果需要四舍五入到小数点后两位。</p><h3 id="题解">题解</h3><p>我们需要计算从起点 <code>s</code> 到终点 <code>t</code> 的最短路径，允许经过其他点，但不能直接通过删除的那条线。由于任意两个点之间都有线段连接，可以通过枚举中间点来计算最短距离</p><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, s: <span class="hljs-built_in">int</span>, t: <span class="hljs-built_in">int</span>, x: <span class="hljs-built_in">list</span>, y: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    s -= <span class="hljs-number">1</span><br>    t -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dis</span>(<span class="hljs-params">p, q</span>):<br>        dx = x[p] - x[q]<br>        dy = y[p] - y[q]<br>        <span class="hljs-keyword">return</span> sqrt(dx * dx + dy * dy)<br><br>    res = <span class="hljs-built_in">min</span>(dis(s, i) + dis(t, i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n) <span class="hljs-keyword">if</span> i != s <span class="hljs-keyword">and</span> i != t)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;res:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(n=<span class="hljs-number">5</span>, s=<span class="hljs-number">1</span>, t=<span class="hljs-number">5</span>, x=[<span class="hljs-number">17253</span>, <span class="hljs-number">25501</span>, <span class="hljs-number">28676</span>, <span class="hljs-number">30711</span>, <span class="hljs-number">18651</span>], y=[<span class="hljs-number">15901</span>, <span class="hljs-number">15698</span>, <span class="hljs-number">32041</span>, <span class="hljs-number">11015</span>, <span class="hljs-number">9733</span>]) == <span class="hljs-string">&#x27;17333.65&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(solution(n=<span class="hljs-number">4</span>, s=<span class="hljs-number">2</span>, t=<span class="hljs-number">4</span>, x=[<span class="hljs-number">5000</span>, <span class="hljs-number">12000</span>, <span class="hljs-number">8000</span>, <span class="hljs-number">14000</span>], y=[<span class="hljs-number">3000</span>, <span class="hljs-number">9000</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">4000</span>]) == <span class="hljs-string">&#x27;15652.48&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(solution(n=<span class="hljs-number">6</span>, s=<span class="hljs-number">3</span>, t=<span class="hljs-number">6</span>, x=[<span class="hljs-number">20000</span>, <span class="hljs-number">22000</span>, <span class="hljs-number">24000</span>, <span class="hljs-number">26000</span>, <span class="hljs-number">28000</span>, <span class="hljs-number">30000</span>], y=[<span class="hljs-number">15000</span>, <span class="hljs-number">13000</span>, <span class="hljs-number">11000</span>, <span class="hljs-number">17000</span>, <span class="hljs-number">19000</span>, <span class="hljs-number">21000</span>]) == <span class="hljs-string">&#x27;11772.70&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><p>时间复杂度：$O(n)$，其中 $n$ 是点的数量。我们需要遍历所有点来计算最短路径。<br>空间复杂度：$O(1)$。</p>]]></content>
    
    
    
    <tags>
      
      <tag>枚举</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>348分割数字串获取3的倍数问题</title>
    <link href="/2025/01/24/348%E5%88%86%E5%89%B2%E6%95%B0%E5%AD%97%E4%B8%B2%E8%8E%B7%E5%8F%963%E7%9A%84%E5%80%8D%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/24/348%E5%88%86%E5%89%B2%E6%95%B0%E5%AD%97%E4%B8%B2%E8%8E%B7%E5%8F%963%E7%9A%84%E5%80%8D%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题理解">问题理解</h3><p>我们需要将一个数字串分割成多个子串，使得这些子串中是 3 的倍数的数量最大化。每个子串不能包含前导零（除了数字 0 本身）。</p><ul><li>使用一个数组 <code>f</code> 来记录以每个位置结尾的子串中，最多有多少个是 3 的倍数的子串。</li><li>使用一个数组 <code>last</code> 来记录每个余数（0, 1, 2）最后一次出现的位置。</li></ul><h3 id="算法步骤">算法步骤</h3><ol><li><p><strong>初始化</strong>：</p><ul><li>初始化 <code>last</code> 数组为 <code>[-1, -1, -1]</code>，表示每个余数（0, 1, 2）还没有出现过。</li><li>初始化 <code>f</code> 数组为 <code>[0] * n</code>，其中 <code>n</code> 是字符串的长度。</li></ul></li><li><p><strong>处理第一个字符</strong>：</p><ul><li>计算第一个字符的余数，并更新 <code>last</code> 数组。</li><li>如果第一个字符的余数是 0，则 <code>f[0]</code> 设为 1，表示第一个字符本身就是一个 3 的倍数。</li></ul></li><li><p><strong>动态规划更新</strong>：</p><ul><li>从第二个字符开始遍历字符串。</li><li>对于每个字符，计算当前字符与前面字符的和的余数 <code>j</code>。</li><li>如果 <code>last[j]</code> 不是 <code>-1</code>，说明前面有一个位置的余数与当前余数相同，可以形成一个 3 的倍数的子串，更新 <code>f[i]</code>。</li><li>如果 <code>j</code> 是 0，说明当前字符本身就是一个 3 的倍数，更新 <code>f[i]</code>。</li><li>更新 <code>last[j]</code> 为当前位置 <code>i</code>。</li></ul></li><li><p><strong>返回结果</strong>：</p><ul><li>最终结果是 <code>f</code> 数组的最后一个元素 <code>f[-1]</code>，表示整个字符串中最多有多少个是 3 的倍数的子串。</li></ul></li></ol><h3 id="解题代码">解题代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    n = <span class="hljs-built_in">len</span>(s)<br>    last = [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>]<br>    last[<span class="hljs-built_in">int</span>(s[<span class="hljs-number">0</span>]) % <span class="hljs-number">3</span>] = <span class="hljs-number">0</span><br>    f = [<span class="hljs-number">0</span>] * n<br>    <span class="hljs-keyword">if</span> last[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>:<br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    j = <span class="hljs-built_in">int</span>(s[<span class="hljs-number">0</span>]) % <span class="hljs-number">3</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>        f[i] = f[i - <span class="hljs-number">1</span>]<br>        j = (j + <span class="hljs-built_in">int</span>(s[i])) % <span class="hljs-number">3</span><br>        <span class="hljs-keyword">if</span> last[j] &gt;= <span class="hljs-number">0</span>:<br>            f[i] = <span class="hljs-built_in">max</span>(f[i], f[last[j]] + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">elif</span> j == <span class="hljs-number">0</span>:<br>            f[i] = <span class="hljs-built_in">max</span>(f[i], <span class="hljs-number">1</span>)<br>        last[j] = i<br>    <span class="hljs-keyword">return</span> f[-<span class="hljs-number">1</span>]<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;1123&quot;</span>) == <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;300&quot;</span>) == <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;987654321&quot;</span>) == <span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><p>$s$ 的长度是 $n$，时间复杂度是 $O(n)$，空间复杂度是 $O(n)$。</p>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>334二进制尾零子数组问题</title>
    <link href="/2025/01/21/334%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%B0%BE%E9%9B%B6%E5%AD%90%E6%95%B0%E7%BB%84%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/21/334%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%B0%BE%E9%9B%B6%E5%AD%90%E6%95%B0%E7%BB%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1>题目描述</h1><p>要求在一个由正整数组成的数组中找到一个最短的连续子数组，使得该子数组中所有元素的乘积在二进制表示中至少有 <code>k</code> 个连续的 <code>0</code>，即乘积是 <code>2^k</code> 的倍数。如果不存在这样的子数组，则返回 <code>-1</code>。</p><h3 id="解题思路">解题思路</h3><ol><li><p><strong>因子 2 的计数</strong>：</p><ul><li>乘积为 <code>2^k</code> 的倍数，等价于乘积中包含至少 <code>k</code> 个因子 2。</li></ul></li><li><p><strong>滑动窗口</strong>：</p><ul><li>使用双指针<code>l</code>和<code>r</code>来维护一个滑动窗口。<code>l</code>表示窗口的左端，<code>r</code>表示窗口的右端。</li><li>遍历数组，逐步扩大右端<code>r</code>，将当前元素的因子 2 数量加到<code>cnt2</code>。</li><li>当<code>cnt2</code>达到或超过<code>k</code>时，尝试缩小左端<code>l</code>，以找到最短满足条件的子数组长度。每次缩小时，减去左端元素的因子 2 数量，并移动左指针。</li></ul></li></ol><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">div</span>(<span class="hljs-params">x</span>):<br>        cnt2 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            x //= <span class="hljs-number">2</span><br>            cnt2 += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> cnt2<br>    res = n + <span class="hljs-number">1</span><br>    cnt2 = l = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> r, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(a):<br>        cnt2 += div(x)<br>        <span class="hljs-keyword">while</span> cnt2 - div(a[l]) &gt;= k <span class="hljs-keyword">and</span> l &lt; r:<br>            cnt2 -= div(a[l])<br>            l += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> cnt2 &gt;= k:<br>            res = <span class="hljs-built_in">min</span>(res, r - l + <span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">return</span> res <span class="hljs-keyword">if</span> res &lt; n + <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">6</span>, k = <span class="hljs-number">3</span>, a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]) == <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">5</span>, k = <span class="hljs-number">2</span>, a = [<span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>]) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">4</span>, k = <span class="hljs-number">4</span>, a = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]) == -<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中<code>n</code>是数组的长度。每个元素最多被遍历两次（一次作为右端，一次作为左端）。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数级别的额外空间。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>稀土掘金</tag>
      
      <tag>双指针</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>328不大于n的好数计数问题</title>
    <link href="/2025/01/21/328%E4%B8%8D%E5%A4%A7%E4%BA%8En%E7%9A%84%E5%A5%BD%E6%95%B0%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/21/328%E4%B8%8D%E5%A4%A7%E4%BA%8En%E7%9A%84%E5%A5%BD%E6%95%B0%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>小 C 定义一个正整数为“好数”，当且仅当这个数的相邻数位都不相同。比如，1024 和 121 是好数，但 233 不是。现在小 C 想知道，不大于给定整数 n 的好数有多少个。结果对 $10^9 + 7$ 取模。</p><h3 id="解题思路">解题思路</h3><ol><li><p><strong>转换为字符串</strong>：首先将整数 <code>n</code> 转换为字符串 <code>s</code>，以便逐位处理。</p></li><li><p><strong>定义状态</strong>：</p><ul><li><code>i</code>：当前处理到第 <code>i</code> 位。</li><li><code>pre</code>：前一位的数字，用于判断当前位是否与前一位不同。</li><li><code>is_limit</code>：当前位是否受到上界的限制，即前面的数字是否已经与 <code>n</code> 的对应位相同。</li><li><code>is_num</code>：当前是否已经开始构造数字（避免前导零）。</li></ul></li><li><p><strong>递归函数 <code>dfs</code></strong>：</p><ul><li>当 <code>i</code> 等于 <code>len(s)</code> 时，表示所有位都已经处理完毕，如果已经开始构造数字，则返回 <code>1</code>，否则返回 <code>0</code>。</li><li>如果尚未开始构造数字，可以选择跳过当前位（即不选择任何数字）。</li><li>对于每一位，可以选择从 <code>0</code> 到 <code>9</code>（根据 <code>is_limit</code> 确定上界）。</li><li>选择的数字 <code>d</code> 需要与前一位数字 <code>pre</code> 不同。</li><li>递归处理下一位，更新状态参数。</li></ul></li><li><p><strong>记忆化搜索</strong>：使用 <code>@cache</code> 装饰器对递归函数进行记忆化，以避免重复计算，提高效率。</p></li><li><p><strong>结果</strong>：最终返回符合条件的“好数”数量，对 <code>10^9 + 7</code> 取模。</p></li></ol><h3 id="代码解析">代码解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> cache<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    s = <span class="hljs-built_in">str</span>(n)<br><br><span class="hljs-meta">    @cache</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i, pre, is_limit, is_num</span>):<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(s):<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(is_num)<br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_num:<br>            res = dfs(i + <span class="hljs-number">1</span>, pre, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>)<br>        low = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> is_num <span class="hljs-keyword">else</span> <span class="hljs-number">1</span><br>        up = <span class="hljs-built_in">int</span>(s[i]) <span class="hljs-keyword">if</span> is_limit <span class="hljs-keyword">else</span> <span class="hljs-number">9</span><br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(low, up + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> d != pre:<br>                res += dfs(i + <span class="hljs-number">1</span>, d, is_limit <span class="hljs-keyword">and</span> d == up, <span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">return</span> res<br><br>    <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><strong>时间复杂度</strong>：<code>O(len(s) * 10 * 10)</code>，其中 <code>len(s)</code> 是整数 <code>n</code> 的位数，每一位有 <code>10</code> 种选择。动态规划的时间复杂度 = 状态个数 × 单个状态的计算时间</li><li><strong>空间复杂度</strong>：<code>O(len(s) * 10)</code>，用于记忆化存储中间结果。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>稀土掘金</tag>
      
      <tag>数位DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>315K排序算法最小操作次数计算</title>
    <link href="/2025/01/21/315K%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0%E8%AE%A1%E7%AE%97/"/>
    <url>/2025/01/21/315K%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%9C%80%E5%B0%8F%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题目解析">题目解析</h3><p>给定一个长度为 n 的排列，使用 K 排序算法可以通过以下步骤将其从小到大排序：每次从数列中选择最多 K 个位置的数，将它们移除后，将剩余的数左对齐。接着对移除的数进行排序，并将它们放在数列的末尾。需要计算最少需要多少次这样的操作，才能使数列按升序排列。</p><p>需要计算最少需要多少次这样的操作，才能使数列按升序排列。</p><h3 id="解题思路">解题思路</h3><ol><li><p><strong>确定从头开始的最长连续递增子序列</strong>：</p><ul><li>遍历数组，找到数列中按顺序排列的最长连续递增子序列。这部分元素在最终排序中不需要移动。</li><li>记录当前序列中下一个期望出现的数值 <code>i</code>，初始为 <code>1</code>。</li><li>如果当前遍历的数 <code>x</code> 等于 <code>i</code>，则 <code>i</code> 增加一，表示下一个期望的数值。</li></ul></li><li><p><strong>计算最少操作次数</strong>：</p><ul><li>总需要移动的元素数为 <code>n - (i - 1)</code>，即总元素数减去已经按序排列的最长连续子序列的长度。</li><li>每次操作最多可以移动 <code>K</code> 个元素，因此最少的操作次数为 <code>ceil((n - (i - 1)) / K)</code>。为了避免使用浮点运算，可以使用 <code>(move + K - 1) // K</code> 来实现向上取整。</li></ul></li></ol><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    i = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a:<br>        <span class="hljs-keyword">if</span> i == x:<br>            i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> (n - i + k) // k<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">5</span>, k = <span class="hljs-number">1</span>, a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]) == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">5</span>, k = <span class="hljs-number">2</span>, a = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]) == <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">6</span>, k = <span class="hljs-number">3</span>, a = [<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]) == <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><strong>时间复杂度</strong>：O(n)，其中 <code>n</code> 是数列的长度。遍历数列一次即可找到最长连续递增子序列。</li><li><strong>空间复杂度</strong>：O(1)，只使用了常数空间。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>贪心</tag>
      
      <tag>稀土掘金</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成函数</title>
    <link href="/2025/01/20/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    <url>/2025/01/20/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>算法学习</tag>
      
      <tag>生成函数</tag>
      
      <tag>普通生成函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/01/01/test/"/>
    <url>/2025/01/01/test/</url>
    
    <content type="html"><![CDATA[<p>$$<br>A = \begin{bmatrix}<br>a_{11}    &amp; a_{12}    &amp; …    &amp; a_{1n}\<br>a_{21}    &amp; a_{22}    &amp; …    &amp; a_{2n}\<br>a_{31}    &amp; a_{22}    &amp; …    &amp; a_{3n}\<br>\vdots    &amp; \vdots    &amp; \ddots &amp; \vdots\<br>a_{n1}    &amp; a_{n2}    &amp; … &amp; a_{nn}\<br>\end{bmatrix} , b = \begin{bmatrix}<br>b_{1}  \<br>b_{2}  \<br>b_{3}  \<br>\vdots \<br>b_{n}  \<br>\end{bmatrix}<br>$$</p><p>$O(n)$</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>309魔幻世界中的安全区计算</title>
    <link href="/2025/01/01/309%E9%AD%94%E5%B9%BB%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84%E5%AE%89%E5%85%A8%E5%8C%BA%E8%AE%A1%E7%AE%97/"/>
    <url>/2025/01/01/309%E9%AD%94%E5%B9%BB%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84%E5%AE%89%E5%85%A8%E5%8C%BA%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><h3 id="问题分析">问题分析</h3><p>在一个大小为 <code>n x m</code> 的二维数组中，每个格子的值表示该位置的危险程度。小 F 的能力值为 <code>X</code>，当某个格子的危险程度小于等于 <code>X</code> 时，该格子被认为是安全的。相邻（上下左右连通）的安全格子组成一个安全区。需要计算整个二维数组中有多少个安全区。</p><h3 id="解题思路">解题思路</h3><p>这题本质就是计算连通块的数量。使用广度优先搜索（BFS）遍历二维数组，标记已访问的安全格子。对于每一个未访问且安全的格子，启动一次 BFS，将所有相连的安全格子标记为已访问，并将安全区计数加一。</p><h3 id="代码解析">代码解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, m: <span class="hljs-built_in">int</span>, X: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    vis = [[<span class="hljs-number">0</span>] * m <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bfs</span>(<span class="hljs-params">x, y</span>):<br>        q = deque([(x, y)])<br>        vis[x][y] = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> q:<br>            x, y = q.popleft()<br>            <span class="hljs-keyword">for</span> dx, dy <span class="hljs-keyword">in</span> [(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)]:<br>                nx, ny = x + dx, y + dy<br>                <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= nx &lt; n <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= ny &lt; m <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> vis[nx][ny] <span class="hljs-keyword">and</span> a[nx][ny] &lt;= X:<br>                    vis[nx][ny] = <span class="hljs-number">1</span><br>                    q.append((nx, ny))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    res = <span class="hljs-built_in">sum</span>(bfs(i, j) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m) <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> vis[i][j] <span class="hljs-keyword">and</span> a[i][j] &lt;= X)<br>    <span class="hljs-keyword">return</span> res<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]]) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, [[<span class="hljs-number">6</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>]]) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]]) == <span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><p><strong>时间复杂度</strong>:通过 BFS 方法遍历整个二维数组，每个格子最多只被遍历一次，所以时间复杂度为 <code>O(n * m)</code>。<br><strong>空间复杂度</strong>:空间复杂度 <code>O(n * m)</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>370子区间平均值问题</title>
    <link href="/2025/01/01/370%E5%AD%90%E5%8C%BA%E9%97%B4%E5%B9%B3%E5%9D%87%E5%80%BC%E9%97%AE%E9%A2%98/"/>
    <url>/2025/01/01/370%E5%AD%90%E5%8C%BA%E9%97%B4%E5%B9%B3%E5%9D%87%E5%80%BC%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题解">题解</h3><p><strong>问题描述</strong></p><p>给定一个长度为 <code>n</code> 的整数数组 <code>arr</code>，以及一个有理数 <code>u/v</code>。需要找出数组中有多少个连续的子区间，其平均值恰好等于 <code>u/v</code>。</p><p><strong>解题思路</strong></p><ol><li><p><strong>转化问题</strong>：要求子区间的平均值等于 <code>u/v</code>，即子区间的总和等于 <code>(u/v) * 长度</code>。为了简化计算，我们可以将数组的每个元素都减去 <code>u/v</code>，然后问题转化为找出有多少个子区间的和为 <code>0</code>。</p></li><li><p><strong>前缀和与哈希表</strong>：</p><ul><li>使用前缀和 <code>s</code> 来记录从起始到当前元素的累积和。</li><li>使用哈希表 <code>d</code> 来存储每个前缀和出现的次数。</li><li>遍历数组，对于每个位置 <code>i</code>，计算当前的前缀和 <code>s[i]</code>：<ul><li>如果在之前的某个位置 <code>j</code>（<code>j &lt; i</code>），<code>s[j]</code> 与 <code>s[i]</code> 相等，则子区间 <code>(j+1, i)</code> 的和为 <code>0</code>。</li><li>因此，结果 <code>res</code> 增加 <code>d[s[i]]</code> 的值。</li><li>然后更新 <code>d[s[i]]</code> 的计数。</li></ul></li></ul></li></ol><p><strong>代码解析</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> accumulate<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, u: <span class="hljs-built_in">int</span>, v: <span class="hljs-built_in">int</span>, arr: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 将每个元素减去 u/v</span><br>    a = [x - u / v <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr]<br>    <span class="hljs-comment"># 计算前缀和</span><br>    s = <span class="hljs-built_in">list</span>(accumulate(a))<br>    <span class="hljs-comment"># 哈希表记录前缀和出现的次数</span><br>    d = defaultdict(<span class="hljs-built_in">int</span>)<br>    d[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-comment"># 如果当前前缀和 s[i] 已存在于哈希表中，则增加相应的计数</span><br>        res += d[s[i]]<br>        <span class="hljs-comment"># 更新哈希表</span><br>        d[s[i]] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度: <code>O(n)</code>，其中 <code>n</code> 为数组的长度。</li><li>空间复杂度: <code>O(n)</code>。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>299红色格子染色方案数计算</title>
    <link href="/2025/01/01/299%E7%BA%A2%E8%89%B2%E6%A0%BC%E5%AD%90%E6%9F%93%E8%89%B2%E6%96%B9%E6%A1%88%E6%95%B0%E8%AE%A1%E7%AE%97/"/>
    <url>/2025/01/01/299%E7%BA%A2%E8%89%B2%E6%A0%BC%E5%AD%90%E6%9F%93%E8%89%B2%E6%96%B9%E6%A1%88%E6%95%B0%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述">问题描述</h3><p>小 R 有一排长度为 n 的格子，每个格子从左到右编号为 1 到 n。起初，部分格子已经被染成了红色，其他格子则没有颜色。红色格子的状态由一个长度为 n 的字符串 s 描述，其中 s[i] = 1 表示第 i 个格子是红色的，而 s[i] = 0 表示该格子没有颜色。</p><p>小 R 希望通过以下两种操作将所有格子都染成红色：</p><ol><li>如果第 i 个格子是红色的，且 i + 1 ≤ n，则可以将第 i + 1 个没有颜色的格子染成红色。</li><li>如果第 i 个格子是红色的，且 i - 1 ≥ 1，则可以将第 i - 1 个没有颜色的格子染成红色。</li></ol><p>请你帮小 R 计算出，存在多少种不同的染色顺序可以使所有格子最终都被染成红色，并输出答案对 10^9 + 7 取模后的结果。</p><h3 id="题解">题解</h3><p>1.<strong>子数组内部的染色方案数</strong><br>首先考虑一个长度为<code>k</code>的全部未染色的格子，可以有多少种染色方案。</p><ul><li>假如这段连续的格子处于两个已染色的格子之间，那么这段格子的染色方案数为<code>2^(k-1)</code>。</li><li>假如这段连续的格子只有一端被染色，那么显然只有一种染色方案。</li></ul><ol start="2"><li><strong>合并所有的方案数</strong></li></ol><ul><li>假设有<code>x</code>段连续的未染色格子，那么可以发现，这<code>x</code>段格子的染色方案数是独立的，可以相乘。问题相当于把这<code>x</code>段格子放入长度为<code>m</code>的数组中，<code>m</code>为未染色的格子总数。</li><li>例如 有长度为<code>x1</code>、<code>x2</code>、<code>x3</code>、<code>x4</code>的未染色格子，一共有<code>m</code>个未染色格子，放入其中的方案数为<code>C(m, x1) * C(m-x1, x2) * C(m-x1-x2, x3) * C(m-x1-x2-x3, x4)</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br>mx = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 预处理组合数</span><br>fac = [<span class="hljs-number">0</span>] * mx<br>fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, mx):<br>    fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod<br><br>inv_fac = [<span class="hljs-number">0</span>] * mx<br>inv_fac[mx - <span class="hljs-number">1</span>] = <span class="hljs-built_in">pow</span>(fac[mx - <span class="hljs-number">1</span>], -<span class="hljs-number">1</span>, mod)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mx - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    inv_fac[i - <span class="hljs-number">1</span>] = inv_fac[i] * i % mod<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">comb</span>(<span class="hljs-params">n, m</span>):<br>    <span class="hljs-keyword">if</span> n &lt; m:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> fac[n] * inv_fac[m] % mod * inv_fac[n - m] % mod<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n, s</span>):<br>    a = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n) <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;1&#x27;</span>]<br>    <span class="hljs-comment"># 未染色的格子数</span><br>    cnt = n - <span class="hljs-built_in">len</span>(a)<br>    <span class="hljs-comment"># 处理首尾</span><br>    res = comb(cnt, a[<span class="hljs-number">0</span>]) * comb(cnt - a[<span class="hljs-number">0</span>], n - a[-<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>) % mod<br>    cnt -= (a[<span class="hljs-number">0</span>] + n - a[-<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(a)):<br>        k = a[i] - a[i - <span class="hljs-number">1</span>] - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> k &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># 内部的方案数和放置的方案数相乘</span><br>            res *= <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, k - <span class="hljs-number">1</span>, mod) * comb(cnt, k) % mod<br>            cnt -= k<br>    <span class="hljs-keyword">return</span> res % mod<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">5</span>,s = <span class="hljs-string">&quot;00101&quot;</span>) == <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">6</span>,s = <span class="hljs-string">&quot;100001&quot;</span>) == <span class="hljs-number">8</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">7</span>,s = <span class="hljs-string">&quot;0001000&quot;</span>) == <span class="hljs-number">20</span>)<br><br></code></pre></td></tr></table></figure><h4 id="复杂度分析">复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，可以预处理<code>pow</code></li><li><strong>空间复杂度</strong>：<code>O(n)</code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>组合数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>326不同子序列计数问题</title>
    <link href="/2024/12/31/326%E4%B8%8D%E5%90%8C%E5%AD%90%E5%BA%8F%E5%88%97%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/31/326%E4%B8%8D%E5%90%8C%E5%AD%90%E5%BA%8F%E5%88%97%E8%AE%A1%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><h3 id="问题描述">问题描述</h3><p>小 U 有一个字符串 <code>s</code>，他想计算该字符串的所有不同非空子序列的个数。子序列是通过删除原字符串中的部分字符（也可以不删除），且保持剩余字符的相对顺序形成的新字符串。</p><p>你的任务是帮助小 U 计算 <code>s</code> 的不同非空子序列的总数，并返回对 $10^9 + 7$ 取余的结果。</p><p><strong>例如</strong>：</p><ul><li>当 <code>s = &quot;abc&quot;</code> 时，所有不同的非空子序列包括 <code>&quot;a&quot;</code>, <code>&quot;b&quot;</code>, <code>&quot;c&quot;</code>, <code>&quot;ab&quot;</code>, <code>&quot;ac&quot;</code>, <code>&quot;bc&quot;</code>, 和 <code>&quot;abc&quot;</code>，总数为 <code>7</code>。</li></ul><h3 id="解题思路">解题思路</h3><ol><li><p><strong>动态规划状态定义</strong>:</p><ul><li>定义 <code>f[i]</code> 为字符串 <code>s</code> 的前 <code>i</code> 个字符所能形成的不同非空子序列的数量。字典 <code>last</code> 记录每个字符上一次出现的位置。</li></ul></li><li><p><strong>动态规划转移</strong>:</p><ul><li>遍历字符串 <code>s</code>，对于每一个字符 <code>c</code> 在索引 <code>i</code> 位置：<ul><li>如果 <code>c</code> 是第一次出现，即 <code>c</code> 不在 <code>last</code> 中：<ul><li>则 <code>f[i] = f[i-1] * 2 + 1</code>。这里 <code>f[i-1] * 2</code> 表示在所有前 <code>i-1</code> 个子序列基础上，每个子序列可以选择添加或不添加 <code>c</code>，<code>+1</code> 表示包含只有 <code>c</code> 这个字符的子序列。</li></ul></li><li>如果 <code>c</code> 之前出现过：<ul><li>则 <code>f[i] = f[i-1] * 2 - f[last[c] - 1]</code>。<code>f[i-1] * 2</code> 同理，但需要减去 <code>f[last[c] - 1]</code>，以消除由上一次出现 <code>c</code> 到当前 <code>c</code> 之间重复形成的子序列，保证每个子序列唯一。</li></ul></li></ul></li><li>更新 <code>last[c] = i</code>，记录字符 <code>c</code> 的最新出现位置。</li></ul></li></ol><h3 id="代码">代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    last = &#123;&#125;<br>    n = <span class="hljs-built_in">len</span>(s)<br>    f = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s, <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> last:<br>            f[i] = f[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span> + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            f[i] = f[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span> - f[last[c] - <span class="hljs-number">1</span>]<br>        last[c] = i<br>        f[i] %= mod<br><br>    <span class="hljs-keyword">return</span> f[-<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;abc&quot;</span>) == <span class="hljs-number">7</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;aaa&quot;</span>) == <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;abcd&quot;</span>) == <span class="hljs-number">15</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;abac&quot;</span>) == <span class="hljs-number">13</span>)<br></code></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><ul><li>该算法的时间复杂度为 <code>O(n)</code>，其中 <code>n</code> 是字符串的长度。</li><li>空间复杂度为 <code>O(n)</code>，用于存储动态规划数组 <code>f</code> 和字符最后出现位置的哈希表 <code>last</code>。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>320&#39;icci&#39;型字符串子序列问题</title>
    <link href="/2024/12/31/320-icci-%E5%9E%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/31/320-icci-%E5%9E%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述">题目描述</h3><p>小 U 定义了一种特殊的字符串类型，称为 “icci” 型字符串。要满足这个类型，字符串必须具备以下条件：</p><ol><li>它的长度为 4。</li><li>第一个和第四个字符必须是元音字母（‘a’, ‘e’, ‘i’, ‘o’, ‘u’）。</li><li>第二个和第三个字符必须是辅音字母（除了元音以外的字母）。</li><li>该字符串是一个回文串。</li></ol><p>例如，字符串 “awwa” 和 “uttu” 都是 “icci” 型字符串。现在给定一个字符串，小 U 想知道其中有多少个 “icci” 型的子序列。</p><h3 id="题解">题解</h3><p>记录单个字符的数量、二元组的数量、三元组的数量。因为每次更新只和当前字符有关，可以在<code>O(26)</code>的复杂度下完成每次更新。</p><ol><li><p><strong>更新结果</strong>:</p><ul><li>如果当前字符 <code>c</code> 是元音，将 <code>triplet[x]</code> 加到结果 <code>res</code> 中，表示以 <code>x</code> 结尾的三元组可以形成有效的四元组。</li></ul></li><li><p><strong>更新三元组</strong>:</p><ul><li>如果当前字符 <code>c</code> 不是元音，对每个字母 <code>ch</code>，将 <code>pairCount[ch][x]</code> 加到 <code>triplet[ch]</code> 中，表示以 <code>ch</code> 开头、<code>x</code> 结尾的三元组数量增加。</li></ul></li><li><p><strong>更新二元组</strong>:</p><ul><li>对每个字母 <code>ch</code>，将 <code>cnt[ch]</code> 加到 <code>pairCount[ch][x]</code> 中，表示以 <code>ch</code> 开头、<code>x</code> 结尾的二元组数量增加。</li></ul></li><li><p><strong>更新字母计数</strong>:</p><ul><li>增加当前字母 <code>x</code> 的出现次数 <code>cnt[x]</code>。</li></ul></li></ol><h3 id="代码">代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br>p = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;aeiou&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    cnt = [<span class="hljs-number">0</span>] * <span class="hljs-number">26</span>  <span class="hljs-comment"># 每个字符的计数</span><br>    triplet = [<span class="hljs-number">0</span>] * <span class="hljs-number">26</span>   <span class="hljs-comment"># 以ch开头的三元组</span><br>    pairCount = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>)]  <span class="hljs-comment"># i j 二元组</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>        x = <span class="hljs-built_in">ord</span>(c) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> p:<br>            res = (res + triplet[x]) % mod<br>        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> p:<br>            <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>                triplet[ch] = (triplet[ch] + pairCount[ch][x]) % mod<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>            pairCount[ch][x] = (pairCount[ch][x] + cnt[ch]) % mod<br>        cnt[x] += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;iiaabbii&quot;</span>) == <span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;aekekeo&quot;</span>) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;abcdefg&quot;</span>) == <span class="hljs-number">0</span>)<br><br></code></pre></td></tr></table></figure><h3 id="复杂度">复杂度</h3><p><strong>时间复杂度</strong>：<code>O(26n)</code>，其中 n 是字符串长度。<br><strong>空间复杂度</strong>: <code>O(26 * 26)</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>计数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>304计算特定条件下的四元组数量</title>
    <link href="/2024/12/31/304%E8%AE%A1%E7%AE%97%E7%89%B9%E5%AE%9A%E6%9D%A1%E4%BB%B6%E4%B8%8B%E7%9A%84%E5%9B%9B%E5%85%83%E7%BB%84%E6%95%B0%E9%87%8F/"/>
    <url>/2024/12/31/304%E8%AE%A1%E7%AE%97%E7%89%B9%E5%AE%9A%E6%9D%A1%E4%BB%B6%E4%B8%8B%E7%9A%84%E5%9B%9B%E5%85%83%E7%BB%84%E6%95%B0%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="题解">题解</h3><p>该题目要求在给定数组中找到满足条件 <code>a[i] + a[j] = a[k] ^ a[l]</code> 且 <code>i &lt; j &lt; k &lt; l</code> 的四元组数量。由于答案可能非常大，需要对 <code>10^9 + 7</code> 取模。</p><h4 id="解题思路">解题思路</h4><ol><li><p><strong>枚举所有可能的 <code>(i, j)</code> 对</strong>：</p><ul><li>对于每个 数对<code>a[i]</code>和<code>a[j]</code> <code>(i &lt; j)</code>，计算 <code>a[i] + a[j]</code> 的值，并将其存储在字典 <code>d</code> 中，并记录对应<code>a[j]</code>的下标</li><li>对字典 <code>d</code> 中每个键对应的列表进行排序，以便后续使用二分查找。</li></ul></li><li><p><strong>枚举所有可能的 <code>(k, l)</code> 对</strong>：</p><ul><li>对于每个 <code>(k, l)</code>，满足<code>k &lt; l</code>，计算 <code>a[k] ^ a[l]</code> 的值。寻找是否存在 <code>(i, j)</code> 满足 <code>a[i] + a[j] = a[k] ^ a[l]</code> 且 <code>j &lt; k</code>。</li><li>使用 <code>bisect_left</code> 在 <code>d[a[k] ^ a[l]]</code> 中找到满足 <code>j &lt; k</code> 的 <code>j</code> 的数量，并累加到结果 <code>res</code> 中。</li></ul></li></ol><h4 id="代码">代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><span class="hljs-keyword">from</span> bisect <span class="hljs-keyword">import</span> bisect_left<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    d = defaultdict(<span class="hljs-built_in">list</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>            d[a[i] + a[j]].append(j)<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> d:<br>        d[k].sort()<br>    res = <span class="hljs-built_in">sum</span>(bisect_left(d[a[i] ^ a[j]], i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n - <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n))<br>    <span class="hljs-keyword">return</span> res % mod<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>]) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">6</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]) == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">14</span>, [<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">13</span>,<span class="hljs-number">9</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>]) == <span class="hljs-number">33</span>)<br><br></code></pre></td></tr></table></figure><h4 id="复杂度分析">复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n^2logn)</code><ul><li>枚举 <code>(i, j)</code> 对需要 <code>O(n^2)</code> 时间。</li><li>对每个 <code>(k, l)</code> 对进行二分查找需要 O(log n) 时间，总体为 <code>O(n^2logn)</code>。</li></ul></li><li><strong>空间复杂度</strong>：<code>O(n^2)</code><ul><li>用于存储所有 <code>(i, j)</code> 对的和。</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>枚举</tag>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>322三数之和问题</title>
    <link href="/2024/12/30/322%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/30/322%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><p>该问题要求在一个整数数组中找到所有满足 <code>i &lt; j &lt; k</code> 且 <code>arr[i] + arr[j] + arr[k] == target</code> 的三元组，并返回这些三元组的数量。由于可能存在大量的组合，结果需要对 $10^9 + 7$ 取模。</p><h3 id="解题思路">解题思路</h3><ol><li><strong>排序数组</strong>：首先将数组进行排序，方便使用双指针法。</li><li><strong>遍历数组</strong>：固定第一个数 <code>arr[i]</code>，然后使用双指针 <code>j</code> 和 <code>k</code> 来查找剩下的两个数。</li><li><strong>双指针查找</strong>：<ul><li>如果 <code>arr[i] + arr[j] + arr[k]</code> 小于目标值，移动左指针 <code>j</code> 以增大和。</li><li>如果大于目标值，移动右指针 <code>k</code> 以减小和。</li><li>当找到等于目标值的三元组时，需处理可能存在的重复元素：<ul><li>如果 <code>arr[j]</code> 和 <code>arr[k]</code> 相同，则可以从这段区间中任意选择两个数字组合。可以组合出 <code>(k - j + 1) * (k - j) / 2</code> 个三元组。</li><li>否则，计算左右指针处相同元素的个数 <code>l</code> 和 <code>r</code>，并将 <code>l * r</code> 加入结果中。</li></ul></li></ul></li><li><strong>取模</strong>：在每次更新结果时，对结果取模以防止溢出。</li></ol><h3 id="代码">代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">arr: <span class="hljs-built_in">list</span>, t: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    arr.sort()<br>    n = <span class="hljs-built_in">len</span>(arr)<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">2</span>):<br>        j, k = i + <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> j &lt; k:<br>            <span class="hljs-keyword">if</span> arr[i] + arr[j] + arr[k] &lt; t:<br>                j += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> arr[i] + arr[j] + arr[k] &gt; t:<br>                k -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> arr[j] == arr[k]:<br>                    res += (k - j + <span class="hljs-number">1</span>) * (k - j) // <span class="hljs-number">2</span><br>                    <span class="hljs-keyword">break</span><br>                l = r = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">while</span> j &lt; k <span class="hljs-keyword">and</span> arr[j] == arr[j + <span class="hljs-number">1</span>]:<br>                    l += <span class="hljs-number">1</span><br>                    j += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">while</span> j &lt; k <span class="hljs-keyword">and</span> arr[k] == arr[k - <span class="hljs-number">1</span>]:<br>                    k -= <span class="hljs-number">1</span><br>                    r += <span class="hljs-number">1</span><br>                j += <span class="hljs-number">1</span><br>                k -= <span class="hljs-number">1</span><br>                res = (res + l * r) % mod<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>], <span class="hljs-number">8</span>) == <span class="hljs-number">20</span>)<br>    <span class="hljs-built_in">print</span>(solution([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>], <span class="hljs-number">6</span>) == <span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(solution([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], <span class="hljs-number">9</span>) == <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(solution([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], <span class="hljs-number">3</span>) == <span class="hljs-number">4</span>)<br><br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><strong>时间复杂度</strong>：$O(n^2)$，其中 $n$ 是数组的长度。排序需要 $O(n \log n)$，双指针遍历需要 $O(n^2)$。</li><li><strong>空间复杂度</strong>：$O(1)$，只使用了常数级别的额外空间。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>287火车驶入驶出顺序验证问题</title>
    <link href="/2024/12/30/287%E7%81%AB%E8%BD%A6%E9%A9%B6%E5%85%A5%E9%A9%B6%E5%87%BA%E9%A1%BA%E5%BA%8F%E9%AA%8C%E8%AF%81%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/30/287%E7%81%AB%E8%BD%A6%E9%A9%B6%E5%85%A5%E9%A9%B6%E5%87%BA%E9%A1%BA%E5%BA%8F%E9%AA%8C%E8%AF%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题解">题解</h3><p>要验证火车驶出的顺序是否符合栈的先进后出（FILO）规则，我们可以模拟栈的操作过程。具体步骤如下：</p><ol><li><p><strong>初始化</strong>：</p><ul><li>创建一个空栈 <code>st</code>，用于模拟休息区。</li><li>使用指针 <code>j</code> 来跟踪出栈序列 <code>b</code> 的当前元素。</li></ul></li><li><p><strong>模拟入栈和出栈</strong>：</p><ul><li>遍历驶入序列 <code>a</code>，将每个火车编号依次压入栈 <code>st</code>。</li><li>每次压入后，检查栈顶元素是否与出栈序列 <code>b</code> 中当前指针 <code>j</code> 指向的元素相同：<ul><li>如果相同，则弹出栈顶元素，并将指针 <code>j</code> 向后移动一位。</li><li>重复此过程，直到栈为空或栈顶元素不再匹配 <code>b[j]</code>。</li></ul></li></ul></li><li><p><strong>验证结果</strong>：</p><ul><li>遍历完成后，如果所有火车都按照出栈序列 <code>b</code> 顺利弹出，即栈 <code>st</code> 为空，则说明出栈序列合法，返回 <code>True</code>。</li><li>否则，返回 <code>False</code>，表示出栈序列不合法。</li></ul></li></ol><h4 id="代码实现">代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span>, b: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    st = []<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a:<br>        st.append(x)<br>        <span class="hljs-keyword">while</span> st <span class="hljs-keyword">and</span> st[-<span class="hljs-number">1</span>] == b[j]:<br>            st.pop()<br>            j += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(st) == <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) == <span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]) == <span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]) == <span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]) == <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="算法复杂度">算法复杂度</h3><ul><li><strong>时间复杂度</strong>：O(n)，其中 n 是序列的长度。每个火车编号最多被压入和弹出栈一次。</li><li><strong>空间复杂度</strong>：O(n)，用于模拟栈的空间。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>279最长连续交替01子串问题</title>
    <link href="/2024/12/30/279%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E4%BA%A4%E6%9B%BF01%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/30/279%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E4%BA%A4%E6%9B%BF01%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题解">题解</h3><p>要解决这个问题，我们需要找到通过将二进制字符串分割并翻转各部分后，能够得到的最长连续交替<code>01</code>子串的长度。关键在于识别字符串中相邻相同字符的位置，然后尝试翻转这些部分以最大化交替子串的长度。</p><h4 id="解题思路">解题思路</h4><ul><li>字符串翻转后并不会影响最长的<code>01</code>串的长度</li><li>题目的操作会使得字符串的头和尾拼接。如果头和尾的字符是相同的，那么最长的<code>01</code>一定在原本的字符串中。</li><li>如果头和尾的字符是不同的，那么最长的<code>01</code>串可能两个部分拼接而成。这两个部分分别是原字符串的前缀和后缀，因此我们只需要找到前缀和后缀中第一个相邻相同字符的位置，然后尝试翻转这两个部分，找到最长的<code>01</code>串即可。</li></ul><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 求最长的01子串</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">s</span>):<br>    mx = cur = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(s)):<br>        <span class="hljs-keyword">if</span> s[i] != s[i-<span class="hljs-number">1</span>]:<br>            cur += <span class="hljs-number">1</span><br>            mx = <span class="hljs-built_in">max</span>(mx, cur)<br>        <span class="hljs-keyword">else</span>:<br>            cur = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> mx<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    res = get(s)<br>    <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>] == s[-<span class="hljs-number">1</span>]:<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(s)):<br>        <span class="hljs-keyword">if</span> s[i] == s[i-<span class="hljs-number">1</span>]:<br>            res = <span class="hljs-built_in">max</span>(res, get(s[:i][::-<span class="hljs-number">1</span>] + s[i:][::-<span class="hljs-number">1</span>]))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s) - <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> s[i] == s[i+<span class="hljs-number">1</span>]:<br>            res = <span class="hljs-built_in">max</span>(res, get(s[:i][::-<span class="hljs-number">1</span>] + s[i:][::-<span class="hljs-number">1</span>]))<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">return</span> res<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>272最大化糖果美味值问题</title>
    <link href="/2024/12/30/272%E6%9C%80%E5%A4%A7%E5%8C%96%E7%B3%96%E6%9E%9C%E7%BE%8E%E5%91%B3%E5%80%BC%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/30/272%E6%9C%80%E5%A4%A7%E5%8C%96%E7%B3%96%E6%9E%9C%E7%BE%8E%E5%91%B3%E5%80%BC%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题解">题解</h3><p>题目要求在一个长度为 <code>n</code> 的数组中，选择一些糖果作为奖励，满足以下限制规则：</p><ul><li>如果选择了编号为 <code>i</code> 的糖果，那么编号为 <code>i-1</code>、<code>i-2</code>、<code>i+1</code>、<code>i+2</code> 的糖果将不能被选择。</li><li>每个糖果都有一个对应的美味值。</li><li>目标是使所选糖果的美味值之和最大。</li></ul><h4 id="解题思路">解题思路</h4><ol><li><p><strong>动态规划</strong>：</p><p>定义 <code>f[i]</code> 为考虑前 <code>i</code> 个糖果时，满足条件的最大美味值之和。</p></li><li><p><strong>状态转移</strong>：</p><p>对于每个糖果 <code>i</code>，有两种选择：</p><ul><li><strong>不选择</strong>：则 <code>f[i] = max(f[i-1], f[i-2])</code></li><li><strong>选择</strong>：则不能选择 <code>i-1</code>、<code>i-2</code>，因此 <code>f[i] = f[i-3] + a[i]</code></li></ul><p>综合考虑，状态转移方程为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">f<span class="hljs-selector-attr">[i]</span> = <span class="hljs-built_in">max</span>(f<span class="hljs-selector-attr">[i-1]</span>, f<span class="hljs-selector-attr">[i-2]</span>, f<span class="hljs-selector-attr">[i-3]</span> + <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[i]</span>)<br></code></pre></td></tr></table></figure></li><li><p><strong>空间优化</strong>：</p><p>由于每次只需要记录前三个状态，可以使用三个变量 <code>f1</code>, <code>f2</code>, <code>f3</code> 来代替数组 <code>f</code>，从而降低空间复杂度。</p></li><li><p><strong>返回结果</strong>：</p><p>最终返回 <code>f1</code>，即考虑所有糖果后的最大美味值之和。</p></li></ol><h4 id="代码">代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    f1 = f2 = f3 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-comment"># f[i] = max(f[i - 1], f[i - 2], f[i - 3] + a[i])</span><br>        f1, f2, f3 = <span class="hljs-built_in">max</span>(f1, f2, f3 + a[i]), f1, f2<br>    <span class="hljs-keyword">return</span> f1<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">7</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]) == <span class="hljs-number">14</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>]) == <span class="hljs-number">18</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">6</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) == <span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure><h4 id="复杂度分析">复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是糖果的数量。需要遍历一次数组。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，仅使用常数级别的额外空间。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>271最大化未出现自然数问题</title>
    <link href="/2024/12/30/271%E6%9C%80%E5%A4%A7%E5%8C%96%E6%9C%AA%E5%87%BA%E7%8E%B0%E8%87%AA%E7%84%B6%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/30/271%E6%9C%80%E5%A4%A7%E5%8C%96%E6%9C%AA%E5%87%BA%E7%8E%B0%E8%87%AA%E7%84%B6%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题解">题解</h3><p>题目要求在一个长度为 <code>n</code> 的数组中，找出最大的未出现的自然数。具体来说，找到最小的正整数 <code>m</code>，使得 <code>m</code> 没有出现在数组中。</p><h4 id="解题思路">解题思路</h4><ol><li><p><strong>计数元素频次</strong>：</p><p>使用 <code>Counter</code> 统计数组中每个元素出现的次数。这样可以快速判断某个数字是否存在于数组中。</p></li><li><p><strong>遍历寻找未出现的自然数</strong>：</p><p>从 <code>0</code> 开始，依次检查每个数字 <code>i</code> 是否存在于数组中（即 <code>cnt[i] &gt; 0</code>）。</p><ul><li>如果存在，则继续检查下一个数。由于操作可以把<code>i</code>变成更大的数字，因此可以把多余的<code>i</code>的个数用变量<code>f</code>记录下来。</li><li>如果不存在，那么查看是否还有多余的更小的数字变成当前的数字。如果有则把<code>f</code>的计数减去<code>1</code>,如果没有则返回当前的 <code>i</code> 作为结果。</li></ul></li><li><p><strong>返回结果</strong>：</p><p>如果所有 <code>0</code> 到 <code>n-1</code> 的数字都存在，则返回 <code>n</code>。</p></li></ol><h4 id="代码">代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    cnt = Counter(a)<br>    f = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> cnt[i] == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> f &gt; <span class="hljs-number">0</span>:<br>                f -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> i<br>        <span class="hljs-keyword">else</span>:<br>            f += cnt[i] - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> n<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>]) == <span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">6</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]) == <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) == <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h4 id="复杂度分析">复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是数组长度，用于统计元素频次和遍历查找。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，用于存储元素频次。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>枚举</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>262数组子序列的排列个数</title>
    <link href="/2024/12/30/262%E6%95%B0%E7%BB%84%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E6%8E%92%E5%88%97%E4%B8%AA%E6%95%B0/"/>
    <url>/2024/12/30/262%E6%95%B0%E7%BB%84%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E6%8E%92%E5%88%97%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="题解">题解</h3><p>题目要求计算数组中满足特定条件的子序列数量。具体来说，子序列必须是从 <code>1</code> 到 <code>m</code> 的完整排列，且按升序排列。</p><h4 id="解题思路">解题思路</h4><ol><li><p><strong>计数元素频次</strong>：</p><p>使用 <code>Counter</code> 统计数组中每个元素出现的次数。这样可以快速获取每个数字出现的数量。</p></li><li><p><strong>迭代构建排列</strong>：</p><p>从 <code>1</code> 开始，依次检查每个数字 <code>i</code> 是否存在于数组中（即 <code>cnt[i] &gt; 0</code>）。</p><ul><li><p>如果存在，当前排列长度为 <code>i</code>，可以选择的方式数为 <code>cnt[i]</code>。</p></li><li><p>将当前选择方式数累乘到一个累积变量 <code>f</code> 中，表示构建长度为 <code>i</code> 的排列的总方式数。</p></li><li><p>将 <code>f</code> 加到最终结果 <code>res</code> 中。</p></li><li><p>一旦发现某个数字 <code>i</code> 在数组中不存在（即 <code>cnt[i] == 0</code>），说明无法继续构建更长的排列，循环终止。</p></li></ul></li></ol><h4 id="示例分析">示例分析</h4><p>以样例 1 为例：</p><ul><li><p>数组 <code>[1, 1, 5, 2, 3, 4]</code> 中元素计数为 <code>&#123;1:2, 5:1, 2:1, 3:1, 4:1&#125;</code>。</p></li><li><p>依次计算：</p><ul><li><p><code>m=1</code>:</p><p><code>cnt[1] = 2</code> → <code>f = 2</code> → <code>res = 2</code></p></li><li><p><code>m=2</code>:</p><p><code>cnt[2] = 1</code> → <code>f = 2 * 1 = 2</code> → <code>res = 4</code></p></li><li><p><code>m=3</code>:</p><p><code>cnt[3] = 1</code> → <code>f = 2 * 1 * 1 = 2</code> → <code>res = 6</code></p></li><li><p><code>m=4</code>:</p><p><code>cnt[4] = 1</code> → <code>f = 2 * 1 * 1 * 1 = 2</code> → <code>res = 8</code></p></li><li><p><code>m=5</code>:</p><p><code>cnt[5] = 1</code> → <code>f = 2 * 1 * 1 * 1 * 1 = 2</code> → <code>res = 10</code></p></li><li><p><code>m=6</code>:</p><p><code>cnt[6] = 0</code> → 终止</p></li></ul></li><li><p>最终结果为 <code>10</code>。</p></li></ul><h4 id="代码">代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    cnt = Counter(a)<br>    res = <span class="hljs-number">0</span><br>    f = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> cnt[i] == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br>        f *= cnt[i]<br>        res += f<br><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">6</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]) == <span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]) == <span class="hljs-number">5</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">7</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]) == <span class="hljs-number">7</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">9</span>, [<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>]) == <span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]))<br></code></pre></td></tr></table></figure><h4 id="复杂度分析">复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是数组长度，用于统计元素频次。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，用于存储元素频次。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>260数字匹配问题</title>
    <link href="/2024/12/29/260%E6%95%B0%E5%AD%97%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/29/260%E6%95%B0%E5%AD%97%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><h3 id="问题概述">问题概述</h3><p>小 F 拥有一串数字，需按照以下规则将这些数字两两配对：</p><ol><li>数字对中两个数字的差的绝对值必须大于等于给定的差异值 <code>M</code>。</li><li>每个数字只能被配对一次，不能出现在多个数字对中。<br>目标是找出最多能配对出多少对数字。</li></ol><h3 id="解题思路">解题思路</h3><p>为了最大化配对数，采取贪心策略：</p><ol><li><strong>排序</strong>：首先对数字列表 <code>X</code> 进行排序，以便于后续配对时能够高效地找到满足条件的数字对。</li><li><strong>双指针方法</strong>：<ul><li>题目中要求数字两两配对并且不能重复，因此最多的配对个数为$\lfloor \frac{n}{2} \rfloor$，因为数组是有序的。最优的情况一定是其中一个数字来自数组的左半部分，另一个数字来自右半部分</li><li>将列表分为两部分，左指针 <code>l</code> 指向较小的数字，右指针 <code>r</code> 从中间开始指向较大的数字。遍历右指针，尝试找到与左指针指向的数字差值至少为 <code>M</code> 的配对。如果差值小于<code>M</code>，那么继续移动右指针。</li></ul></li><li><strong>终止条件</strong>：当左指针超过中间位置，停止配对过程。</li></ol><h3 id="代码解析">代码解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">N: <span class="hljs-built_in">int</span>, M: <span class="hljs-built_in">int</span>, X: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    res = <span class="hljs-number">0</span><br>    X.sort()  <span class="hljs-comment"># 对列表进行排序</span><br>    l = <span class="hljs-number">0</span>  <span class="hljs-comment"># 初始化左指针</span><br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N // <span class="hljs-number">2</span>, N):  <span class="hljs-comment"># 右指针从中间开始遍历</span><br>        <span class="hljs-keyword">if</span> X[r] - X[l] &gt;= M <span class="hljs-keyword">and</span> l &lt; N // <span class="hljs-number">2</span>:<br>            res += <span class="hljs-number">1</span>  <span class="hljs-comment"># 成功配对，计数器加一</span><br>            l += <span class="hljs-number">1</span>  <span class="hljs-comment"># 移动左指针，确保数字只被使用一次</span><br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><ul><li>排序的时间复杂度为 <code>O(N log N)</code>。</li><li>空间复杂度<code>O(1)</code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>贪心，双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>251巧克力板选择问题</title>
    <link href="/2024/12/29/251%E5%B7%A7%E5%85%8B%E5%8A%9B%E6%9D%BF%E9%80%89%E6%8B%A9%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/29/251%E5%B7%A7%E5%85%8B%E5%8A%9B%E6%9D%BF%E9%80%89%E6%8B%A9%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题解">题解</h3><p>题目要求在多个背包的承重限制下，计算每个背包中最多可以携带的巧克力板数量。每块巧克力板的重量为其边长的平方。需要为每个背包找到在不超过其最大承重的情况下，能够携带的最多巧克力板数。</p><h4 id="思路分析">思路分析</h4><ol><li><p><strong>动态规划（01 背包）</strong>：</p><ul><li>对于每个背包，使用动态规划来计算在承重限制下可以携带的最大巧克力板数。</li><li>状态 <code>f[j]</code> 表示在承重 <code>j</code> 下可以携带的最大巧克力板数。</li></ul></li><li><p><strong>状态转移</strong>：</p><ul><li>遍历每块巧克力板，重量为 <code>x^2</code>。</li><li>对于每个背包容量 <code>j</code> 从大到小遍历：<ul><li>如果选择当前巧克力板，则 <code>f[j] = max(f[j], f[j - x^2] + 1)</code>。</li></ul></li></ul></li><li><p><strong>优化</strong>：</p><ul><li>计算所有查询中的最大承重 <code>vol</code>，并初始化动态规划数组 <code>f</code>。</li><li>最终对于每个查询，直接返回对应的 <code>f[q]</code>。</li></ul></li></ol><h4 id="代码解析">代码解析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, m: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span>, queries: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:<br>    vol = <span class="hljs-built_in">max</span>(queries)<br>    f = [<span class="hljs-number">0</span>] * (vol + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(vol, x ** <span class="hljs-number">2</span> - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - x ** <span class="hljs-number">2</span>] + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> [f[q] <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> queries]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">15</span>]) == [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>])<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>]) == [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">18</span>, <span class="hljs-number">25</span>]) == [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><h4 id="复杂度分析">复杂度分析</h4><ul><li><strong>时间复杂度</strong>：$O(nvol)$，其中 <code>n</code> 是巧克力板的数量，<code>vol</code> 是最大承重。</li><li><strong>空间复杂度</strong>：$O(vol)$，使用了一维数组 <code>f</code> 来存储状态。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>01背包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>248小X的区间或值和</title>
    <link href="/2024/12/29/248%E5%B0%8FX%E7%9A%84%E5%8C%BA%E9%97%B4%E6%88%96%E5%80%BC%E5%92%8C/"/>
    <url>/2024/12/29/248%E5%B0%8FX%E7%9A%84%E5%8C%BA%E9%97%B4%E6%88%96%E5%80%BC%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><h3 id="题目描述">题目描述</h3><p>题目要求计算数组中所有可能的连续子数组的权值和，权值定义为子数组中所有选取两个元素按位或（OR）的值之和。最终结果需要对 (10^9 + 7) 取模。</p><h3 id="思路分析">思路分析</h3><p>首先我们不妨考虑一个暴力一些的做法，计算所有数对的按位或值之和。<br>对于数对<code>a[i]</code> 和 <code>a[j]</code>，$(0 &lt;= i &lt; j &lt; n)$。想要连续子数组包含 <code>a[i]</code> 和 <code>a[j]</code>，那么连续子数组的左端点$l$的范围为$0 &lt;= l &lt;= i$，连续子数组的右端点$r$的范围为$j &lt;= r &lt; n$。因此数对的贡献和为<code>(a[i] | a[j]) * (i + 1) * (n - j)</code>所以我们只需要枚举所有数对，将贡献累加即可</p><p>这种方法的时间复杂度为 $O(n ^ 2)$，对于数组长度大于<code>1e5</code>的情况会超时。</p><h3 id="参考代码">参考代码</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">mod</span> = <span class="hljs-keyword">int</span>(<span class="hljs-number">1</span>e9 + <span class="hljs-number">7</span>)<br>def solution(n: <span class="hljs-keyword">int</span>, <span class="hljs-keyword">a</span>: <span class="hljs-keyword">list</span>) -&gt; <span class="hljs-keyword">int</span>:<br>    <span class="hljs-keyword">res</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">j</span> in <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">res</span> += (<span class="hljs-keyword">a</span>[i] | <span class="hljs-keyword">a</span>[<span class="hljs-keyword">j</span>]) * (i + <span class="hljs-number">1</span>) * (n - <span class="hljs-keyword">j</span>)<br>            <span class="hljs-keyword">res</span> %= <span class="hljs-keyword">mod</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">res</span> % <span class="hljs-keyword">mod</span><br></code></pre></td></tr></table></figure><p>这种方法的时间复杂度为 $O(n ^ 2)$，对于数组长度大于<code>1e5</code>的情况会超时。</p><h3 id="优化">优化</h3><ul><li>因为每一个比特位之间相互独立，我们可以分开考虑每一位的贡献。<br>对于数对<code>a[i]</code>和<code>a[j]</code>的第<code>k</code>个比特位,我们同样可以采用上述的暴力思路去枚举每个比特位之间的贡献。</li><li>当前比特位的大小是<code>1 &lt;&lt; k</code>,同时注意到当我们固定<code>a[i]</code>而去枚举<code>a[j]</code>时，连续子数组左端点$l$的范围始终是$0&lt;=l&lt;=i$。那我们直接累加所有右端点的取值不就可以了！！！</li><li>在实现时，我们枚举连续子数组的右端点而累加左端点的值, 根据按位与的性质，当前比特位为<code>1</code>时，左端点可以取任意的值,而当前比特位为<code>0</code>时，只能和左端点包含<code>1</code>的连续子数组产生贡献。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">max</span>(a).bit_length()):<br>        cnt0 = cnt1 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> a[j] &gt;&gt; i &amp; <span class="hljs-number">1</span>:<br>                res += (cnt1 + cnt0) * (n - j) * (<span class="hljs-number">1</span> &lt;&lt; i) % mod<br>                cnt1 += j + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                res += cnt1 * (n - j) * (<span class="hljs-number">1</span> &lt;&lt; i) % mod<br>                cnt0 += j + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res % mod<br></code></pre></td></tr></table></figure><h4 id="复杂度分析">复杂度分析</h4><ul><li>时间复杂度：$O(nlogm)$，其中 (n) 是数组长度，(m) 是数组中最大值。</li><li>空间复杂度：$O(1)$，使用常数级额外空间。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>246小U走排列问题</title>
    <link href="/2024/12/28/246%E5%B0%8FU%E8%B5%B0%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/28/246%E5%B0%8FU%E8%B5%B0%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><h3 id="问题描述">问题描述</h3><p>在数轴上有 <code>n</code> 个点 <code>a[1], a[2], ..., a[n]</code>，小 U 初始位于原点。她希望按照一定的顺序访问这些点。需要计算在所有不同的访问顺序中，走过的路径的总和。每种顺序对应的路径长度等于她从原点出发依次访问这些点所走的距离之和。最终结果对 (10^9 + 7) 取模。</p><blockquote><p>这题计算贡献的思想和 236 小 U 的数组权值计算问题有一定的相似之处。感兴趣的可以去做一下</p></blockquote><h3 id="解题思路">解题思路</h3><p>为了计算所有排列顺序下路径长度的总和，可以分解路径长度的贡献：</p><ol><li><p><strong>每个点作为起点的贡献</strong>：</p><ul><li>每个点 <code>a[i]</code> 被访问为第一个点时，路径长度增加 <code>|a[i] - 0| = |a[i]|</code>。</li><li>由于有 <code>(n-1)!</code> 种排列方式使得 <code>a[i]</code> 是第一个点，因此总贡献为 <code>a[i] * (n-1)!</code>。</li></ul></li><li><p><strong>每对相邻点之间的贡献</strong>：</p><ul><li>对于每一对不同相邻的点 <code>(a[i], a[j])</code>，<code>|a[i] - a[j]|</code> 会在不同的排列中多次出现。</li><li>排列中一共有<code>n - 1</code>个可以这对相邻点的位置，并且放好这对相邻点之后，剩下的 <code>n - 2</code> 个点的排列方式有 <code>(n-2)!</code> 种。</li><li>因此，这对相邻点之间的贡献为 <code>|a[i] - a[j]| * (n-2)! * (n-1)</code>。我们可以枚举所有的点对，计算它们的贡献。</li></ul></li></ol><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>]<br>    res = <span class="hljs-number">0</span><br>    f = <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 计算 (n-2)!</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>): f = f * i % mod<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        res += a[i] * f * (n - <span class="hljs-number">1</span>)    <span class="hljs-comment"># a[i] * (n-1)!</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> i != j:<br>                <span class="hljs-comment"># |a[i] - a[j]| * (n-2)! * (n-1)</span><br>                res += <span class="hljs-built_in">abs</span>(a[i] - a[j]) * f * (n - <span class="hljs-number">1</span>) % mod<br>    <span class="hljs-keyword">return</span> res % mod<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]) == <span class="hljs-number">50</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>]) == <span class="hljs-number">324</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">2</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">6</span>]) == <span class="hljs-number">16</span>)<br><br></code></pre></td></tr></table></figure><p>复杂度分析：<br>时间复杂度为 $O(n^2)$，空间复杂度为 $O(1)$。</p><ol start="3"><li><strong>优化</strong><ul><li>注意到点<code>a[i]</code> 作为点对中的第一个点的贡献为<code>f * (n - 1) * (a[i] 到其他所有点对的距离和)</code>，因此可以先计算出<code>a[i]</code>到其他所有点的距离和，然后再计算<code>a[i]</code>的贡献。</li><li>如何求<code>a[i]</code>到其他所有点的距离和？可以先对所有点排序，计算前缀和。<br>那么<code>a[i]</code>到其他所有点的距离和为<code>a[i]</code> * 前面的点个数 - 前面的区间和 + 后面的区间和 - a[i] * 后面的点个数。</li></ul></li></ol><p><strong>代码实现如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> accumulate<br>mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSumAbsoluteDifferences</span>(<span class="hljs-params">nums</span>):<br>    n = <span class="hljs-built_in">len</span>(nums)<br>    s = <span class="hljs-built_in">list</span>(accumulate(nums))<br>    res = [<span class="hljs-number">0</span>] * n          <span class="hljs-comment"># res[i] = 前面的个数 * cur - 前面总和 + 后面的和 - 后面个数 * cur</span><br>    <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>        res[i] = (i + <span class="hljs-number">1</span>) * x - s[i] + (s[n - <span class="hljs-number">1</span>] - s[i]) - (n - i - <span class="hljs-number">1</span>) * x<br>        res[i] %= mod<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>]<br>    res = <span class="hljs-number">0</span><br>    a.sort()<br>    dis = getSumAbsoluteDifferences(a)<br>    f = <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 计算 (n-2)!</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>): f = f * i % mod<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        res = (res + a[i] * f * (n - <span class="hljs-number">1</span>) + dis[i] * (n - <span class="hljs-number">1</span>) * f) % mod<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]) == <span class="hljs-number">50</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>]) == <span class="hljs-number">324</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">2</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">6</span>]) == <span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure><p>复杂度分析：<br>时间复杂度为 $O(n \log n)$, 瓶颈在排序上<br>空间复杂度为 $O(n)$。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>244小U的问号替换问题</title>
    <link href="/2024/12/28/244%E5%B0%8FU%E7%9A%84%E9%97%AE%E5%8F%B7%E6%9B%BF%E6%8D%A2%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/28/244%E5%B0%8FU%E7%9A%84%E9%97%AE%E5%8F%B7%E6%9B%BF%E6%8D%A2%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><p>给定一个由数字字符和 <code>?</code> 组成的字符串，目标是将所有的 <code>?</code> 替换为数字字符，使得替换后的字符串表示的十进制整数是正整数 <code>p</code> 的倍数。由于方案数可能非常大，需要对最终结果取模 (10^9 + 7)。</p><h3 id="思路">思路</h3><p>使用动态规划的方法解决此问题。定义 <code>f[i][j]</code> 表示前 <code>i</code> 位替换后的数模 <code>p</code> 等于 <code>j</code> 的方案数。</p><h3 id="动态规划状态">动态规划状态</h3><ul><li><strong>状态定义</strong>：<code>f[i][j]</code> 表示前 <code>i</code> 位替换后数模 <code>p</code> 等于 <code>j</code> 的方案数。</li><li><strong>初始状态</strong>：<code>f[0][0] = 1</code>，表示前 0 位数模 <code>p</code> 为 0 的方案只有一种，即空串。</li><li><strong>状态转移</strong>：<ul><li>对于每一位字符 <code>c</code>（从第 1 位到第 <code>n</code> 位）：<ul><li>如果 <code>c</code> 是 <code>?</code>，则可以替换为 <code>0</code> 到 <code>9</code> 中的任意一个数字。</li><li>如果 <code>c</code> 是具体数字，则只能替换为该数字。</li></ul></li><li>对于每一个可能的当前模值 <code>j</code>，更新新的模值 <code>(j * 10 + k) % p</code>，其中 <code>k</code> 是替换后的数字。</li></ul></li><li><strong>空间优化</strong>：由于每次只需要用到上一次的状态，可以使用滚动数组进行优化。</li></ul><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># def solution(s: str, p: int) -&gt; int:</span><br><span class="hljs-comment">#     n = len(s)</span><br><span class="hljs-comment">#     f = [[0] * p for _ in range(n + 1)]</span><br><span class="hljs-comment">#     f[0][0] = 1</span><br><span class="hljs-comment">#     for i, c in enumerate(s, 1):</span><br><span class="hljs-comment">#         for j in range(p):</span><br><span class="hljs-comment">#             if c == &quot;?&quot;:</span><br><span class="hljs-comment">#                 for k in range(10):</span><br><span class="hljs-comment">#                     f[i][(j * 10 + k) % p] += f[i - 1][j]</span><br><span class="hljs-comment">#                     f[i][(j * 10 + k) % p] %= mod</span><br><span class="hljs-comment">#             else:</span><br><span class="hljs-comment">#                 f[i][(j * 10 + int(c)) % p] += f[i - 1][j]</span><br><span class="hljs-comment">#                 f[i][(j * 10 + int(c)) % p] %= mod</span><br><span class="hljs-comment">#     return f[n][0]</span><br><br>mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    n = <span class="hljs-built_in">len</span>(s)<br>    pre = [<span class="hljs-number">0</span>] * p<br>    pre[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s, <span class="hljs-number">1</span>):<br>        cur = [<span class="hljs-number">0</span>] * p<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p):<br>            <span class="hljs-keyword">if</span> c == <span class="hljs-string">&quot;?&quot;</span>:<br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>                    cur[(j * <span class="hljs-number">10</span> + k) % p] = (cur[(j * <span class="hljs-number">10</span> + k) % p] + pre[j]) % mod<br>            <span class="hljs-keyword">else</span>:<br>                cur[(j * <span class="hljs-number">10</span> + <span class="hljs-built_in">int</span>(c)) % p] = (cur[(j * <span class="hljs-number">10</span> + <span class="hljs-built_in">int</span>(c)) % p] + pre[j]) % mod<br>        pre = cur.copy()<br>    <span class="hljs-keyword">return</span> cur[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;??&quot;</span>, <span class="hljs-number">1</span>) == <span class="hljs-number">100</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;????1&quot;</span>, <span class="hljs-number">12</span>) == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;1??2&quot;</span>, <span class="hljs-number">3</span>) == <span class="hljs-number">34</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><strong>时间复杂度</strong>：$O(n \times p \times 10)$，其中 <code>n</code> 是字符串长度，<code>p</code> 是给定的正整数。</li><li><strong>空间复杂度</strong>：$O(p)$</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>236小U的数组权值计算</title>
    <link href="/2024/12/28/236%E5%B0%8FU%E7%9A%84%E6%95%B0%E7%BB%84%E6%9D%83%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    <url>/2024/12/28/236%E5%B0%8FU%E7%9A%84%E6%95%B0%E7%BB%84%E6%9D%83%E5%80%BC%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>小 R 定义一个数组的“权值”为相邻两数乘积为奇数的对数。给定一个整数 n，表示数组的长度，即需要求从 1 到 n 的所有排列的权值之和。每个排列包含从 1 到 n 的每个正整数且仅出现一次。由于结果可能非常大，答案需要对 $10^9 + 7$ 取模。</p><h2 id="题解">题解</h2><ol><li><p><strong>奇数对的选择：</strong></p><ul><li>只有两个奇数的乘积为奇数</li><li>在 1 到 n 的数中，奇数的个数为 $\lceil n/2 \rceil$。</li><li>选择两个不同的奇数有 $\lceil n/2 \rceil \times (\lceil n/2 \rceil - 1)$ 种方法。</li></ul></li><li><p><strong>位置的安排：</strong></p><ul><li>一个奇数对可以出现在排列中的 n-1 个相邻位置中的任意一个位置。</li><li>除去选定的两个奇数后，剩下的 n-2 个元素可以有$(n-2)!$种排列方式。</li></ul></li><li><p><strong>总计：</strong></p><ul><li>将以上部分相乘，得到总权值之和：<br>a(n) = $\lceil n/2 \rceil \times (\lceil n/2 \rceil - 1) \times (n-1)!$</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> ceil<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    res = ceil(n / <span class="hljs-number">2</span>) * ceil(n / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n): res = (res * i) % mod<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>) == <span class="hljs-number">144</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>) == <span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">6</span>) == <span class="hljs-number">720</span>)<br></code></pre></td></tr></table></figure><p>复杂度分析：<br>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p>]]></content>
    
    
    
    <tags>
      
      <tag>组合数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>235小U的好字符串</title>
    <link href="/2024/12/27/235%E5%B0%8FU%E7%9A%84%E5%A5%BD%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2024/12/27/235%E5%B0%8FU%E7%9A%84%E5%A5%BD%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述">题目描述</h3><p>小 U 定义了一个“好字符串”，它的要求是该字符串中不包含任意长度不小于 2 的回文子串。现在小 U 拿到了一个字符串，她想知道有多少个非空的子序列是“好字符串”。你的任务是帮助她计算出这些子序列的数量。</p><p>例如，对于字符串 <code>&quot;aba&quot;</code>，它的子序列中除了 <code>&quot;aa&quot;</code> 和 <code>&quot;aba&quot;</code> 以外，其余五个子序列都是“好字符串”。</p><p>注意：由于答案可能非常大，你需要对结果取 (10^9 + 7) 进行输出。</p><h2 id="题解">题解</h2><h3 id="解题思路">解题思路</h3><p>题目中要求求出一个字符串中不包含任意长度不小于 2 的回文子串的子序列的数量。这里我们可以使用动态规划的方法来解决这个问题。任意一个长度大于等于 3 的回文串，一定包含一个长度为 2 的回文串或者长度为 3 的字符串。所以我们可以记录子序列中选择的前两个字符，然后遍历字符串，如果当前字符和前两个字符都不相等，那么我们可以选择当前字符，否则我们只能选择不选择当前字符。最后我们将所有的选择情况相加即可。</p><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 记忆化搜索</span><br><span class="hljs-comment"># from functools import cache</span><br><span class="hljs-comment"># def solution(s: str) -&gt; int:</span><br><span class="hljs-comment">#     mod = int(1e9 + 7)</span><br><span class="hljs-comment">#     def dfs(i, pre1, pre2):</span><br><span class="hljs-comment">#         if i == len(s):</span><br><span class="hljs-comment">#             return 1</span><br><span class="hljs-comment">#         res = 0</span><br>          <span class="hljs-comment"># 不选择当前字符</span><br><span class="hljs-comment">#         res += dfs(i + 1, pre1, pre2)</span><br><span class="hljs-comment">#         if s[i] != pre1 and s[i] != pre2:</span><br><span class="hljs-comment">#             res += dfs(i + 1, pre2, s[i])</span><br><span class="hljs-comment">#         return res</span><br>      <span class="hljs-comment"># 不包含空序列</span><br><span class="hljs-comment">#     res = dfs(0, -1, -1) - 1</span><br><span class="hljs-comment">#     return res</span><br><br><span class="hljs-comment"># 动态规划</span><br>mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    n = <span class="hljs-built_in">len</span>(s)<br>    m = <span class="hljs-number">26</span><br>    f = [[<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>)]<br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> s:<br>        c = <span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">27</span>):<br>            <span class="hljs-keyword">if</span> i == c:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">27</span>):<br>                <span class="hljs-keyword">if</span> j == c:<br>                    <span class="hljs-keyword">continue</span><br>                f[j][c] += f[i][j]<br>                f[j][c] %= mod<br>        f[-<span class="hljs-number">1</span>][c] += <span class="hljs-number">1</span><br>    res = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">sum</span>(f[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">27</span>))<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;aba&quot;</span>) == <span class="hljs-number">5</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;aaa&quot;</span>) == <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;ghij&quot;</span>) == <span class="hljs-number">15</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;zyyzbyn&quot;</span>) == <span class="hljs-number">51</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><strong>时间复杂度</strong>：$O(nm^2)$</li><li><strong>空间复杂度</strong>：$O(m^2)$</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>记忆化搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>229小U的chi权值计算</title>
    <link href="/2024/12/27/229%E5%B0%8FU%E7%9A%84chi%E6%9D%83%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    <url>/2024/12/27/229%E5%B0%8FU%E7%9A%84chi%E6%9D%83%E5%80%BC%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>给定一个由字符<code>'c'</code>、<code>'h'</code>、<code>'i'</code>、<code>'?'</code>组成的字符串，其中<code>'?'</code>可以替换为<code>'c'</code>、<code>'h'</code>或<code>'i'</code>。定义字符串的权值基于所有字符<code>'h'</code>的位置计算。对于每个<code>'h'</code>，其前面的<code>'c'</code>和后面的<code>'i'</code>都会对其贡献 1 的权值。求所有可能替换方案的权值之和，结果对 (10^9 + 7) 取模。</p><h2 id="解题思路">解题思路</h2><ol><li><strong>统计未知字符</strong>：首先统计字符串中 <code>?</code> 的总数，用 <code>cnt</code> 表示。</li><li><strong>前缀计数</strong>：<ul><li><code>prec</code> 记录当前位置前面的 <code>c</code> 数量。</li><li><code>pre</code> 记录前面 <code>?</code> 的数量。</li></ul></li><li><strong>后缀计数</strong>：<ul><li><code>sufi</code> 记录当前位置后面的 <code>i</code> 数量。</li><li><code>suf</code> 记录后面 <code>?</code> 的数量。</li></ul></li><li><strong>遍历字符串</strong>：<ul><li>对于每个字符：<ul><li>如果是 <code>c</code>，则增加 <code>prec</code>。</li><li>如果是 <code>i</code>，则减少 <code>sufi</code>。</li><li>如果是 <code>h</code>，计算其贡献：<ul><li>固定 <code>h</code> 的贡献为 <code>prec + sufi</code>，乘以当前 <code>?</code> 的排列组合数。每个 <code>?</code> 都可以替换成 <code>c</code>、<code>h</code>、<code>i</code> 这三种字符，所以总共的替换方案为 <code>pow(3, cnt, mod)</code>。因此前面的 <code>c</code> 和 <code>i</code> 的贡献为 <code>pow(3, cnt, mod) * (prec + sufi)</code>。</li><li>考虑前面的 <code>?</code> 替换为 <code>c</code> 和后面的 <code>?</code> 替换为 <code>i</code> 的情况。前面的 <code>?</code> 替换成 <code>c</code> 也有贡献，一个 <code>?</code> 在 <code>pow(3, cnt - 1, mod)</code> 种情况下可以替换成 <code>c</code>，而当前位置前面共有<code>pre</code>个<code>?</code>,所以前面的 <code>?</code> 的贡献为 <code>pre * pow(3, cnt - 1, mod)</code>。后面的 <code>?</code> 同理为 <code>suf * pow(3, cnt - 1, mod)</code>。</li></ul></li><li>如果是 <code>?</code>，考虑其替换为 <code>h</code> 的情况，类似地计算贡献，并更新 <code>pre</code> 和 <code>suf</code>。当前的 <code>?</code> 已经替换成了 <code>h</code>，所以后面的 <code>?</code> 的贡献为 <code>suf * pow(3, cnt - 2, mod)</code>。前面的 <code>?</code> 同理为 <code>pre * pow(3, cnt - 2, mod)</code>。</li></ul></li></ul></li><li><strong>取模</strong>：最终结果对 (10^9 + 7) 取模。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    pre = <span class="hljs-number">0</span><br>    cnt = suf = s.count(<span class="hljs-string">&#x27;?&#x27;</span>)<br>    prec = <span class="hljs-number">0</span><br>    sufi = s.count(<span class="hljs-string">&#x27;i&#x27;</span>)<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>        <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;i&#x27;</span>:<br>            sufi -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> s[i] == <span class="hljs-string">&#x27;c&#x27;</span>:<br>            prec += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> s[i] == <span class="hljs-string">&quot;h&quot;</span>:<br>            res = (res + <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>, cnt, mod) * (prec + sufi) + pre * <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>, cnt - <span class="hljs-number">1</span>, mod) + suf * <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>, cnt - <span class="hljs-number">1</span>, mod)) % mod<br>        <span class="hljs-keyword">else</span>:<br>            suf -= <span class="hljs-number">1</span><br>            res = (res + <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>, cnt - <span class="hljs-number">1</span>, mod) * (prec + sufi) + pre * <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>, cnt - <span class="hljs-number">2</span>, mod) + suf * <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>, cnt - <span class="hljs-number">2</span>, mod)) % mod<br>            pre += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;ch?hi&quot;</span>) == <span class="hljs-number">16</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;ccch&quot;</span>) == <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;c?i&quot;</span>) == <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="复杂度分析">复杂度分析</h2><ul><li><strong>时间复杂度</strong>：(O(n))，其中(n)是字符串的长度。（实现中可以预处理快速幂的结果，使每步计算都是(O(1))的时间复杂度）</li><li><strong>空间复杂度</strong>：(O(1))，只使用了常数额外空间。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>组合 贡献</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>206小R的二叉树探险</title>
    <link href="/2024/12/27/206%E5%B0%8FR%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91%E6%8E%A2%E9%99%A9/"/>
    <url>/2024/12/27/206%E5%B0%8FR%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91%E6%8E%A2%E9%99%A9/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>在一个神奇的二叉树中，结构非常独特：每层的节点值赋值方向是交替的，第一层从左到右，第二层从右到左，以此类推，且该二叉树有无穷多层。<br>小 R 对这个二叉树充满了好奇，她想知道，在二叉树中两个节点之间 x, y 的路径长度是多少。</p><h2 id="题解">题解</h2><p>不妨直接考虑一颗二叉树全部从左到右编号的情况，这样我们可以获取 x 和 y 在这颗树中的编号，它们之间的相对距离不变</p><ul><li>奇数层（1、3、5、…）从左到右编号。因此位于奇数层的节点的编号不变</li><li>偶数层（2、4、6、…）从右到左编号。因此，对于偶数层，需要进行编号的对称转换。<br>第<code>k</code>层一共有<code>2^(k-1)</code>个节点，编号从<code>2^(k-1)</code>到<code>2^k-1</code>，并且观察左右对称的节点的编号总和不变，为<code>2^(k-1) + 2^k - 1</code>。因此，对于偶数层的节点<code>n</code>，其对称编号为<code>2^(k-1) + 2^k - 1 - n</code>。</li></ul><p>找到节点 <code>x</code> 和 <code>y</code> 到根节点的路径，并记录每个节点在路径中的深度，遍历两个路径，找到最近的公共祖先节点，计算路径长度。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">def</span> get_path(n):<br>    <span class="hljs-attribute">d1</span> = &#123;&#125;<br>    <span class="hljs-attribute">k</span> = n.bit_length()<br>    <span class="hljs-attribute">if</span> k % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-attribute">n</span> = <span class="hljs-number">2</span> ** k + <span class="hljs-number">2</span> ** (k - <span class="hljs-number">1</span>) - <span class="hljs-number">1</span> - n<br>    <span class="hljs-attribute">for</span> i in range(k):<br>        <span class="hljs-attribute">d1</span>[n] = i<br>        <span class="hljs-attribute">n</span> //= <span class="hljs-number">2</span><br>    <span class="hljs-attribute">return</span> d1<br><span class="hljs-attribute">def</span> solution(x: int, y: int) -&gt; int:<br>    <span class="hljs-attribute">d1</span> = get_path(x)<br>    <span class="hljs-attribute">d2</span> = get_path(y)<br>    <span class="hljs-attribute">res</span> = min(d1[k] + d2[k] for k in d1.keys() &amp; d2.keys())<br>    <span class="hljs-attribute">return</span> res<br><br><span class="hljs-attribute">if</span> __name__ == &#x27;__main__&#x27;:<br>    <span class="hljs-attribute">print</span>(solution(<span class="hljs-number">11</span>, <span class="hljs-number">4</span>) == <span class="hljs-number">5</span>)<br>    <span class="hljs-attribute">print</span>(solution(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>) == <span class="hljs-number">3</span>)<br>    <span class="hljs-attribute">print</span>(solution(<span class="hljs-number">7</span>, <span class="hljs-number">7</span>) == <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git命令</title>
    <link href="/2024/12/26/Git%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/12/26/Git%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1>Linux 基本命令</h1><h2 id="1-目录操作">1.目录操作</h2><h3 id="1-1-切换目录">1.1 切换目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /xxx/xxx          #切换到指定目录<br>cd ~                 #切换到当前用户的家目录<br>cd -                 #切换到上次访问的目录<br>cd .                 #当前目录<br>cd ..                #切换到上级目录<br>cd /                 #切换到根目录<br></code></pre></td></tr></table></figure><h3 id="1-2-查看目录">1.2 查看目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls                   #查看当前目录下的文件<br>ls -l                #查看当前目录下的文件详细信息(等价于ll)<br>ls -a                #查看当前目录下的所有文件(包括隐藏文件)<br>ls -lh               #查看当前目录下的文件详细信息(包括文件大小)<br></code></pre></td></tr></table></figure><h3 id="1-3-创建目录">1.3 创建目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir xxx            #创建一个目录<br>mkdir /xxx/xxx       #创建一个目录<br></code></pre></td></tr></table></figure><h3 id="1-4-删除目录">1.4 删除目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm /path/to/file          # 删除指定文件<br>rm -r /path/to/directory   # 递归删除目录及其内容<br>rm -rf /path/to/directory  # 递归强制删除目录及其内容<br></code></pre></td></tr></table></figure><h4 id="参数说明">参数说明</h4><ul><li><code>-r(recursion)</code>：递归删除，用于删除目录及其内部所有文件和子目录。</li><li><code>-f(force)</code>：强制删除，忽略不存在的文件并且不显示任何提示。</li></ul><h3 id="1-5-移动和重命名">1.5 移动和重命名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv 当前目录名 新目录名        # 修改目录名，同样适用于文件操作<br>mv /usr/tmp/tool /opt          # 将 /usr/tmp 目录下的 tool 目录剪切到 /opt 目录下面<br><br></code></pre></td></tr></table></figure><h2 id="2-文件操作">2.文件操作</h2><h3 id="2-1-创建文件">2.1 创建文件</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">touch</span> <span class="hljs-number">1</span>.txt   # 在当前目录下创建<span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><h3 id="2-2-删除文件">2.2 删除文件</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">rm</span> 文件名              <span class="hljs-comment"># 删除当前目录下的文件</span><br><span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> 文件名           <span class="hljs-comment"># 删除当前目录的的文件（不询问）</span><br></code></pre></td></tr></table></figure><h3 id="2-3-编辑文件">2.3 编辑文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>进入后，操作界面有三种模式：命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode）<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">### 命令模式</span></span><br>- 刚进入文件就是命令模式，通过方向键控制光标位置<br>- 使用命令 `dd` 删除当前整行<br>- 使用命令 `/字段` 进行查找<br>- 按 `i` 在光标所在字符前开始插入<br>- 按 `a` 在光标所在字符后开始插入<br>- 按 `o` 在光标所在行的下面另起一新行插入<br>- 按 `:` 进入底行模式<br>- 使用 `yy` 复制当前行<br>- 使用 `p(小写)` 在光标后粘贴<br>- 使用 `P(大写)` 在光标前粘贴<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">### 插入模式</span></span><br>- 此时可以对文件内容进行编辑，左下角会显示 &quot;-- 插入 --&quot;<br>- 按 `ESC` 进入底行模式<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">### 底行模式</span></span><br>- 退出编辑：`:q`<br>- 强制退出：`:q!`<br>- 保存并退出：`:wq`<br><br></code></pre></td></tr></table></figure><h4 id="示例">示例</h4><ul><li><p><strong>启动 vi 编辑器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi filename.txt<br></code></pre></td></tr></table></figure><p>打开文件后，默认进入命令模式。</p></li><li><p><strong>从插入模式切换到命令模式：</strong></p><ul><li>按 <code>i</code> 进入插入模式。</li><li>完成编辑后，按 <code>ESC</code> 返回命令模式。</li></ul></li><li><p><strong>从底行模式切换到命令模式：</strong></p><ul><li>在命令模式下，按 <code>:</code> 进入底行模式。</li><li>输入命令（例如 <code>:wq</code>）后，按 <code>Enter</code> 返回命令模式。</li></ul></li></ul><h3 id="2-4-查看文件">2.4 查看文件</h3><h4 id="2-4-1-cat-命令">2.4.1. <code>cat</code> 命令</h4><p><code>cat</code>（concatenate）命令用于一次性显示整个文件内容，或者将多个文件连接起来输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat filename.txt          # 显示文件内容<br>cat file1.txt file2.txt   # 连接并显示多个文件的内容<br></code></pre></td></tr></table></figure><h4 id="2-4-2-less命令">2.4.2 <code>less</code>命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">less filename.txt    # 分页查看文件内容<br></code></pre></td></tr></table></figure><h1>Git 命令</h1><h2 id="1-获取本地仓库">1.获取本地仓库</h2><p>进入目标目录后右键点击 <code>Git Bash Here</code> 运行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git init<br></code></pre></td></tr></table></figure><p>成功之后可在文件夹下看到<code>.git</code>文件夹</p><h2 id="2-基础操作指令">2.基础操作指令</h2><h3 id="2-1-Git-的三个主要区域">2.1 Git 的三个主要区域</h3><p>在 Git 中，文件的修改会在不同的区域之间转换，这些区域主要包括工作区（Working Directory）、暂存区（Staging Area）和版本库（Repository）。理解这些区域的关系对于有效地使用 Git 至关重要。</p><ol><li><strong>工作区（Working Directory）</strong><ul><li><strong>描述</strong>：工作区是你在文件系统中实际看到和操作的项目目录。在这里，你可以编辑、添加、删除文件。</li><li><strong>状态</strong>：当你在工作区中对文件进行修改时，这些文件处于“已修改”（modified）状态。</li></ul></li><li><strong>暂存区（Staging Area）</strong><ul><li><strong>描述</strong>：暂存区是一个临时区域，用于存放即将提交到版本库的文件变更。</li><li><strong>状态</strong>：通过 <code>git add</code> 命令，你可以将工作区中已修改的文件添加到暂存区，这些文件此时处于“已暂存”（staged）状态。</li></ul></li><li><strong>版本库（Repository）</strong><ul><li><strong>描述</strong>：版本库是 Git 用来存储项目历史记录的地方。当你提交（commit）变更时，这些变更会被记录在版本库中。</li><li><strong>状态</strong>：通过 <code>git commit</code> 命令，暂存区中的文件变更会被提交到版本库，文件状态变为“已提交”（committed）。</li></ul></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status   # 查看当前工作区和暂存区的状态<br>git add .    # 将当前目录下的所有变更添加到暂存区<br>git commit -m &quot;提交信息&quot; # 将暂存区的变更提交到版本库，并添加提交信息<br></code></pre></td></tr></table></figure><h3 id="2-2-查看提交日志">2.2 查看提交日志</h3><p><strong>作用</strong>：查看提交记录</p><p><strong>命令形式</strong>：<code>git log [option]</code></p><h4 id="常用选项">常用选项</h4><ul><li><code>--all</code>：显示所有分支</li><li><code>--pretty=oneline</code>：将提交信息显示为一行</li><li><code>--abbrev-commit</code>：使得输出的 commit ID 更简短</li><li><code>--graph</code>：以图的形式显示</li></ul><p>每次输入这些参数非常的麻烦，我们可以使用别名简化<br>打开<code>gitbash</code>，执行<code>touch ~/.bashrc</code>，然后在文件中添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">用于输出git提交日志</span><br>alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">用于输出当前目录所有文件及基本信息</span><br>alias ll=&#x27;ls -al&#x27;<br></code></pre></td></tr></table></figure><p>关闭文件后让执行文件生效，执行<code>source ~/.bashrc</code>，然后执行<code>git-log</code>即可查看提交日志</p><h3 id="2-3-版本回退">2.3 版本回退</h3><p>可以通过日志产看提交的版本号，然后使用<code>git reset</code>命令回退到指定版本<br>使用<code>git reflog</code>命令可以查看已经删除的提交记录</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-built_in">--hard</span> <span class="hljs-string">commitID</span>    <span class="hljs-comment"># 回退到指定版本</span><br></code></pre></td></tr></table></figure><h3 id="2-4-添加忽略文件">2.4 添加忽略文件</h3><p>可以在项目根目录下创建<code>.gitignore</code>文件，然后在文件中添加需要忽略的文件或目录，这样提交时就不会提交这些文件<br>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">忽略所有.txt结尾的文件</span><br>*.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">忽略1.doc文件</span><br>1.doc<br><br></code></pre></td></tr></table></figure><h2 id="3-分支操作">3.分支操作</h2><p>Git 的分支也非常轻量。它们只是简单地指向某个提交纪录 —— 仅此而已。所以许多 Git 爱好者传颂：<br>早建分支！多用分支！<br>这是因为即使创建再多的分支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。</p><p>在将分支和提交记录结合起来后，我们会看到两者如何协作。现在只要记住使用分支其实就相当于在说：“我想基于这个提交以及它所有的 parent 提交进行新的工作。”</p><h3 id="3-1-创建分支">3.1 创建分支</h3><p>使用 <code>git branch &lt;分支名&gt;</code> 来创建一个新分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch main<br></code></pre></td></tr></table></figure><h3 id="3-2-切换分支">3.2 切换分支</h3><p>使用 <code>git checkout &lt;分支名&gt;</code> 来切换到指定分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout main<br></code></pre></td></tr></table></figure><p>使用 <code>git checkout -b &lt;分支名&gt;</code> 可以同时创建并切换到新分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b master<br></code></pre></td></tr></table></figure><h3 id="3-3-合并分支">3.3 合并分支</h3><p>使用 <code>git merge &lt;分支名&gt;</code> 将指定分支合并到当前分支。<br>需要先切换到要合并到的分支，然后再执行合并操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 假设当前在 main 分支上, 将 master 分支合并到 main 分支</span><br>git merge master<br></code></pre></td></tr></table></figure><h3 id="3-4-删除分支">3.4 删除分支</h3><p>使用 <code>git branch -d &lt;分支名&gt;</code> 删除本地分支。<br>注意： 不能删除当前所在的分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -d b1 <span class="hljs-comment"># 删除分支时，需要做各种检查</span><br>git branch -D b1 <span class="hljs-comment"># 强制删除</span><br></code></pre></td></tr></table></figure><h2 id="4-操作远程仓库">4 操作远程仓库</h2><h3 id="4-1-创建远程仓库">4.1 创建远程仓库</h3><p>在<code>github</code>或<code>gitee</code>上创建一个新的仓库，在本地库中执行以下命令生成 SSH 公钥(文件路径为<code>C:\Users\用户名\.ssh\id_rsa.pub</code>)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>打开文件或者用命令<code>cat ~/.ssh/id_rsa.pub</code>查看公钥内容并将文件内容复制到远程仓库的 SSH 密钥中。</p><h3 id="4-2-添加远程仓库">4.2 添加远程仓库</h3><p>此操作是先初始化本地库，然后与已创建的远程库进行对接。</p><p>命令： <code>git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</code></p><p>远端名称，默认是 origin，取决于远端服务器设置。仓库路径，从远端服务器获取此 URL</p><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin git@github.com:kongshuilinhua/kongshuilinhua.github.io.git<br></code></pre></td></tr></table></figure><h4 id="4-3-查看远程仓库">4.3 查看远程仓库</h4><p>命令：<code>git remote</code></p><h4 id="4-4-推送到远程仓库">4.4 推送到远程仓库</h4><p><code>git push [options] [远程仓库] [本地分支]:[远程分支]</code><br>如果远程分支名和本地分支名称相同，则可以只写本地分支。<br><code>git push</code> 命令的可选参数包括：</p><ul><li><code>-u</code> 或 <code>--set-upstream</code>：设置上游分支</li><li><code>--force</code> 或 <code>-f</code>：强制推送，即使会覆盖远程分支。</li><li><code>--all</code>：推送所有本地分支。</li><li><code>--tags</code>：推送所有本地标签。</li><li><code>--dry-run</code>：模拟推送，不执行实际操作。</li><li><code>--delete</code>：删除远程分支。</li><li><code>--mirror</code>：推送所有引用（包括标签和远程分支）。</li><li><code>--atomic</code>：确保所有分支一起推送成功，否则全部失败。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin master<br>git push --set-upstream origin master<br></code></pre></td></tr></table></figure><ul><li><code>-f</code>表示强制覆盖</li><li><code>--set-upstream</code>表示推送到远端的同时并且建立起和远端分支的关联关系。<br>如果当前分支已经和远端分支关联，则可以省略分支名和远端名。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push  <span class="hljs-comment"># 将master分支推送到已关联的远端分支</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>285水果店果篮最小成本问题</title>
    <link href="/2024/12/26/285%E6%B0%B4%E6%9E%9C%E5%BA%97%E6%9E%9C%E7%AF%AE%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/26/285%E6%B0%B4%E6%9E%9C%E5%BA%97%E6%9E%9C%E7%AF%AE%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><h3 id="问题概述">问题概述</h3><p>小 C 需要将 <code>n</code> 个编号为 1 到 <code>n</code> 的水果打包成若干个果篮。每个果篮最多可以容纳 <code>m</code> 个水果，且果篮中的水果编号必须连续。每个果篮的成本由以下公式决定：</p><p>[ \text{成本} = k \times \left\lfloor \frac{u + v}{2} \right\rfloor + s ]</p><p>其中：</p><ul><li><code>k</code> 是果篮中水果的数量。</li><li><code>u</code> 是果篮中水果的最大体积。</li><li><code>v</code> 是果篮中水果的最小体积。</li><li><code>s</code> 是一个常数。</li><li>(\left\lfloor x \right\rfloor) 表示对 <code>x</code> 进行下取整。</li></ul><p>目标是找到一种打包方式，使得总成本最小。</p><h3 id="解题思路">解题思路</h3><p>本题可以使用<strong>动态规划</strong>的方法来解决。设 <code>f[i]</code> 表示前 <code>i</code> 个水果的最小总成本。状态转移方程的核心思想是考虑最后一个果篮包含的水果数量，并选择使总成本最小的分割方式。</p><h3 id="具体步骤">具体步骤</h3><ol><li><p><strong>初始化：</strong></p><ul><li>定义一个数组 <code>f</code>，长度为 <code>n + 1</code>，初始化所有元素为正无穷大，表示初始状态下成本无限大。</li><li>设置 <code>f[0] = 0</code>，表示不放入任何水果时的成本为 0。</li></ul></li><li><p><strong>动态规划转移：</strong></p><ul><li>遍历每一个水果位置 <code>i</code>（从 1 到 <code>n</code>），尝试将第 <code>i</code> 个水果作为当前果篮的结尾。</li><li>对于每个位置 <code>i</code>，向前遍历最多 <code>m</code> 个水果（因为每个果篮最多容纳 <code>m</code> 个水果），计算当前果篮的成本，并更新 <code>f[i]</code>。</li><li>在遍历过程中，维护当前果篮中水果的最小值 <code>mi</code> 和最大值 <code>mx</code>，以及当前果篮中水果的数量 <code>cnt</code>。</li><li>计算当前果篮的成本，并与之前的最小成本进行比较，取较小值作为 <code>f[i]</code> 的值。</li><li>如果当前果篮中的水果数量达到 <code>m</code>，则停止遍历，避免超过果篮的最大容量。</li></ul></li><li><p><strong>结果输出：</strong></p><ul><li>最终，<code>f[n]</code> 即为将所有 <code>n</code> 个水果打包的最小总成本。</li></ul></li></ol><h3 id="代码解析">代码解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">inf = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, m: <span class="hljs-built_in">int</span>, s: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># f[i] 表示放入i个水果的最小价值</span><br>    f = [inf] * (n + <span class="hljs-number">1</span>)<br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>    a = [<span class="hljs-number">0</span>] + a  <span class="hljs-comment"># 使水果编号从1开始</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        cnt = <span class="hljs-number">0</span><br>        mi = inf<br>        mx = -inf<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>            mi = <span class="hljs-built_in">min</span>(mi, a[j])<br>            mx = <span class="hljs-built_in">max</span>(mx, a[j])<br>            cnt += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 计算当前分组的成本</span><br>            current_cost = f[j - <span class="hljs-number">1</span>] + s + ((mx + mi) // <span class="hljs-number">2</span>) * cnt<br>            <span class="hljs-comment"># 更新f[i]为当前最小成本</span><br>            f[i] = <span class="hljs-built_in">min</span>(f[i], current_cost)<br>            <span class="hljs-keyword">if</span> cnt &gt;= m:<br>                <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 超过最大容量，停止遍历</span><br>    <span class="hljs-keyword">return</span> f[n]<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><strong>时间复杂度：</strong> O(n * m)，其中 <code>n</code> 是水果的数量，<code>m</code> 是果篮的最大容量。对于每个水果位置，需要遍历最多 <code>m</code> 个位置。</li><li><strong>空间复杂度：</strong> O(n)，用于存储动态规划数组 <code>f</code>。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>225小S的黑白块迷宫</title>
    <link href="/2024/12/26/225%E5%B0%8FS%E7%9A%84%E9%BB%91%E7%99%BD%E5%9D%97%E8%BF%B7%E5%AE%AB/"/>
    <url>/2024/12/26/225%E5%B0%8FS%E7%9A%84%E9%BB%91%E7%99%BD%E5%9D%97%E8%BF%B7%E5%AE%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>在一个 n×m 的网格迷宫中，初始位置在左上角 (1,1)，目标是到达右下角 (n,m)。每个格子可以是黑色（表示为 1）或者白色（表示为 0）。移动时可以向上、下、左、右四个方向移动，但不能走出迷宫的边界。要求在移动过程中经过的黑色格子尽可能少。</p><h2 id="解题思路">解题思路</h2><p>本题可以使用广度优先搜索（BFS）算法来解决。由于需要最小化经过的黑色格子数量，可以将其视为带权图的最短路径问题，其中白色格子的权重为 0，黑色格子的权重为 1。</p><p><strong>BFS 遍历</strong>：</p><ul><li>从队列中取出当前格子 <code>(x, y, d)</code>。</li><li>如果当前的黑色格子数 d 大于已记录的最小值，跳过此格子。</li><li>遍历四个可能的移动方向，计算新位置 <code>(nx, ny)</code>。</li><li>如果新位置在迷宫范围内，并且通过当前路径到达新位置的黑色格子数更少，则更新 dis[nx][ny]并将新位置加入队列。</li></ul><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br>dx, dy = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, m: <span class="hljs-built_in">int</span>, grid: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    q = deque([(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)])<br>    dis = [[n * m] * m <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    dis[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">while</span> q:<br>        x, y, d = q.popleft()<br>        <span class="hljs-keyword">if</span> d &gt; dis[x][y]:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            nx, ny = x + dx[i], y + dy[i]<br>            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= nx &lt; n <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= ny &lt; m:<br>                <span class="hljs-keyword">if</span> dis[nx][ny] &gt; dis[x][y] + grid[nx][ny]:<br>                    dis[nx][ny] = dis[x][y] + grid[nx][ny]<br>                    q.append((nx, ny, dis[nx][ny]))<br>    <span class="hljs-keyword">return</span> dis[-<span class="hljs-number">1</span>][-<span class="hljs-number">1</span>]<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]]) == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]]) == <span class="hljs-number">0</span>)<br><br></code></pre></td></tr></table></figure><h2 id="时间复杂度">时间复杂度</h2><p>该算法的时间复杂度为 O(nm)，其中 n 和 m 分别是网格的行数和列数。每个格子最多被访问一次。</p><h2 id="空间复杂度">空间复杂度</h2><p>空间复杂度为 O(nm)，用于存储 dis 数组和队列中的元素。</p>]]></content>
    
    
    
    <tags>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>284模板串匹配问题</title>
    <link href="/2024/12/26/284%E6%A8%A1%E6%9D%BF%E4%B8%B2%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <url>/2024/12/26/284%E6%A8%A1%E6%9D%BF%E4%B8%B2%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题解">题解</h3><p>本题要求在给定的“模板串”中，替换所有的 <code>'?'</code> 以构造出多个不含前导零的正整数，并找出按字典序排列后的第 <code>k</code> 小的数。如果不存在满足条件的第 <code>k</code> 小数，返回 <code>-1</code>。</p><h4 id="解题思路">解题思路</h4><ol><li><p><strong>前导零检查</strong>：</p><ul><li>首先检查模板串的首字符是否为 <code>'0'</code>，如果是<code>'0'</code>，则直接返回 <code>-1</code>，</li></ul></li><li><p><strong>从后向前替换 <code>'?'</code></strong>：</p><ul><li>假如不考律前导 0 的情况，<code>???</code> 每个<code>?</code>都有十种可选的数字，可以替换为 <code>000</code> 到 <code>999</code>，共 <code>1000</code> 种可能。第 <code>k</code> 小的数，即为第 <code>k - 1</code> 个数。并且每个位置的&quot;<code>?</code>&quot;填入的正应该是<code>k - 1</code>的十进制的每一位数字</li><li>对于从后往前的每一个 <code>'?'</code>，用 <code>k % 10</code> 来替换该位置的字符，并将 <code>k</code> 整除以 <code>10</code>，以便为下一个 <code>'?'</code> 的替换提供新的数字。</li></ul></li><li><p><strong>处理首位 <code>'?'</code></strong>：</p><ul><li>如果首位是 <code>'?'</code>，则需要特别处理：<ul><li>替换为 <code>k + 1</code>，确保首位不是 <code>'0'</code>。</li><li>检查 <code>k + 1</code> 是否小于 <code>10</code>，否则无法替换为单个数字，返回 <code>-1</code>。</li></ul></li></ul></li></ol><h4 id="代码解析">代码解析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    s = <span class="hljs-built_in">list</span>(s)<br>    <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;0&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;-1&quot;</span><br>    k -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&quot;?&quot;</span>:<br>            s[i] = <span class="hljs-built_in">str</span>(k % <span class="hljs-number">10</span>)<br>            k //= <span class="hljs-number">10</span><br>    <span class="hljs-comment"># 处理首位是 &#x27;?&#x27; 的情况</span><br>    <span class="hljs-keyword">if</span> s[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;?&quot;</span> <span class="hljs-keyword">and</span> k + <span class="hljs-number">1</span> &lt; <span class="hljs-number">10</span>:<br>        s[<span class="hljs-number">0</span>] = <span class="hljs-built_in">str</span>(k + <span class="hljs-number">1</span>)<br>        k = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 如果 k 不等于 0，说明没有找到第 k 小的数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(s) <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;-1&quot;</span><br></code></pre></td></tr></table></figure><h4 id="复杂度分析">复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是模板串的长度。需要遍历字符串一次进行替换。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，用于存储字符串的列表形式。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>217小R的雪球滚落计算</title>
    <link href="/2024/12/25/217%E5%B0%8FR%E7%9A%84%E9%9B%AA%E7%90%83%E6%BB%9A%E8%90%BD%E8%AE%A1%E7%AE%97/"/>
    <url>/2024/12/25/217%E5%B0%8FR%E7%9A%84%E9%9B%AA%E7%90%83%E6%BB%9A%E8%90%BD%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1>题解</h1><h2 id="问题描述">问题描述</h2><p>在一座高度为 $H$ 的山上，每个高度 $i$ 处生成了 $a_i$ 个雪球。当雪球从海拔高度 $i$ 滚到地面时，它的体积会膨胀 $x^i$ 倍。也就是说，雪球的初始体积为 $1$，滚动距离 $i$ 会使体积变成 $1 \times x^i$。我们需要计算所有滚落到地面的雪球的总体积，并对结果取模 $10^9 + 7$。</p><h2 id="思路">思路</h2><ol><li><p><strong>理解雪球体积膨胀规则</strong>：</p><ul><li>每个雪球从高度 $i$ 滚落到地面时，其体积变为 $x^i$。</li><li>同一高度 $i$ 处有 $a_i$ 个雪球，因此该高度的雪球总体积为 $a_i \times x^i$。</li></ul></li><li><p><strong>计算总体积</strong>：</p><ul><li>对所有高度 $i$，计算 $a_i \times x^i$ 的总和。</li><li>由于体积可能会非常大，需要在计算过程中对每一项取模 $10^9 + 7$，最终结果也取模。</li></ul></li><li><p><strong>优化幂运算</strong>：</p><ul><li>使用 Python 内置的 <code>pow</code> 函数，利用其三个参数形式 <code>pow(x, i + 1, mod)</code>，高效计算 $x^{i+1} \mod (10^9 + 7)$。</li></ul></li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">H: <span class="hljs-built_in">int</span>, x: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">pow</span>(x, i + <span class="hljs-number">1</span>, mod) * a[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a))) % mod<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]) == <span class="hljs-number">2830</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]) == <span class="hljs-number">55</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]) == <span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><h2 id="复杂度分析">复杂度分析</h2><ul><li><strong>时间复杂度</strong>：$O(nlog(n))$，其中 $n$ 是数组 $a$ 的长度。每个雪球体积的计算需要 $O(log(n))$ 的时间复杂度。</li><li><strong>空间复杂度</strong>：$O(1)$，只使用了常数空间存储结果。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>快速幂</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>213小R的排列挑战</title>
    <link href="/2024/12/25/213%E5%B0%8FR%E7%9A%84%E6%8E%92%E5%88%97%E6%8C%91%E6%88%98/"/>
    <url>/2024/12/25/213%E5%B0%8FR%E7%9A%84%E6%8E%92%E5%88%97%E6%8C%91%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1>题解</h1><p>小 R 有一个长度为 n 的排列，排列中的数字是 1 到 n 的整数。她每次操作可以选择两个数<code>a_i</code>和<code>a_j</code>进行交换，前提是这两个数的下标 i 和 j 的奇偶性相同（即同为奇数或同为偶数）。目标是通过最少的操作使数组变成升序排列，如果无法实现则输出-1。</p><h2 id="思路">思路</h2><ol><li><p><strong>下标分组</strong>：将数组根据下标的奇偶性分为两部分：</p><ul><li>奇数下标元素（0-based，即索引为 0,2,4,…）</li><li>偶数下标元素（索引为 1,3,5,…）</li></ul></li><li><p><strong>排序验证</strong>：</p><ul><li>奇数下标的元素在最终的升序排列中应该是奇数序列，即<code>1,3,5,...</code>。</li><li>如果奇数下标的排序结果不符合预期，则无法通过交换操作将数组排序，返回-1。</li></ul></li><li><p><strong>逆序数计算</strong>：</p><ul><li>分别计算奇数下标和偶数下标部分的逆序数。</li><li>逆序数代表需要多少次交换才能使该部分有序。</li><li>总交换次数为奇数下标和偶数下标部分的逆序数之和。</li></ul></li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-comment"># from bisect import bisect_right</span><br><span class="hljs-comment"># class BIT:</span><br><span class="hljs-comment">#     def __init__(self, n):</span><br><span class="hljs-comment">#         self.tree = [0] * n  # 注意下标从1开始</span><br><br><span class="hljs-comment">#     def lowbit(self, x):</span><br><span class="hljs-comment">#         return x &amp; (-x)</span><br><br><span class="hljs-comment">#     # arr[i] += val</span><br><span class="hljs-comment">#     def update(self, i, val):</span><br><span class="hljs-comment">#         while i &lt; len(self.tree):</span><br><span class="hljs-comment">#             self.tree[i] += val</span><br><span class="hljs-comment">#             i += self.lowbit(i)</span><br><br><span class="hljs-comment">#     # 返回arr[:i+1]的sum</span><br><span class="hljs-comment">#     def query(self, i):</span><br><span class="hljs-comment">#         res = 0</span><br><span class="hljs-comment">#         while i &gt; 0:</span><br><span class="hljs-comment">#             res += self.tree[i]</span><br><span class="hljs-comment">#             i -= self.lowbit(i)</span><br><span class="hljs-comment">#         return res</span><br><span class="hljs-comment"># 树状数组求解逆序对，时间复杂度为nlogn</span><br><span class="hljs-comment"># def inv(a):</span><br><span class="hljs-comment">#     n = len(a)</span><br><span class="hljs-comment">#     res = 0</span><br><span class="hljs-comment">#     tree = BIT(n + 1)</span><br><span class="hljs-comment">#     b = sorted(a)</span><br><span class="hljs-comment">#     for x in a:</span><br><span class="hljs-comment">#         i = bisect_right(b, x)</span><br><span class="hljs-comment">#         res += tree.query(n) - tree.query(i)</span><br><span class="hljs-comment">#         tree.update(i, 1)</span><br><span class="hljs-comment">#     return res</span><br><br><span class="hljs-comment"># 暴力求解逆序对，时间复杂度为n²</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inv</span>(<span class="hljs-params">a</span>):<br>    n = <span class="hljs-built_in">len</span>(a)<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">if</span> a[i] &gt; a[j]:<br>                res += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    odd, even = [], []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            odd.append(a[i])<br>        <span class="hljs-keyword">else</span>:<br>            even.append(a[i])<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">sorted</span>(odd) != <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)):<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> inv(odd) + inv(even)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) == <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]) == -<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">6</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]) == -<span class="hljs-number">1</span>)<br><br><br></code></pre></td></tr></table></figure><h2 id="复杂度分析">复杂度分析</h2><ul><li><strong>时间复杂度</strong>：O(n²)，主要由逆序数的双重循环计算决定。(可以用树状数组求解逆序对，时间复杂度为 O(nlogn))</li><li><strong>空间复杂度</strong>：O(n)，用于存储奇数和偶数下标的元素。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>逆序对</tag>
      
      <tag>树状数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>214小R的权值计算</title>
    <link href="/2024/12/25/214%E5%B0%8FR%E7%9A%84%E6%9D%83%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    <url>/2024/12/25/214%E5%B0%8FR%E7%9A%84%E6%9D%83%E5%80%BC%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><h3 id="问题理解">问题理解</h3><p>给定一个长度为 <code>n</code> 的数组 <code>a</code>，小 R 定义任意子数组的权值为 <code>1×b₁ + 2×b₂ + ... + m×bₘ</code>，其中 <code>m</code> 是子数组的长度，<code>b₁, b₂, ..., bₘ</code> 是子数组中的元素。要求计算所有子数组权值的和，结果需对 <code>10^9 + 7</code> 取模。</p><h3 id="解题思路">解题思路</h3><blockquote><p>b1 b2 b3 b4 b5<br>b1+2b2 b2+2b3 b3+2b4 b4+2b5<br>b1+2b2+3b3 b2+2b3+3b4 b3+2b4+3b5<br>b1+2b2+3b3+4b4 b2+2b3+3b4+4b5<br>b1+2b2+3b3+4b4+5b5<br>根据规律可以看出长度为 length 的子数组转移的时候，只需要加上 length*a[i] - (s[i-1] - s[i-length-1])即可</p></blockquote><ol><li><p><strong>前缀和计算</strong>：<br>使用前缀和 <code>s</code> 来快速计算任意子数组的元素和，<code>s[i]</code> 表示前 <code>i</code> 个元素的和。</p></li><li><p><strong>权值计算</strong>：<br>对于每个子数组长度 <code>length</code>，遍历所有可能的子数组，计算当前子数组的权值 <code>cur</code>。</p><ul><li>初始时，计算第一个长度为 <code>length</code> 的子数组的权值。</li><li>随着窗口的滑动，通过更新 <code>cur</code> 来计算下一个子数组的权值：<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">cur += length * a<span class="hljs-comment">[i]</span> - (s<span class="hljs-comment">[i - 1]</span> - s<span class="hljs-comment">[i - length - 1]</span>)<br></code></pre></td></tr></table></figure>这里，<code>length * a[i]</code> 是新加入元素对权值的贡献，<code>(s[i - 1] - s[i - length - 1])</code> 是窗口内之前元素权值的调整。</li></ul></li></ol><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> accumulate<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    res = <span class="hljs-number">0</span><br>    a = [<span class="hljs-number">0</span>] + a<br>    s = <span class="hljs-built_in">list</span>(accumulate(a))<br>    <span class="hljs-comment"># 枚举子数组的长度</span><br>    <span class="hljs-keyword">for</span> length <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        cur = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, length + <span class="hljs-number">1</span>):<br>            cur += a[i] * i<br>        res = (res + cur) % mod<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length + <span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            cur += length * a[i] - (s[i - <span class="hljs-number">1</span>] - s[i - length - <span class="hljs-number">1</span>])<br>            res = (res + cur) % mod<br>    <span class="hljs-keyword">return</span> res % mod<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) == <span class="hljs-number">33</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]) == <span class="hljs-number">203</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">2</span>, [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>]) == <span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>枚举</tag>
      
      <tag>前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>211小R的并集大小期望计算</title>
    <link href="/2024/12/24/211%E5%B0%8FR%E7%9A%84%E5%B9%B6%E9%9B%86%E5%A4%A7%E5%B0%8F%E6%9C%9F%E6%9C%9B%E8%AE%A1%E7%AE%97/"/>
    <url>/2024/12/24/211%E5%B0%8FR%E7%9A%84%E5%B9%B6%E9%9B%86%E5%A4%A7%E5%B0%8F%E6%9C%9F%E6%9C%9B%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h3 id="题解">题解</h3><p>小 R 有<code>n</code>个集合，每个集合中的元素都是唯一的且互不相同。她希望通过随机选择两个集合，并计算它们的并集大小，来求出并集大小的期望值。结果需要保留两位小数。题目保证输入至少有两个集合。</p><h4 id="问题分析">问题分析</h4><p>要计算随机选择两个集合的并集大小的期望值，关键在于确定每个元素在这两个集合的并集中出现的概率。具体步骤如下：</p><ol><li><p><strong>元素出现次数统计</strong>：</p><ul><li>首先统计每个元素在所有集合中出现的次数。即，元素<code>x</code>出现于<code>v</code>个不同的集合中。</li></ul></li><li><p><strong>计算每个元素在并集中出现的概率</strong>：</p><ul><li><p>对于一个元素<code>x</code>，它至少出现在所选的两个集合中的一个的概率，可以通过以下公式计算：<br>$$<br>P(x \text{ 出现在并集中}) = 1 - P(x \text{ 不出现在两个集合中})<br>$$</p></li><li><p><code>x</code>不出现在两个集合中的概率为：</p><p>$$<br>P(x \text{ 不出现在两个集合中}) = \frac{\binom{n - v}{2}}{\binom{n}{2}}<br>$$</p><p>其中，(\binom{n}{2}) 表示从<code>n</code>个集合中选取两个集合的组合数。</p></li><li><p>因此，<code>x</code>出现在并集中的概率为：<br>$$<br>P(x \text{ 出现在并集中}) = 1 - \frac{(n - v) \times (n - v - 1)}{n \times (n - 1)}<br>$$</p></li></ul></li><li><p><strong>计算期望值</strong>：</p><ul><li>期望值为所有元素在并集中出现概率的总和，即：<br>$$<br>\text{期望值} = \sum_{x} P(x \text{ 出现在并集中})<br>$$</li></ul></li><li><p><strong>结果格式化</strong>：</p><ul><li>最终的期望值需要保留两位小数。</li></ul></li></ol><h4 id="代码解析">代码解析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, st: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-comment"># 统计所有元素在所有集合中出现的次数</span><br>    cnt = Counter([i <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> st <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s])<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> cnt.items():<br>        <span class="hljs-comment"># 对于每个元素，计算其出现在并集中的概率，并累加到结果中</span><br>        res += n * (n - <span class="hljs-number">1</span>) - (n - v) * (n - v - <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 计算期望值并格式化为两位小数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(res / (n * (n - <span class="hljs-number">1</span>)))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">2</span>, [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]]) == <span class="hljs-string">&#x27;4.00&#x27;</span>)      <span class="hljs-comment"># 输出: True</span><br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, [[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]]) == <span class="hljs-string">&#x27;4.67&#x27;</span>)  <span class="hljs-comment"># 输出: True</span><br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">2</span>, [[<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">70</span>]]) == <span class="hljs-string">&#x27;5.00&#x27;</span>)  <span class="hljs-comment"># 输出: True</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>209 小R的子数组权值</title>
    <link href="/2024/12/24/209%E5%B0%8FR%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E6%9D%83%E5%80%BC/"/>
    <url>/2024/12/24/209%E5%B0%8FR%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E6%9D%83%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="题解">题解</h2><h3 id="题目描述">题目描述</h3><p>小 R 有一个长度为 <code>n</code> 的数组 <code>a</code>，她定义每个子区间 <code>[l, r]</code> 的权值为 <code>a[l] | a[l+1] | ... | a[r]</code>，即该区间内所有元素的按位或运算结果。小 R 非常好奇，在这 <code>n × (n + 1) / 2</code> 个子区间中，究竟有多少种不同的权值。</p><h3 id="解题思路">解题思路</h3><p>对于两个二进制数 <code>a</code> 和 <code>b</code>，如果满足 <code>a &amp; b = a</code>，从集合的角度来看，<code>a</code> 对应的集合是 <code>b</code> 对应集合的子集。</p><ol><li><p><strong>遍历数组</strong>：仍然从左到右遍历数组 <code>a</code>，对于当前元素 <code>x = a[i]</code>。</p></li><li><p><strong>反向遍历更新</strong>：从索引 <code>i-1</code> 开始，向前遍历 <code>a[j]</code>：</p><ul><li><p><strong>检查子集关系</strong>：</p><ul><li><p>如果 <code>a[j] &amp; x != a[j]</code>，说明 <code>a[j]</code> 可以通过与 <code>x</code> 进行按位与运算而变小（即集合元素减少）。此时，更新 <code>a[j] = a[j] &amp; x</code>，并将更新后的值加入结果集合 <code>res</code> 中。</p></li><li><p>如果 <code>a[j] &amp; x == a[j]</code>，则 <code>x</code> 是 <code>a[j]</code> 的超集。同时，由于之前的遍历已经保证了每个集合都是其左侧相邻集合的超集，<code>x</code> 也必然是所有左侧集合的超集。在这种情况下，进一步的遍历将不会导致任何集合的变化，因此可以直接退出内层循环，提高算法效率。</p></li></ul></li></ul></li></ol><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">a</span>):<br>    res = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(a):<br>        res.add(x)<br>        j = i - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> j &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> a[j] | x != a[j]:<br>            a[j] |= x<br>            res.add(a[j])<br>            j -= <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(res)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]) == <span class="hljs-number">6</span>)<br>    <span class="hljs-built_in">print</span>(solution([<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>]) == <span class="hljs-number">8</span>)<br>    <span class="hljs-built_in">print</span>(solution([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution([<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]) == <span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><h3 id="复杂度分析">复杂度分析</h3><ul><li><strong>时间复杂度</strong>：<code>O(nlog(U))</code>，其中 <code>n</code> 是数组的长度。<code>U</code>是数组中的最大值</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，用于存储不同的权值。</li></ul><h3 id="参考文献">参考文献</h3><ul><li><a href="https://leetcode.cn/problems/number-of-subarrays-with-and-value-of-k/">LeetCode - Number of Subarrays With AND Value of K</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>logTrick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>203小Q和小X的游戏</title>
    <link href="/2024/12/23/203%E5%B0%8FQ%E5%92%8C%E5%B0%8FX%E7%9A%84%E6%B8%B8%E6%88%8F/"/>
    <url>/2024/12/23/203%E5%B0%8FQ%E5%92%8C%E5%B0%8FX%E7%9A%84%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<h1>203 小 Q 和小 X 的游戏</h1><h2 id="问题描述">问题描述</h2><p>小 Q 和小 X 是很好的朋友，她们正在玩一个游戏。她们拿到了一个数组，游戏开始时小 Q 随机选择一个元素作为起点。接着，两人轮流行动，小 Q 先行动。</p><p>每次行动时，当前玩家需要选择当前元素左边比它更小的元素，然后移动到该元素，接下来换另一方从这个元素继续移动。如果某一方无法进行合法的移动，则该方输掉游戏。</p><p>小 Q 想知道，在双方都采取最优策略的情况下，她最终获胜的概率是多少？请输出分数的最简形式，即分子和分母互素。如果小 Q 必胜，则输出 <code>1/1</code>。如果小 Q 必败，则输出 <code>0/1</code>。</p><h2 id="解题思路">解题思路</h2><p>因为起点是随机的，那么一共有 $n$ 种可能的起点。对于每个起点，我们可以通过模拟游戏的过程来判断小 Q 是否能获胜。</p><p>因为双方都采取最优策略，如果当前位置左边没有比它更小的元素，那么当前玩家必败。否则先手的小 Q 可以直接移动到左边的最小元素获得胜利。因此，我们可以通过统计当前位置左边是否存在比它更小的元素来判断小 Q 是否能获胜。</p><h2 id="代码实现">代码实现</h2><p>以下是基于上述思路的 Python 代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    mi = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>    cnt = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> a[i] &gt; mi:<br>            cnt += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            mi = a[i]<br>    <span class="hljs-comment"># 计算最大公约数，化简分数</span><br>    g = gcd(cnt, n)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;cnt//g&#125;</span>/<span class="hljs-subst">&#123;n//g&#125;</span>&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>]) == <span class="hljs-string">&#x27;3/5&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">6</span>, [<span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>]) == <span class="hljs-string">&#x27;2/3&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, [<span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>]) == <span class="hljs-string">&#x27;1/4&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>思维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>193小K的区间与值和</title>
    <link href="/2024/12/23/193%E5%B0%8FK%E7%9A%84%E5%8C%BA%E9%97%B4%E4%B8%8E%E5%80%BC%E5%92%8C/"/>
    <url>/2024/12/23/193%E5%B0%8FK%E7%9A%84%E5%8C%BA%E9%97%B4%E4%B8%8E%E5%80%BC%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1>193 小 K 的区间与值和</h1><h2 id="问题描述">问题描述</h2><p>小 K 有一个长度为 <code>n</code> 的数组 <code>a</code>，她定义数组的权值为数组中任意两个数按位与（bitwise AND）的值之和。具体来说，对于数组中的每个连续子数组，我们可以计算所有可能的两个元素的按位与值之和，并将这些值相加。小 K 想知道该数组中所有可能的连续子数组的权值和是多少，最后结果对 $10^9 + 7$ 取模。</p><h2 id="解题思路">解题思路</h2><p>为了高效地计算所有连续子数组的权值和，我们需要找到一种方法避免枚举所有可能的子数组和其中的元素对。这可以通过逐位考虑每一位的贡献来实现。</p><p>具体步骤如下：</p><ol><li><p><strong>逐位处理</strong>：对于每一位 <code>i</code>（从第 0 位到第 31 位），计算该位在所有连续子数组中的贡献总和。</p></li><li><p><strong>统计位为 1 的情况</strong>：在数组中，如果某个元素的第 <code>i</code> 位为 1，那么它可以与之前位为 1 的元素形成按位与为 <code>1 &lt;&lt; i</code> 的对。</p></li><li><p><strong>计算子数组数量</strong>：对于 <code>nums[j]</code> 的每一位，考虑每个 <code>pair(i, j)</code> 满足 <code>nums[i] &amp; nums[j] = 1</code>，包含 <code>nums[i:j]</code> 的连续子数组左端点选择范围为 <code>[0 - i]</code>，右端点 <code>[j, n - 1]</code>，一共 <code>(i + 1) * (n - j)</code> 个。对于当前位置 <code>j</code>，我们可以统计出满足条件的 <code>i</code> 的个数累加起来，那么对于当前位置 <code>j</code>，满足条件的子数组个数为 <code>cnt * (n - j)</code>。</p></li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, a: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        cnt = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">if</span> a[j] &gt;&gt; i &amp; <span class="hljs-number">1</span>:      <span class="hljs-comment"># 当前位是1</span><br>                res += cnt * (n - j) * (<span class="hljs-number">1</span> &lt;&lt; i)<br>                res %= mod<br>                cnt += j + <span class="hljs-number">1</span>  <span class="hljs-comment"># 统计满足条件的i的个数</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]) == <span class="hljs-number">16</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]) == <span class="hljs-number">25</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">10</span>]) == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">16</span>]) == <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 算法常用库函数</title>
    <link href="/2024/12/23/1/"/>
    <url>/2024/12/23/1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍一些常用的 py 库函数</p></blockquote><h2 id="内置函数">内置函数</h2><ol><li><p><code>abs(x)</code><br>返回一个数字的绝对值。参数可以是整数、浮点数、复数等。如果参数是一个复数，则返回它的模。</p></li><li><p><code>all(iterable)</code><br>如果 iterable 的所有元素均为真值（或可迭代对象为空）则返回 True 。<br>示例代码:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nums</span> =<span class="hljs-meta"> [1, 2, 3, 4, 5]</span><br><span class="hljs-comment"># 检查是否所有元素都是偶数</span><br><span class="hljs-attribute">print</span>(<span class="hljs-literal">all</span>(x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> for x in nums))  # False<br></code></pre></td></tr></table></figure></li><li><p><code>any(iterable)</code></p><p>如果 iterable 的任一元素为真值则返回 True。 如果可迭代对象为空，返回 False。<br>例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nums</span> =<span class="hljs-meta"> [1, 2, 3, 4, 5]</span><br><span class="hljs-comment"># 检查列表中是否包含偶数</span><br><span class="hljs-attribute">print</span>(any(x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> for x in nums))  # True<br></code></pre></td></tr></table></figure></li><li><p><code>bin(x)</code><br>将一个整数转换为带前缀 “0b” 的二进制数字符串。<br>例:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">print</span>(bin(<span class="hljs-number">5</span>)) # <span class="hljs-number">0b101</span><br><span class="hljs-built_in">print</span>(bin(-<span class="hljs-number">6</span>)) # -<span class="hljs-number">0b110</span><br></code></pre></td></tr></table></figure></li><li><p><code>chr(i)</code> 和 <code>ord(c)</code><br>这两个函数互为逆函数。<br><code>chr(i)</code>返回 Unicode 码位为整数<code>i</code> 的字符的字符串格式。<br><code>ord(c)</code>对表示单个 Unicode 字符的字符串，返回代表它 Unicode 码点的整数。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">chr</span>(<span class="hljs-number">97</span>))  <span class="hljs-comment"># &#x27;a&#x27;</span><br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)) <span class="hljs-comment"># 97</span><br></code></pre></td></tr></table></figure></li><li><p><code>divmod(a, b)</code><br>接受两个数字作为参数并返回由当对其使用整数除法时的商和余数组成的数字对。 结果与 (a // b, a % b) 相同。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>, b = divmod(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>)  # a = <span class="hljs-number">3</span>, b = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p><code>enumerate(iterable, start=0)</code><br>传入一个可迭代对象返回一个元组，里面包含一个计数值（从 start 开始，默认为 0）和通过迭代 iterable 获得的值。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nums</span> =<span class="hljs-meta"> [100, 200, 300, 400, 500]</span><br><span class="hljs-comment"># [(1, 100), (2, 200), (3, 300), (4, 400), (5, 500)]</span><br><span class="hljs-attribute">print</span>(list(enumerate(nums, <span class="hljs-number">1</span>)))<br></code></pre></td></tr></table></figure></li><li><p><code>eval(expression)</code><br>用来执行一个字符串表达式，并返回表达式的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">s = <span class="hljs-string">&quot;1 + 2 * 3 + 8 // 4&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(s))  <span class="hljs-comment"># 9</span><br></code></pre></td></tr></table></figure></li><li><p><code>int(x, base=10)</code><br>将一个字符串或数字转换为整数。如果第二个参数 base 给出，则 x 必须是一个字符串，表示进制数（如 2 表示二进制，8 表示八进制，10 表示十进制，16 表示十六进制）。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;5&#x27;</span>))  <span class="hljs-meta"># 5</span><br><span class="hljs-keyword">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;1010&#x27;</span>, <span class="hljs-number">2</span>))  <span class="hljs-meta"># 10</span><br></code></pre></td></tr></table></figure></li><li><p><code>max(iterable, *[, key, default])</code> 和 <code>min(iterable, *[, key, default])</code><br>大家都知道这两个函数的作用，需要注意的是，如果传入的可迭代对象为空，会抛出 <em>ValueError</em> 异常。可以通过 default 参数设置默认返回值。</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs monkey">nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(nums))<span class="hljs-meta">  # 5</span><br>nums2 = []<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(nums2))<span class="hljs-meta">  # ValueError: max() arg is an empty sequence</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(nums2, <span class="hljs-keyword">default</span>=<span class="hljs-number">0</span>))<span class="hljs-meta">  # 0</span><br></code></pre></td></tr></table></figure></li></ol><p>11.<code>pow(base, exp, mod=None)</code><br>返回<em>base</em>的 exp 次幂；如果 mod 存在，则返回结果对 mod 取模。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">print</span>(pow(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  # <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python 算法 库函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 算法常用库函数</title>
    <link href="/2024/12/23/Python%E5%BA%93%E5%87%BD%E6%95%B0/"/>
    <url>/2024/12/23/Python%E5%BA%93%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍一些常用的 py 库函数</p></blockquote><h2 id="内置函数">内置函数</h2><h3 id="1-1-abs-x">1.1 <code>abs(x)</code></h3><p>返回一个数字的绝对值。参数可以是整数、浮点数、复数等。如果参数是一个复数，则返回它的模。</p><h3 id="1-2-all-iterable">1.2 <code>all(iterable)</code></h3><p>如果 iterable 的所有元素均为真值（或可迭代对象为空）则返回 True 。<br>示例代码:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nums</span> =<span class="hljs-meta"> [1, 2, 3, 4, 5]</span><br><span class="hljs-comment"># 检查是否所有元素都是偶数</span><br><span class="hljs-attribute">print</span>(<span class="hljs-literal">all</span>(x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> for x in nums))  # False<br></code></pre></td></tr></table></figure><h3 id="1-3-any-iterable">1.3 <code>any(iterable)</code></h3><p>如果 iterable 的任一元素为真值则返回 True。 如果可迭代对象为空，返回 False。<br>例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nums</span> =<span class="hljs-meta"> [1, 2, 3, 4, 5]</span><br><span class="hljs-comment"># 检查列表中是否包含偶数</span><br><span class="hljs-attribute">print</span>(any(x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> for x in nums))  # True<br></code></pre></td></tr></table></figure><h3 id="1-4-bin-x">1.4 <code>bin(x)</code></h3><p>将一个整数转换为带前缀 “0b” 的二进制数字符串。<br>例:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">print</span>(bin(<span class="hljs-number">5</span>)) # <span class="hljs-number">0b101</span><br><span class="hljs-built_in">print</span>(bin(-<span class="hljs-number">6</span>)) # -<span class="hljs-number">0b110</span><br></code></pre></td></tr></table></figure><h3 id="1-5-chr-i-和-ord-c">1.5 <code>chr(i)</code> 和 <code>ord(c)</code></h3><p>这两个函数互为逆函数。<br><code>chr(i)</code>返回 Unicode 码位为整数<code>i</code> 的字符的字符串格式。<br><code>ord(c)</code>对表示单个 Unicode 字符的字符串，返回代表它 Unicode 码点的整数。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">chr</span>(<span class="hljs-number">97</span>))  <span class="hljs-comment"># &#x27;a&#x27;</span><br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)) <span class="hljs-comment"># 97</span><br></code></pre></td></tr></table></figure><h3 id="1-6-divmod-a-b">1.6 <code>divmod(a, b)</code></h3><p>接受两个数字作为参数并返回由当对其使用整数除法时的商和余数组成的数字对。 结果与 (a // b, a % b) 相同。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>, b = divmod(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>)  # a = <span class="hljs-number">3</span>, b = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="1-7-enumerate-iterable-start-0">1.7 <code>enumerate(iterable, start=0)</code></h3><p>传入一个可迭代对象返回一个元组，里面包含一个计数值（从 start 开始，默认为 0）和通过迭代 iterable 获得的值。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nums</span> =<span class="hljs-meta"> [100, 200, 300, 400, 500]</span><br><span class="hljs-comment"># [(1, 100), (2, 200), (3, 300), (4, 400), (5, 500)]</span><br><span class="hljs-attribute">print</span>(list(enumerate(nums, <span class="hljs-number">1</span>)))<br></code></pre></td></tr></table></figure><h3 id="1-8-eval-expression">1.8 <code>eval(expression)</code></h3><p>用来执行一个字符串表达式，并返回表达式的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">s = <span class="hljs-string">&quot;1 + 2 * 3 + 8 // 4&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(s))  <span class="hljs-comment"># 9</span><br></code></pre></td></tr></table></figure><h3 id="1-9-int-x-base-10">1.9 <code>int(x, base=10)</code></h3><p>将一个字符串或数字转换为整数。如果第二个参数 base 给出，则 x 必须是一个字符串，表示进制数（如 2 表示二进制，8 表示八进制，10 表示十进制，16 表示十六进制）。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;5&#x27;</span>))  <span class="hljs-meta"># 5</span><br><span class="hljs-keyword">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;1010&#x27;</span>, <span class="hljs-number">2</span>))  <span class="hljs-meta"># 10</span><br></code></pre></td></tr></table></figure><h3 id="1-10-max-iterable-key-default-和-min-iterable-key-default">1.10 <code>max(iterable, *[, key, default])</code> 和 <code>min(iterable, *[, key, default])</code></h3><p>大家都知道这两个函数的作用，需要注意的是，如果传入的可迭代对象为空，会抛出 <em>ValueError</em> 异常。可以通过 default 参数设置默认返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(nums))  <span class="hljs-comment"># 5</span><br>nums2 = []<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(nums2))  <span class="hljs-comment"># ValueError: max() arg is an empty sequence</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(nums2, default=<span class="hljs-number">0</span>))  <span class="hljs-comment"># 0</span><br></code></pre></td></tr></table></figure><h3 id="1-11-pow-base-exp-mod-None">1.11 <code>pow(base, exp, mod=None)</code></h3><p>返回<em>base</em>的 exp 次幂；如果 mod 存在，则返回结果对 mod 取模。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-number">10</span>**<span class="hljs-number">9</span> + <span class="hljs-number">7</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">100</span>, mod))  <span class="hljs-comment"># 703687441</span><br></code></pre></td></tr></table></figure><blockquote><p>在 3.8 版本 pow 函数支持求逆元</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, mod))  <span class="hljs-comment"># 500000004</span><br><span class="hljs-comment"># 等价于</span><br>inv = <span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">pow</span>(x, mod - <span class="hljs-number">2</span>, mod)<br><span class="hljs-built_in">print</span>(inv(<span class="hljs-number">2</span>))  <span class="hljs-comment"># 500000004</span><br></code></pre></td></tr></table></figure><h3 id="1-12-round-number-ndigits">1.12 <code>round(number[, ndigits])</code></h3><p>返回浮点数 number 的四舍五入值，如果给出 ndigits 参数，返回值将根据 ndigits 的值四舍五入到小数点后的位数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">3.1415926</span>))  <span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">3.1415926</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 3.14</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：round 函数的行为可能会有一些意外，例如 round(2.675, 2) 的结果是 2.67 而不是 2.68。</p></blockquote><h3 id="1-13-sorted-iterable-key-None-reverse-False">1.13 <code>sorted(iterable, *, key=None, reverse=False)</code></h3><p>返回一个排序后的列表。key 参数用于指定一个函数，用于从每个列表元素中提取用于比较的键。reverse 参数用于指定排序顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(nums))  <span class="hljs-comment"># [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(nums, reverse=<span class="hljs-literal">True</span>))  <span class="hljs-comment"># [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]</span><br></code></pre></td></tr></table></figure><h3 id="1-14-str-x">1.14 <code>str(x)</code></h3><p>返回一个字符串对象。如果 x 不是字符串，则返回表示 x 的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-number">123</span>))  <span class="hljs-comment"># &#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="1-15-sum-iterable-start-0">1.15 <code>sum(iterable, start=0)</code></h3><p>返回一个迭代器的总和。如果提供 start 参数，则会将 start 添加到总和中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(nums))  <span class="hljs-comment"># 15</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(nums, <span class="hljs-number">10</span>))  <span class="hljs-comment"># 25</span><br></code></pre></td></tr></table></figure><h3 id="1-16-zip-iterables">1.16 <code>zip(*iterables)</code></h3><p>在多个迭代器上并行迭代，从每个迭代器返回一个数据项组成元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>letters = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(nums, letters)))  <span class="hljs-comment"># [(1, &#x27;a&#x27;), (2, &#x27;b&#x27;), (3, &#x27;c&#x27;)]</span><br></code></pre></td></tr></table></figure><p>一个很好用的技巧是 zip 可以把矩阵的行变成列，列变成行，类似矩阵转置操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">g = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(*g):<br>  <span class="hljs-built_in">print</span>(row)<br><span class="hljs-comment"># (1, 4, 7)</span><br><span class="hljs-comment"># (2, 5, 8)</span><br><span class="hljs-comment"># (3, 6, 9)</span><br></code></pre></td></tr></table></figure><h2 id="2-collections-容器数据类型">2. collections 容器数据类型</h2><h3 id="2-1-deque">2.1 deque</h3><p>类似列表的容器，经常当作双端队列使用. append 和 pop 在其两端的速度都很快。<br>其中四个常用函数：<br><code>append(x)</code>：在右侧添加一个元素 x。<br><code>appendleft(x)</code>：在左侧添加一个元素 x。<br><code>pop()</code>：移除并返回最右侧的元素.<br><code>popleft()</code>：移除并返回最左侧的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">q = deque([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>q.append(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(q)  <span class="hljs-comment"># deque([1, 2, 3, 4])</span><br>q.appendleft(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(q)  <span class="hljs-comment"># deque([0, 1, 2, 3, 4])</span><br><span class="hljs-built_in">print</span>(q.pop())  <span class="hljs-comment"># 4</span><br><span class="hljs-built_in">print</span>(q)  <span class="hljs-comment"># deque([0, 1, 2, 3])</span><br><span class="hljs-built_in">print</span>(q.popleft()) <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(q)  <span class="hljs-comment"># deque([1, 2, 3])</span><br></code></pre></td></tr></table></figure><h3 id="2-2-defaultdict">2.2 defaultdict</h3><p>字典的子类，通过调用用户指定的工厂函数，为键提供默认值。<br>可以当成带默认值的字典使用。可以通过传入 int、list、set 等函数作为参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">d = defaultdict(<span class="hljs-built_in">int</span>)<br>d[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(d[<span class="hljs-string">&#x27;a&#x27;</span>])  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(d[<span class="hljs-string">&#x27;b&#x27;</span>])  <span class="hljs-comment"># 0</span><br>d = defaultdict(<span class="hljs-built_in">list</span>)<br>d[<span class="hljs-string">&#x27;a&#x27;</span>].append(<span class="hljs-number">1</span>)<br>d[<span class="hljs-string">&#x27;a&#x27;</span>].append(<span class="hljs-number">2</span>)<br>d[<span class="hljs-string">&#x27;b&#x27;</span>].append(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(d)  <span class="hljs-comment"># defaultdict(&lt;class &#x27;list&#x27;&gt;, &#123;&#x27;a&#x27;: [1, 2], &#x27;b&#x27;: [3]&#125;)</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> d.items():<br>  <span class="hljs-built_in">print</span>(key, value)<br><span class="hljs-comment"># a [1, 2]</span><br><span class="hljs-comment"># b [3]</span><br></code></pre></td></tr></table></figure><h3 id="2-3-Counter">2.3 Counter</h3><p>一个计数器工具, 提供快速和方便的计数方法。可以用于计数任何可哈希对象。元素存储为字典的键而它们的计数存储为字典的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 它和defaultdict(int) 类似，但是它可以支持初始化时传入一个可迭代对象</span><br>cnt = Counter([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-comment"># 其他用法和 defaultdict(int) 类似</span><br><br><span class="hljs-comment"># 但是Counter有一个好用的方法是most_common(n)方法，返回一个列表，其中包含 n 个最常见的元素及其计数。</span><br>cnt = Counter([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(cnt.most_common(<span class="hljs-number">2</span>))  <span class="hljs-comment"># [(3, 5), (1, 4)]</span><br></code></pre></td></tr></table></figure><h2 id="3-heapq-堆队列算法">3. heapq 堆队列算法</h2><h3 id="3-1-heapify-x">3.1 heapify(x)</h3><p>将 list x 转换成堆，原地，线性时间内。</p><h3 id="3-2-heappush-heap-item">3.2 heappush(heap, item)</h3><p>将 item 的值加入 heap 中，保持堆的不变性。</p><h3 id="3-3-heappop-heap">3.3 heappop(heap)</h3><p>弹出并返回 heap 的最小的元素，保持堆的不变性。</p><h3 id="3-4-heapreplace-heap-item">3.4 heapreplace(heap, item)</h3><p>弹出并返回 heap 中最小的一项，同时推入新的 item。 堆的大小不变。</p><h3 id="3-5-heappushpop-heap-item">3.5 heappushpop(heap, item)</h3><p>将 item 放入堆中，然后弹出并返回 heap 的最小元素。</p><h3 id="3-6-nlargest-n-iterable-key-None-和-nsmallest-n-iterable-key-None">3.6 nlargest(n, iterable, key=None) 和 nsmallest(n, iterable, key=None)</h3><p>从 iterable 所定义的数据集中返回前 n 个最大/最小元素组成的列表。 如果提供了 key 则其应指定一个单参数的函数</p><blockquote><p>注意 [heapify] 初始化生成的堆是最小堆，如果需要最大堆，可以将元素取负值。<br>涉及到堆的弹出操作，需要先判断堆是否为空。否则会抛出异常。<br>堆的组合操作 [heappushpop] 和 [heapreplace] 比两次操作组合起来更快。<br>[nlargest] 和 [nsmallest] 函数适用于 n 比较小的情况，n 比较大时，推荐使用 sorted 函数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> heapq <span class="hljs-keyword">import</span> *<br>h = [<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br>heapify(h)<br><span class="hljs-built_in">print</span>(h)<br><span class="hljs-built_in">print</span>(heappop(h)) <span class="hljs-comment"># 1</span><br>heappush(h, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(h) <span class="hljs-comment"># [2, 3, 7, 4, 5]</span><br><span class="hljs-comment"># 先push再pop</span><br><span class="hljs-built_in">print</span>(heappushpop(h, <span class="hljs-number">1</span>)) <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(h) <span class="hljs-comment"># [2, 3, 7, 4, 5]</span><br><span class="hljs-comment"># 先pop再push</span><br><span class="hljs-built_in">print</span>(heapreplace(h, <span class="hljs-number">1</span>)) <span class="hljs-comment"># 2</span><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(nlargest(<span class="hljs-number">3</span>, a)) <span class="hljs-comment"># [8, 7, 5]</span><br><span class="hljs-built_in">print</span>(nsmallest(<span class="hljs-number">3</span>, a)) <span class="hljs-comment"># [1, 2, 3]</span><br><br></code></pre></td></tr></table></figure><h2 id="4-bisect-二分查找算法">4. bisect 二分查找算法</h2><h3 id="4-1-bisect-left-a-x-lo-0-hi-len-a">4.1 bisect_left(a, x, lo=0, hi=len(a))</h3><p>找到第一个大于等于 x 的元素的位置，保证 <code>a[:pos] </code>都小于 x。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 返回在 a 中可以插入 x 的位置，使得 a 插入 x 之后仍然有序。</span><br><span class="hljs-comment"># 如果 a 中存在 x，则返回 x 左侧的位置。</span><br><span class="hljs-keyword">from</span> bisect <span class="hljs-keyword">import</span> bisect_left<br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>]<br><span class="hljs-built_in">print</span>(bisect_left(a, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(bisect_left(a, <span class="hljs-number">5</span>))  <span class="hljs-comment"># 6</span><br></code></pre></td></tr></table></figure><h3 id="4-2-bisect-right-a-x-lo-0-hi-len-a">4.2 bisect_right(a, x, lo=0, hi=len(a))</h3><p>找到第一个大于 x 的元素的位置，保证 <code>a[:pos] </code>都小于等于 x。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 返回在 a 中可以插入 x 的位置，使得 a 插入 x 之后仍然有序。</span><br><span class="hljs-comment"># 如果 a 中存在 x，则返回 x 右侧的位置。</span><br><span class="hljs-keyword">from</span> bisect <span class="hljs-keyword">import</span> bisect_right<br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>]<br><span class="hljs-built_in">print</span>(bisect_right(a, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 4</span><br><span class="hljs-built_in">print</span>(bisect_right(a, <span class="hljs-number">5</span>))  <span class="hljs-comment"># 6</span><br></code></pre></td></tr></table></figure><h3 id="4-3-insort-left-a-x-lo-0-hi-len-a-和-insort-right-a-x-lo-0-hi-len-a">4.3 insort_left(a, x, lo=0, hi=len(a)) 和 insort_right(a, x, lo=0, hi=len(a))</h3><p>insort_left 将 x 插入到列表 a 中，并保持 a 有序。如果 a 中存在 x，则插入在 x 左侧。<br>insort_right 将 x 插入到列表 a 中，并保持 a 有序。如果 a 中存在 x，则插入在 x 右侧。</p><blockquote><p>注意：虽然 insort 相关函数可以二分查找并直接插入元素到指定位置。但是时间复杂度为 O(n)。个人感觉使用场景不多</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Python</tag>
      
      <tag>库函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>149小A的移动点</title>
    <link href="/2024/12/23/149%E5%B0%8FA%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%82%B9/"/>
    <url>/2024/12/23/149%E5%B0%8FA%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1>问题描述</h1><p>小 M 有<code>n</code>个点，每个点的坐标为 ($x_i$, $y_i$)。她可以从一个点出发，沿着坐标轴方向移动，直到到达另一个点。具体来说，可以从 <code>(x1, y1)</code> 直接移动到 <code>(x2, y1)</code> 或者 <code>(x1, y2)</code>，但无法直接移动到 <code>(x2, y2)</code>。为了确保任意两个点之间都可以通过这种路径互相到达，小 M 需要增加最少数量的新点。</p><h1>题解</h1><h2 id="解题思路">解题思路</h2><p>这个问题可以转化为图论中的连通性问题。将每个点看作图中的一个节点，如果两个点在同一行或同一列，则它们之间有一条边相连。我们需要找到图中的连通分量数目，然后最少需要增加的点数就是连通分量数目减一。</p><p>具体步骤如下：</p><ol><li><strong>并查集（Union-Find）</strong>：使用并查集数据结构来管理点的连接关系，方便快速合并和查找不同连通分量。</li><li><strong>建立行和列的映射</strong>：<ul><li>使用两个字典，<code>row</code> 和 <code>col</code>，分别存储每一行和每一列上的点的索引。</li><li>遍历所有点，将具有相同<code>x</code>坐标的点加入同一行，具有相同<code>y</code>坐标的点加入同一列。</li></ul></li><li><strong>合并连通分量</strong>：<ul><li>对于每一行中的所有点，依次将它们合并到第一点所在的连通分量。</li><li>对于每一列中的所有点，依次将它们合并到第一点所在的连通分量。</li></ul></li><li><strong>计算连通分量</strong>：<ul><li>最终，通过并查集找到所有点的根节点，统计不同的根节点数量，即为连通分量的数目。</li></ul></li><li><strong>得出结果</strong>：<ul><li>最少需要增加的点数为连通分量数目减一。</li></ul></li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, points: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    p = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">if</span> x != p[x]:<br>            p[x] = find(p[x])<br>        <span class="hljs-keyword">return</span> p[x]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">union</span>(<span class="hljs-params">x, y</span>):<br>        x, y = find(x), find(y)<br>        <span class="hljs-keyword">if</span> x != y:<br>            p[y] = x<br><br>    row = defaultdict(<span class="hljs-built_in">list</span>)<br>    col = defaultdict(<span class="hljs-built_in">list</span>)<br>    <span class="hljs-keyword">for</span> i, (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(points):<br>        row[x].append(i)<br>        col[y].append(i)<br><br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> row.values():<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(v)):<br>            union(v[<span class="hljs-number">0</span>], v[i])<br><br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> col.values():<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(v)):<br>            union(v[<span class="hljs-number">0</span>], v[i])<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(find(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n))) - <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">2</span>, [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]]) == <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">3</span>, [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>]]) == <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, [[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">4</span>]]) == <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>图论</tag>
      
      <tag>并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>27游戏英雄升级潜力评估 一行代码解决</title>
    <link href="/2024/12/22/27%E6%B8%B8%E6%88%8F%E8%8B%B1%E9%9B%84%E5%8D%87%E7%BA%A7%E6%BD%9C%E5%8A%9B%E8%AF%84%E4%BC%B0-%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3/"/>
    <url>/2024/12/22/27%E6%B8%B8%E6%88%8F%E8%8B%B1%E9%9B%84%E5%8D%87%E7%BA%A7%E6%BD%9C%E5%8A%9B%E8%AF%84%E4%BC%B0-%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>小 U 在一款挂机游戏中拥有 n 个英雄。游戏中有一种历练升级机制，每天可以选择两个英雄进行历练，如果两位英雄的等级相同，则他们的等级都不会改变。如果英雄等级不同，那么等级较高的英雄会增加 1 级，而等级较低的英雄则保持不变。</p><p>小 U 希望至少有一个英雄能够达到<code>2000000000000000</code>级，现需要确定有多少英雄有潜力通过历练达到这个目标等级。</p><h3 id="问题分析">问题分析</h3><p>要使至少有一个英雄达到<code>2000000000000000</code>级，必须确保有英雄能够不断提升等级。观察历练规则：</p><ul><li><strong>相同等级的英雄</strong>无法提升。</li><li><strong>不同等级的英雄</strong>中，等级较高的英雄每次历练都会增加 1 级。</li></ul><p>因此，只有不是最低等级的英雄才有可能通过不断历练达到高等级。最低等级的英雄无法提升，因此它们不具备达成目标的潜力。</p><h3 id="解题思路">解题思路</h3><ol><li><strong>找出最低等级</strong>：确定所有英雄中当前的最低等级。</li><li><strong>计算最低等级英雄的数量</strong>：这些英雄无法通过历练提升。</li><li><strong>潜力英雄数量</strong>：总英雄数减去最低等级英雄的数量。</li></ol><h3 id="代码实现">代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, u: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">return</span> n - u.count(<span class="hljs-built_in">min</span>(u))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">5</span>, u = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]) == <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">4</span>, u = [<span class="hljs-number">100000</span>, <span class="hljs-number">100000</span>, <span class="hljs-number">100000</span>, <span class="hljs-number">100000</span>]) == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(solution(n = <span class="hljs-number">6</span>, u = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>]) == <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19 字典序最小的 01 字符串 简单 O(n)做法</title>
    <link href="/2024/12/22/19-%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%B0%8F%E7%9A%84-01-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%AE%80%E5%8D%95-O-n-%E5%81%9A%E6%B3%95/"/>
    <url>/2024/12/22/19-%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%B0%8F%E7%9A%84-01-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E7%AE%80%E5%8D%95-O-n-%E5%81%9A%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>19 字典序最小的 01 字符串 简单 O(n)做法</h1><h2 id="题目描述">题目描述</h2><p>小 U 拥有一个由<code>0</code>和<code>1</code>组成的字符串，她可以进行最多<code>k</code>次操作。每次操作可以交换相邻的两个字符。目标是通过这些操作，使得最终得到的字符串字典序最小。</p><h2 id="解题思路">解题思路</h2><p>为了获得字典序最小的字符串，我们的目标是尽可能将<code>'0'</code>移向字符串的左侧而把<code>'1'</code>移到字符串的右侧，并且根据字典序的规则，我们应该尽量把<code>'1'</code>和最右边的<code>'0'</code>交换</p><p>具体步骤如下：</p><ol><li><strong>遍历字符串</strong>：从左到右遍历字符串中的每一个字符。</li><li><strong>遇到<code>'0'</code>时尝试和左边的最远的<code>'1'</code>交换</strong>：<ul><li>对于当前位置的<code>'0'</code>，尝试将其向左边移动尽可能多的位置，但移动的步数不能超过剩余的操作次数<code>ops</code>。</li><li>用指针<code>j</code>记录最左边的<code>'1'</code>的位置，并且<code>j</code>具有单调性，因为假设当前的<code>i - j &gt; ops</code>，这意味着本次不能交换，那么当<code>i</code>继续向右移动时,<code>i - j</code>的值只会越来越大，所以<code>j</code>也必须向右继续移动才有可能进行交换。这也意味这<code>j</code>只会从<code>0~n</code>遍历一次，复杂度为$O(n)$</li><li>更新字符串，同时减少相应的操作次数<code>k</code>。</li></ul></li></ol><p>这种方法确保了在每一步操作中，都将当前的<code>'0'</code>尽可能地向左移动，从而整体上达到了字典序最小的目标。</p><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span>, ops: <span class="hljs-built_in">int</span>, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    s = <span class="hljs-built_in">list</span>(s)<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(j, i):<br>                <span class="hljs-keyword">if</span> s[k] == <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> (i - k) &lt;= ops:<br>                    s[k] = <span class="hljs-string">&#x27;0&#x27;</span><br>                    s[i] = <span class="hljs-string">&#x27;1&#x27;</span><br>                    ops -= (i - k)<br>                    j = k + <span class="hljs-number">1</span>  <span class="hljs-comment"># 更新j的位置</span><br>                    <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(s)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;01010&quot;</span>) == <span class="hljs-string">&#x27;00101&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;1101001&quot;</span>) == <span class="hljs-string">&#x27;0110101&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;1001&quot;</span>) == <span class="hljs-string">&#x27;0101&#x27;</span>)<br></code></pre></td></tr></table></figure><p>复杂度分析<br>时间复杂度：$O(n)$</p><p>空间复杂度：$O(n)$<br>用于存储可变的字符串列表。</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>146字符串首尾相同子序列计数</title>
    <link href="/2024/12/19/146%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A6%96%E5%B0%BE%E7%9B%B8%E5%90%8C%E5%AD%90%E5%BA%8F%E5%88%97%E8%AE%A1%E6%95%B0/"/>
    <url>/2024/12/19/146%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A6%96%E5%B0%BE%E7%9B%B8%E5%90%8C%E5%AD%90%E5%BA%8F%E5%88%97%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1>题解</h1><p>小 M 拿到了一个仅由小写字母组成的字符串，她想知道在这个字符串中，有多少个子序列的首尾字符相同。子序列的定义是：从原字符串中按原顺序取出若干字符（可以不连续）组成的新字符串。</p><p>例如，对于字符串 “arcaea”，其子序列包括 “aca”, “ara”, “aaa” 等，这些子序列的首尾字符都是相同的。</p><p>你需要计算满足这一条件的子序列数量，并输出对 998244353 取模的结果。</p><h2 id="解题思路">解题思路</h2><ol><li><p><strong>统计字符出现位置</strong>：<br>使用 <code>defaultdict</code> 来存储每个字符在字符串中出现的所有位置。</p></li><li><p><strong>计算子序列数量</strong>：<br>对于每个字符，考虑其所有可能的首尾位置组合 <code>(i, j)</code>，其中 $i &lt; j$。对于每一对 <code>(i, j)</code>，位于 $i$ 和 $j$ 之间的字符可以选择或不选择，因此有 $2^{j - i - 1}$ 种可能的子序列。</p></li><li><p><strong>累加结果</strong>：<br>将所有符合条件的子序列数量累加，同时加上单个字符的情况（每个字符本身也是一个有效的子序列）。</p></li><li><p><strong>取模处理</strong>：<br>最终结果对 <code>998244353</code> 取模。</p></li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solution</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    d = defaultdict(<span class="hljs-built_in">list</span>)<br>    <span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>        d[c].append(i)<br>    res = <span class="hljs-number">0</span><br>    mod = <span class="hljs-number">998244353</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> d:<br>        v = d[k]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(v)):<br>                res += <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, v[j] - v[i] - <span class="hljs-number">1</span>, mod)<br>    <span class="hljs-keyword">return</span> (res + <span class="hljs-built_in">len</span>(s)) % mod<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;arcaea&quot;</span>) == <span class="hljs-number">28</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;abcabc&quot;</span>) == <span class="hljs-number">18</span>)<br>    <span class="hljs-built_in">print</span>(solution(<span class="hljs-string">&quot;aaaaa&quot;</span>) == <span class="hljs-number">31</span>)<br></code></pre></td></tr></table></figure><h2 id="复杂度分析">复杂度分析</h2><ul><li><strong>时间复杂度</strong>：<code>O(N^2)</code>，其中 <code>N</code> 是字符串的长度。主要消耗在于双重循环遍历每个字符的所有位置组合。</li><li><strong>空间复杂度</strong>：<code>O(N)</code>，用于存储每个字符出现的位置。</li></ul><h2 id="注意事项">注意事项</h2><ul><li>模数应为 <code>998244353</code>，请确保代码中 <code>mod</code> 的值正确。</li><li>由于可能存在大量的子序列，务必在计算中进行取模操作以防止整数溢出。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
